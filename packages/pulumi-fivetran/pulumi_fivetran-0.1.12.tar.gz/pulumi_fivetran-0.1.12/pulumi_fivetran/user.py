# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 family_name: pulumi.Input[str],
                 given_name: pulumi.Input[str],
                 phone: Optional[pulumi.Input[str]] = None,
                 picture: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if picture is not None:
            pulumi.set(__self__, "picture", picture)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "family_name", value)

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "given_name", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter
    def picture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "picture")

    @picture.setter
    def picture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "picture", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 family_name: Optional[pulumi.Input[str]] = None,
                 given_name: Optional[pulumi.Input[str]] = None,
                 invited: Optional[pulumi.Input[bool]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 logged_in_at: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 picture: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 verified: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering User resources.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if family_name is not None:
            pulumi.set(__self__, "family_name", family_name)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if invited is not None:
            pulumi.set(__self__, "invited", invited)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if logged_in_at is not None:
            pulumi.set(__self__, "logged_in_at", logged_in_at)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if picture is not None:
            pulumi.set(__self__, "picture", picture)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family_name", value)

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "given_name", value)

    @property
    @pulumi.getter
    def invited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invited")

    @invited.setter
    def invited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invited", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="loggedInAt")
    def logged_in_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logged_in_at")

    @logged_in_at.setter
    def logged_in_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logged_in_at", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter
    def picture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "picture")

    @picture.setter
    def picture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "picture", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def verified(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verified")

    @verified.setter
    def verified(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verified", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 family_name: Optional[pulumi.Input[str]] = None,
                 given_name: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 picture: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a User resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a User resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 family_name: Optional[pulumi.Input[str]] = None,
                 given_name: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 picture: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if family_name is None and not opts.urn:
                raise TypeError("Missing required property 'family_name'")
            __props__.__dict__["family_name"] = family_name
            if given_name is None and not opts.urn:
                raise TypeError("Missing required property 'given_name'")
            __props__.__dict__["given_name"] = given_name
            __props__.__dict__["phone"] = phone
            __props__.__dict__["picture"] = picture
            __props__.__dict__["role"] = role
            __props__.__dict__["created_at"] = None
            __props__.__dict__["invited"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["logged_in_at"] = None
            __props__.__dict__["verified"] = None
        super(User, __self__).__init__(
            'fivetran:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            family_name: Optional[pulumi.Input[str]] = None,
            given_name: Optional[pulumi.Input[str]] = None,
            invited: Optional[pulumi.Input[bool]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            logged_in_at: Optional[pulumi.Input[str]] = None,
            phone: Optional[pulumi.Input[str]] = None,
            picture: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            verified: Optional[pulumi.Input[bool]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["email"] = email
        __props__.__dict__["family_name"] = family_name
        __props__.__dict__["given_name"] = given_name
        __props__.__dict__["invited"] = invited
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["logged_in_at"] = logged_in_at
        __props__.__dict__["phone"] = phone
        __props__.__dict__["picture"] = picture
        __props__.__dict__["role"] = role
        __props__.__dict__["verified"] = verified
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def invited(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "invited")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="loggedInAt")
    def logged_in_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logged_in_at")

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def picture(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "picture")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def verified(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "verified")

