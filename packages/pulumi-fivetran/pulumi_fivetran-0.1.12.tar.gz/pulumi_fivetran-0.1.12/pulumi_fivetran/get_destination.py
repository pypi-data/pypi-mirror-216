# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDestinationResult',
    'AwaitableGetDestinationResult',
    'get_destination',
    'get_destination_output',
]

@pulumi.output_type
class GetDestinationResult:
    """
    A collection of values returned by getDestination.
    """
    def __init__(__self__, configs=None, group_id=None, id=None, region=None, service=None, setup_status=None, time_zone_offset=None):
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if setup_status and not isinstance(setup_status, str):
            raise TypeError("Expected argument 'setup_status' to be a str")
        pulumi.set(__self__, "setup_status", setup_status)
        if time_zone_offset and not isinstance(time_zone_offset, str):
            raise TypeError("Expected argument 'time_zone_offset' to be a str")
        pulumi.set(__self__, "time_zone_offset", time_zone_offset)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetDestinationConfigResult']:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="setupStatus")
    def setup_status(self) -> str:
        return pulumi.get(self, "setup_status")

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> str:
        return pulumi.get(self, "time_zone_offset")


class AwaitableGetDestinationResult(GetDestinationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDestinationResult(
            configs=self.configs,
            group_id=self.group_id,
            id=self.id,
            region=self.region,
            service=self.service,
            setup_status=self.setup_status,
            time_zone_offset=self.time_zone_offset)


def get_destination(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDestinationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getDestination:getDestination', __args__, opts=opts, typ=GetDestinationResult).value

    return AwaitableGetDestinationResult(
        configs=__ret__.configs,
        group_id=__ret__.group_id,
        id=__ret__.id,
        region=__ret__.region,
        service=__ret__.service,
        setup_status=__ret__.setup_status,
        time_zone_offset=__ret__.time_zone_offset)


@_utilities.lift_output_func(get_destination)
def get_destination_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDestinationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
