# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DestinationArgs', 'Destination']

@pulumi.input_type
class DestinationArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['DestinationConfigArgs'],
                 group_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 service: pulumi.Input[str],
                 time_zone_offset: pulumi.Input[str],
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Destination resource.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "time_zone_offset", time_zone_offset)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['DestinationConfigArgs']:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['DestinationConfigArgs']):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone_offset")

    @time_zone_offset.setter
    def time_zone_offset(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone_offset", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_fingerprints", value)


@pulumi.input_type
class _DestinationState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DestinationConfigArgs']] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 setup_status: Optional[pulumi.Input[str]] = None,
                 time_zone_offset: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Destination resources.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if setup_status is not None:
            pulumi.set(__self__, "setup_status", setup_status)
        if time_zone_offset is not None:
            pulumi.set(__self__, "time_zone_offset", time_zone_offset)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DestinationConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DestinationConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="setupStatus")
    def setup_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setup_status")

    @setup_status.setter
    def setup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_status", value)

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone_offset")

    @time_zone_offset.setter
    def time_zone_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone_offset", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_fingerprints", value)


class Destination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['DestinationConfigArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 time_zone_offset: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Destination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DestinationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Destination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DestinationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DestinationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['DestinationConfigArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 time_zone_offset: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DestinationArgs.__new__(DestinationArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["run_setup_tests"] = run_setup_tests
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if time_zone_offset is None and not opts.urn:
                raise TypeError("Missing required property 'time_zone_offset'")
            __props__.__dict__["time_zone_offset"] = time_zone_offset
            __props__.__dict__["trust_certificates"] = trust_certificates
            __props__.__dict__["trust_fingerprints"] = trust_fingerprints
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["setup_status"] = None
        super(Destination, __self__).__init__(
            'fivetran:index/destination:Destination',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['DestinationConfigArgs']]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            run_setup_tests: Optional[pulumi.Input[bool]] = None,
            service: Optional[pulumi.Input[str]] = None,
            setup_status: Optional[pulumi.Input[str]] = None,
            time_zone_offset: Optional[pulumi.Input[str]] = None,
            trust_certificates: Optional[pulumi.Input[bool]] = None,
            trust_fingerprints: Optional[pulumi.Input[bool]] = None) -> 'Destination':
        """
        Get an existing Destination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DestinationState.__new__(_DestinationState)

        __props__.__dict__["config"] = config
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["region"] = region
        __props__.__dict__["run_setup_tests"] = run_setup_tests
        __props__.__dict__["service"] = service
        __props__.__dict__["setup_status"] = setup_status
        __props__.__dict__["time_zone_offset"] = time_zone_offset
        __props__.__dict__["trust_certificates"] = trust_certificates
        __props__.__dict__["trust_fingerprints"] = trust_fingerprints
        return Destination(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.DestinationConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "run_setup_tests")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="setupStatus")
    def setup_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "setup_status")

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time_zone_offset")

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "trust_certificates")

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "trust_fingerprints")

