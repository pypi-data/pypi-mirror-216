# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetConnectorsMetadataResult',
    'AwaitableGetConnectorsMetadataResult',
    'get_connectors_metadata',
]

@pulumi.output_type
class GetConnectorsMetadataResult:
    """
    A collection of values returned by getConnectorsMetadata.
    """
    def __init__(__self__, id=None, sources=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetConnectorsMetadataSourceResult']:
        return pulumi.get(self, "sources")


class AwaitableGetConnectorsMetadataResult(GetConnectorsMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectorsMetadataResult(
            id=self.id,
            sources=self.sources)


def get_connectors_metadata(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectorsMetadataResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getConnectorsMetadata:getConnectorsMetadata', __args__, opts=opts, typ=GetConnectorsMetadataResult).value

    return AwaitableGetConnectorsMetadataResult(
        id=__ret__.id,
        sources=__ret__.sources)
