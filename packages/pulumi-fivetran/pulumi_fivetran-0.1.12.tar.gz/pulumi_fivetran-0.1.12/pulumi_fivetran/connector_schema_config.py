# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectorSchemaConfigArgs', 'ConnectorSchemaConfig']

@pulumi.input_type
class ConnectorSchemaConfigArgs:
    def __init__(__self__, *,
                 connector_id: pulumi.Input[str],
                 schema_change_handling: pulumi.Input[str],
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaArgs']]]] = None):
        """
        The set of arguments for constructing a ConnectorSchemaConfig resource.
        """
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "schema_change_handling", schema_change_handling)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter(name="schemaChangeHandling")
    def schema_change_handling(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema_change_handling")

    @schema_change_handling.setter
    def schema_change_handling(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_change_handling", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaArgs']]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaArgs']]]]):
        pulumi.set(self, "schemas", value)


@pulumi.input_type
class _ConnectorSchemaConfigState:
    def __init__(__self__, *,
                 connector_id: Optional[pulumi.Input[str]] = None,
                 schema_change_handling: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaArgs']]]] = None):
        """
        Input properties used for looking up and filtering ConnectorSchemaConfig resources.
        """
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if schema_change_handling is not None:
            pulumi.set(__self__, "schema_change_handling", schema_change_handling)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter(name="schemaChangeHandling")
    def schema_change_handling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema_change_handling")

    @schema_change_handling.setter
    def schema_change_handling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_change_handling", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaArgs']]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaArgs']]]]):
        pulumi.set(self, "schemas", value)


class ConnectorSchemaConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[str]] = None,
                 schema_change_handling: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectorSchemaConfigSchemaArgs']]]]] = None,
                 __props__=None):
        """
        Create a ConnectorSchemaConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorSchemaConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ConnectorSchemaConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConnectorSchemaConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorSchemaConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[str]] = None,
                 schema_change_handling: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectorSchemaConfigSchemaArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorSchemaConfigArgs.__new__(ConnectorSchemaConfigArgs)

            if connector_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_id'")
            __props__.__dict__["connector_id"] = connector_id
            if schema_change_handling is None and not opts.urn:
                raise TypeError("Missing required property 'schema_change_handling'")
            __props__.__dict__["schema_change_handling"] = schema_change_handling
            __props__.__dict__["schemas"] = schemas
        super(ConnectorSchemaConfig, __self__).__init__(
            'fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_id: Optional[pulumi.Input[str]] = None,
            schema_change_handling: Optional[pulumi.Input[str]] = None,
            schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectorSchemaConfigSchemaArgs']]]]] = None) -> 'ConnectorSchemaConfig':
        """
        Get an existing ConnectorSchemaConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorSchemaConfigState.__new__(_ConnectorSchemaConfigState)

        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["schema_change_handling"] = schema_change_handling
        __props__.__dict__["schemas"] = schemas
        return ConnectorSchemaConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="schemaChangeHandling")
    def schema_change_handling(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schema_change_handling")

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectorSchemaConfigSchema']]]:
        return pulumi.get(self, "schemas")

