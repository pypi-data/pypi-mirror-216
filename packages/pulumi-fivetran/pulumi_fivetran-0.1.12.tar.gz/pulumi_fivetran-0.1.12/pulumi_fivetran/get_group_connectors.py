# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGroupConnectorsResult',
    'AwaitableGetGroupConnectorsResult',
    'get_group_connectors',
    'get_group_connectors_output',
]

@pulumi.output_type
class GetGroupConnectorsResult:
    """
    A collection of values returned by getGroupConnectors.
    """
    def __init__(__self__, connectors=None, id=None, schema=None):
        if connectors and not isinstance(connectors, list):
            raise TypeError("Expected argument 'connectors' to be a list")
        pulumi.set(__self__, "connectors", connectors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def connectors(self) -> Sequence['outputs.GetGroupConnectorsConnectorResult']:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")


class AwaitableGetGroupConnectorsResult(GetGroupConnectorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupConnectorsResult(
            connectors=self.connectors,
            id=self.id,
            schema=self.schema)


def get_group_connectors(id: Optional[str] = None,
                         schema: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupConnectorsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['schema'] = schema
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getGroupConnectors:getGroupConnectors', __args__, opts=opts, typ=GetGroupConnectorsResult).value

    return AwaitableGetGroupConnectorsResult(
        connectors=__ret__.connectors,
        id=__ret__.id,
        schema=__ret__.schema)


@_utilities.lift_output_func(get_group_connectors)
def get_group_connectors_output(id: Optional[pulumi.Input[str]] = None,
                                schema: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupConnectorsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
