# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError
from ...types.project_supabase import ProjectSupabase


class ProjectsClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    def create_project(
        self,
        *,
        project_name: str,
        user_id: typing.Optional[str] = None,
        request: typing.Dict[str, typing.Any],
        api_key: typing.Optional[str] = None,
    ) -> ProjectSupabase:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "projects"),
            params={"project_name": project_name, "user_id": user_id},
            json=jsonable_encoder(request),
            headers=remove_none_from_headers({"x-api-key": api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectSupabase, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProjectsClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    async def create_project(
        self,
        *,
        project_name: str,
        user_id: typing.Optional[str] = None,
        request: typing.Dict[str, typing.Any],
        api_key: typing.Optional[str] = None,
    ) -> ProjectSupabase:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "projects"),
                params={"project_name": project_name, "user_id": user_id},
                json=jsonable_encoder(request),
                headers=remove_none_from_headers({"x-api-key": api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectSupabase, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
