"use strict";(self.webpackChunkjupyterlab_nbhosting=self.webpackChunkjupyterlab_nbhosting||[]).push([[568],{568:(o,t,e)=>{e.r(t),e.d(t,{default:()=>i});var a=e(350),n=e(56);const l={id:"jupyterlab-nbhosting:plugin",description:"Custom look and feel for nbhosting notebooks",autoStart:!0,requires:[a.ICommandPalette],optional:[n.ISettingRegistry],activate:(o,t,e)=>{console.log("JupyterLab extension jupyterlab-nbhosting is activated!"),e&&e.load(l.id).then((o=>{console.log("jupyterlab-nbhosting settings loaded:",o.composite)})).catch((o=>{console.error("Failed to load settings for jupyterlab-nbhosting.",o)}));const n=o=>{let t=new RegExp("[?&]"+o+"=([^&]*)").exec(window.location.search);if(t)return decodeURIComponent(t[1]||"")},i=async({target:o,message:t,value:e})=>{try{let a="";if(!navigator.clipboard)throw new Error("Browser don't have support for native clipboard.");if(o){const t=document.querySelector(o);if(!t||!t.textContent)throw new Error("Element not found");e=t.textContent}e&&(a=e),await navigator.clipboard.writeText(a),console.log(null!=t?t:"Copied!!!")}catch(o){console.log("could not copyToClipboard",o)}},s=n("course"),c=n("student"),r=new RegExp("^/([0-9]+)/notebooks/(.*)").exec(window.location.pathname),d=r?r[2]:void 0,{commands:b}=o;let p;const u="nbhosting";p="nbhosting:reset-to-original",b.addCommand(p,{label:"Reset to Original",execute:o=>{(0,a.showDialog)({title:"Confirm reset to original",body:"Are you sure to reset your notebook to the original version ?  all your changes will be lost",buttons:[{label:"Reset",caption:"Reset",iconLabel:"Reset",accept:!0,className:"dialog-button",ariaLabel:"aria-label",iconClass:"icon-class",actions:[],displayType:"default"},{label:"Cancel",caption:"Cancel",iconLabel:"Cancel",accept:!1,className:"dialog-button",ariaLabel:"aria-label",iconClass:"icon-class",actions:[],displayType:"default"}],defaultButton:0}).then((o=>{if(o.button.accept){if(!d)return void console.log("not under nbhosting");const o=`/notebookLazyCopy/${s}/${d}/${c}?forcecopy=true`;console.log("resetting -> ",o),window.location.href=o}}))}}),t.addItem({command:p,category:u}),p="nbhosting:share-static-version",b.addCommand(p,{label:"Share Static Version",execute:async o=>{let t=`/ipythonShare/${s}/${d}/${c}`;try{const o=await fetch(t),e=await o.json();let n;n="error"in e?`Could not create snapshot\n${e.error}`:`<p class='nbh-dialog'>To share a static version of your notebook, copy this link:<a id="try-share-url" target='_blank' href='${e.url_path}'>Try the link</a></p><span id="share-url">${e.url}</span></div><p class='nbh-dialog'>Note that sharing the same notebook several times overwrites the same snapshot</p>`,(0,a.showDialog)({title:"Static version created (or overwritten)",body:n,buttons:[{label:"Copy to Clipboard",caption:"Copy to Clipboard",iconLabel:"Copy to Clipboard",accept:!0,className:"dialog-button",ariaLabel:"aria-label",iconClass:"icon-class",actions:[],displayType:"default"},{label:"Ok",caption:"Ok",iconLabel:"Ok",accept:!1,className:"dialog-button",ariaLabel:"aria-label",iconClass:"icon-class",actions:[],displayType:"default"}],defaultButton:0}).then((o=>{o.button.accept&&(console.log(`opying ${e.url}`),i({value:e.url}))}))}catch(o){return void console.log(`Error when using URL ${t}`)}}}),t.addItem({command:p,category:u}),p="nbhosting:show-student-id",b.addCommand(p,{label:"Show Student id",execute:o=>{(0,a.showDialog)({title:"Your student id",body:c,buttons:[{label:"Copy to Clipboard",caption:"Copy to Clipboard",iconLabel:"Copy to Clipboard",accept:!0,className:"dialog-button",ariaLabel:"aria-label",iconClass:"icon-class",actions:[],displayType:"default"},{label:"Ok",caption:"Ok",iconLabel:"Ok",accept:!1,className:"dialog-button",ariaLabel:"aria-label",iconClass:"icon-class",actions:[],displayType:"default"}],defaultButton:0}).then((o=>{if(o.button.accept){if(void 0===c)return void console.log("undefined student");console.log(`copying ${c}`),i({value:c})}}))}}),t.addItem({command:p,category:u})}},i=l}}]);