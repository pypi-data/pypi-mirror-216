# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_types.ipynb.

# %% auto 0
__all__ = ['Graph', 'CUTOFF', 'CUTOFF_SHORTHAND_TO_OBS_KEYS', 'CutoffSpecs', 'str_to_cutoff', 'CutoffSpec']

# %% ../nbs/01_types.ipynb 3
# NOTE: needed for python 3.10 forward compatibility with scanpy as 
# scanpy uses Iterable which is deprecated in 3.10
import collections.abc
#hyper needs the four following aliases to be done manually.
collections.Iterable = collections.abc.Iterable
collections.Mapping = collections.abc.Mapping
collections.MutableSet = collections.abc.MutableSet
collections.MutableMapping = collections.abc.MutableMapping

# %% ../nbs/01_types.ipynb 4
import graphtools as gt
from typing import (TypeAlias, Optional, List, Union, get_args)
from dataclasses import dataclass, field, KW_ONLY

# %% ../nbs/01_types.ipynb 5
from iza.types import (
    Series, ndarray, Tensor, 
    DataFrame, DataFrames, AnnData, AnnDatas,

    Numeric, Bool, Boolish, IndexLike, SeriesLike, IterLike, GroupKey,

    TrainValidSplit, TrainTestSplit, TrainValidTestSplit,
    SplitTuple2, SplitTuple3, SplitAsList, DatasetSplitSpec,

    SplitDataset2Idxs, SplitDataset3Idxs, 
    SplitDataFrames2, SplitDataFrames3, SplitDatasets,
)

# %% ../nbs/01_types.ipynb 6
from degex.static import (
    TOTAL_COUNTS, DOUBLET_SCORES, TOTAL_COUNTS, PCT_COUNTS_MITO, PCT_COUNTS_RIBO, DOUBLET_SCORES
)

# %% ../nbs/01_types.ipynb 7
# Type Alias for graphtools.Graph
Graph: TypeAlias = gt.Graph

# Types of cutoffs that can be used in our cutoff function
CUTOFF = Union[TOTAL_COUNTS, PCT_COUNTS_MITO, PCT_COUNTS_RIBO, DOUBLET_SCORES]

CUTOFF_SHORTHAND_TO_OBS_KEYS = {
    'default': TOTAL_COUNTS, # 500 < obs < 10000
    'total_counts': TOTAL_COUNTS, # 500 < obs < 10000
    'mito': PCT_COUNTS_MITO, # None < obs < 15
    'ribo': PCT_COUNTS_RIBO, # None < obs < 15
    'doublet': DOUBLET_SCORES, # None < obs < 0.4
}

#| export
def str_to_cutoff(s:str) -> CUTOFF:
    return CUTOFF_SHORTHAND_TO_OBS_KEYS.get(s, 'total_counts')
    
@dataclass
class CutoffSpec:
    obs_key: Union[CUTOFF, str] = field(default=TOTAL_COUNTS)
    lower: Optional[float] = field(default=None)
    upper: Optional[float] = field(default=None)

    @staticmethod
    def str_to_cutoff(s:str) -> CUTOFF:
        return str_to_cutoff(s)

    @property
    def known_cutoffs(self) -> List[str]:
        return get_args(CUTOFF)
    
    @property
    def is_valid(self) -> bool:
        return self.obs_key is self.known_cutoffs

# Type Alias for a list of CutoffSpecification
CutoffSpecs: TypeAlias = List[CutoffSpec]
