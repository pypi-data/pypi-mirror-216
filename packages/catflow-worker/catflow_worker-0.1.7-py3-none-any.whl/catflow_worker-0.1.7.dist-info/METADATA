Metadata-Version: 2.1
Name: catflow-worker
Version: 0.1.7
Summary: Consumer/publisher loop for workers in an object recognition pipeline
Author-email: Ian Kilgore <iank@iank.org>
License: MIT License
        
        Copyright (c) 2023 Ian Kilgore
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aio-pika (>=9.1.3)
Requires-Dist: aioboto3 (>=11.2.0)
Requires-Dist: aiobotocore (>=2.5.0)
Requires-Dist: boto3 (>=1.26.76)
Requires-Dist: botocore (>=1.29.76)
Requires-Dist: marshmallow (>=3.19.0)
Provides-Extra: dev
Requires-Dist: pytest ; extra == 'dev'
Requires-Dist: pytest-asyncio ; extra == 'dev'
Requires-Dist: pytest-rabbitmq ; extra == 'dev'
Requires-Dist: moto[server] (>=4.1.11) ; extra == 'dev'
Requires-Dist: aiofile ; extra == 'dev'

# catflow-worker

Consumer/publisher loop for workers in an object recognition pipeline

# Setup

* Install [pre-commit](https://pre-commit.com/#install) in your virtualenv. Run
`pre-commit install` after cloning this repository.

# Develop

Install:

```
pip install --editable .[dev]
```

Configure:

```
export CATFLOW_S3_ENDPOINT_URL="your-endpoint-url"
export CATFLOW_AWS_ACCESS_KEY_ID="your-access-key-id"
export CATFLOW_AWS_SECRET_ACCESS_KEY="your-secret-access-key"
export CATFLOW_AWS_BUCKET_NAME="your-bucket-name"
export CATFLOW_AMQP_URL="amqp://username:password@hostname:port/"
export CATFLOW_AMQP_EXCHANGE="catflow"
```

Run the sample loop:

```
$ python -m catflow_worker
[*] Message received (ingest.video): da0b7b0a-c5e9-44dd-b67a-4fef9c5d86bd.mp4
[-] Content-Type binary/octet-stream
[-] Content-Length 92598
[*] Message received (detect.video): da0b7b0a-c5e9-44dd-b67a-4fef9c5d86bd.mp4
[-] Content-Type binary/octet-stream
[-] Content-Length 92598
```

# Build

```
pip install build
python -m build
```

# Test

```
pytest
```

# Usage

Define an async handler function:

```
async def example_handler(
    msg: str, key: str, s3: Any, bucket: str
) -> Tuple[bool, List[Tuple[str, str]]]:
```

The handler function
* gets: a message, the key the message was sent to, an S3 client, the name of an S3 bucket to use
* and returns: an error status, and a list of (key, message) tuples to publish

Then start it like:

```
worker = await Worker.create(handler, queue_name, topic_key)
await worker.work()
```

See `catflow_worker/main.py` for a working example.
