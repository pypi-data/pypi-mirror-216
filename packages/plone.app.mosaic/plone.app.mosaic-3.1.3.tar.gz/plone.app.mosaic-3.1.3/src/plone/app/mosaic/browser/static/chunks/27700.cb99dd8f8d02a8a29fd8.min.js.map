{"version":3,"file":"chunks/27700.cb99dd8f8d02a8a29fd8.min.js","mappings":"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","sources":["webpack://plone-mosaic/./resources/js/mosaic.actions.js"],"sourcesContent":["// This plugin is used to register and execute actions.\nimport $ from \"jquery\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\nimport mosaic_utils from \"./utils\";\nimport Modal from \"@plone/mockup/src/pat/modal/modal\";\nimport utils from \"@plone/mockup/src/core/utils\";\nimport \"./mosaic.overlay\";\n\nconst log = logging.getLogger(\"pat-mosaic/actions\");\n\nclass ActionManager {\n    constructor(mosaic) {\n        this.mosaic = mosaic;\n        this.actions = []; // Array with all the actions\n        this.shortcuts = []; // Lookup array for shortcuts\n    }\n\n    registerAction (name, options) {\n        var self = this;\n        // Extend default settings\n        options = {\n            // Handler for executing the action\n            exec: function () { },\n\n            // Shortcut can be any key + ctrl/shift/alt or a combination of\n            // those\n            shortcut: {\n                ctrl: false,\n                alt: false,\n                shift: false,\n                key: \"\",\n            },\n\n            // Method to see if the actions should be visible based on the\n            // current tile state\n            visible: function (tile) {\n                return true;\n            },\n\n            ...options\n        };\n\n        // Add action to manager\n        self.actions[name] = options;\n\n        // Check if shortcut is defined\n        if (options.shortcut.key !== \"\") {\n            // Set keyCode and charCode\n            options.shortcut.charCode = options.shortcut.key.toUpperCase().charCodeAt(0);\n            options.shortcut.action = name;\n\n            // Set shortcut\n            self.shortcuts.push(options.shortcut);\n        }\n    }\n\n    execAction (action, source) {\n        var self = this;\n        if(!(action in self.actions)) {\n            log.error(`Action ${action} not in \"${self.actions}\"`);\n            return;\n        }\n        return self.actions[action].exec(source);\n    }\n\n    getPrefixedClassName (name) {\n        if (name.indexOf(\"-\") > -1) {\n            // dash-spaced-class-name\n            return \"mosaic-\" + name;\n        } else {\n            // camelCaseClassName\n            return \"mosaic\" + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n    };\n\n    async initActions () {\n        var self = this;\n        var mosaic = self.mosaic;\n\n        // Register generic re-usable toggle tile class format action\n        self.registerAction(\"tile-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document).toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic re-usable toggle tile class format action\n        self.registerAction(\"tile-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"tile\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document).removeClass(name);\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register generic re-usable toggle row class format action\n        self.registerAction(\"row-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document)\n                        .parents(\".mosaic-grid-row\")\n                        .first()\n                        .toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic re-usable toggle row class format action\n        self.registerAction(\"row-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"row\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document)\n                                .parents(\".mosaic-grid-row\")\n                                .first()\n                                .removeClass(name)\n                                .removeClass(action.name);\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register tile align block action\n        self.registerAction(\"tile-align-block\", {\n            exec: function () {\n                // Remove left and right align classes\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .removeClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"b\",\n            },\n        });\n\n        // Register tile align left action\n        self.registerAction(\"tile-align-left\", {\n            exec: function () {\n                // Remove right align class, add left align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .addClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"l\",\n            },\n        });\n\n        // Register tile align right action\n        self.registerAction(\"tile-align-right\", {\n            exec: function () {\n                // Remove left align class, add right align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-left\")\n                    .addClass(\"mosaic-tile-align-right\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"r\",\n            },\n        });\n\n        // Register save action\n        self.registerAction(\"save\", {\n            exec: function () {\n                mosaic.saving = true;\n                self.blurSelectedTile();\n                mosaic.toolbar.SelectedTileChange();\n                mosaic.queue(function (next) {\n                    mosaic.layoutManager.saveLayoutToForm();\n                    $(\"#form-buttons-save\").trigger(\"click\");\n                    mosaic.saving = false;\n                    next();\n                });\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: false,\n                key: \"s\",\n            },\n        });\n\n        // Register cancel action\n        self.registerAction(\"cancel\", {\n            exec: function () {\n                // Cancel form\n                $(\"#form-buttons-cancel\").trigger(\"click\");\n            },\n        });\n\n        // Register preview action\n        self.registerAction(\"preview\", {\n            exec: function () {\n                // Trigger validation => drafting sync\n                $(\n                    \"#form-widgets-ILayoutAware-customContentLayout, \" +\n                    \"[name='form.widgets.ILayoutAware.customContentLayout']\"\n                )\n                    .trigger(\"focus\")\n                    .trigger(\"focusout\");\n\n                // Layout preview\n                setTimeout(function () {\n                    window.open(\n                        mosaic.options.context_url + \"/@@layout_preview\",\n                        \"_blank\"\n                    );\n                }, 1000);\n            },\n        });\n\n        // Register html action\n        self.registerAction(\"html\", {\n            exec: function () {\n                // Local variables\n                var tilecontent, text, height;\n\n                // Get tile content div\n                tilecontent = $(\".mosaic-selected-tile\", mosaic.document).children(\n                    \".mosaic-tile-content\"\n                );\n\n                // Check if not already html editable\n                if (tilecontent.find(\".mosaic-rich-text-textarea\").length === 0) {\n                    // Add new text area and set content\n                    text = tilecontent.html();\n                    height = tilecontent.height();\n                    tilecontent.empty();\n                    tilecontent.prepend(\n                        $(mosaic.document.createElement(\"textarea\"))\n                            .addClass(\"mosaic-rich-text-textarea\")\n                            .html($.trim(text))\n                            .height(height)\n                    );\n                }\n            },\n        });\n\n        // Register page properties action\n        self.registerAction(\"properties\", {\n            exec: function () {\n                mosaic.overlay.open(\"all\");\n            },\n        });\n\n        self.registerAction(\"layout\", {\n            /* layout drop down */\n            exec: function () {\n                var $container = $(\".mosaic-button-group-layout\");\n                $container.toggleClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // register customize layout button\n        self.registerAction(\"customizelayout\", {\n            exec: function () {\n                mosaic.setSelectedContentLayout(\"\"); // clear selected layout, will use stored layout then\n                $(\".mosaic-toolbar-secondary-functions\").removeClass(\"d-none\");\n                $(\".mosaic-button-customizelayout\").hide();\n                $(\".mosaic-button-savelayout\").show();\n                // go through each tile and add movable\n                $(\".mosaic-panel .mosaic-tile\", mosaic.document).each(function () {\n                    var $mosaic_tile = $(this).data(\"mosaic-tile\");\n                    $mosaic_tile.makeMovable();\n                    $mosaic_tile.$el.mosaicAddDrag();\n                });\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.hasContentLayout && mosaic.options.canChangeLayout;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"changelayout\", {\n            exec: function () {\n                var yes = mosaic.hasContentLayout;\n                if (!yes) {\n                    yes = confirm(\n                        \"Changing your layout will destroy all existing custom layout \" +\n                        \"settings you have in place. Are you sure you want to continue?\"\n                    );\n                }\n                if (yes) {\n                    mosaic.selectLayout();\n                }\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.options.available_layouts.length > 0;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"savelayout\", {\n            exec: function () {\n                mosaic.saveLayout();\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // Register add tile action\n        self.registerAction(\"add-tile\", {\n            exec: function () {\n                // Open overlay\n                var m = new Modal(\".mosaic-toolbar\", {\n                    modalSizeClass: \"modal-lg\",\n                    ajaxUrl: mosaic.options.context_url +\n                        \"/@@add-tile?form.button.Create=Create\",\n                });\n                m.show();\n            },\n        });\n\n        // Register format action\n        self.registerAction(\"format\", {\n            exec: function (source) {\n                var val = $(source).val();\n                var action = $(source).find(`[value=\"${val}\"]`).data(\"action\")\n                self.execAction(action, source);\n                // reset selector\n                $(source).select2(\"val\", \"none\");\n            },\n        });\n\n        // Register page-insert action\n        self.registerAction(\"insert\", {\n            exec: function (source) {\n                // Local variables\n                var tile_config, tile_type;\n\n                // Check if value selected\n                if ($(source).val() === \"none\") {\n                    return false;\n                } else {\n                    tile_type = $(source).val();\n                }\n\n                // Deselect tiles\n                self.blurSelectedTile()\n\n                // Set actions\n                mosaic.toolbar.SelectedTileChange();\n\n                // Get tile config\n                for (const tile_group of mosaic.options.tiles) {\n                    for (const tile of tile_group.tiles) {\n                        if (tile.name === tile_type) {\n                            tile_config = tile;\n                        }\n                    }\n                }\n\n                // Create new app tile\n                if (tile_config.tile_type === \"textapp\") {\n                    // an app tile\n                    var uid = mosaic_utils.generate_uid();\n                    var tileUrl = mosaic.options.context_url + \"/@@\" + tile_type + \"/\" + uid;\n                    var html = \"<html><body>\" +\n                        mosaic.layoutManager.getDefaultValue(tile_config) +\n                        \"</body></html>\";\n                    mosaic.layoutManager.addAppTileHTML(tile_type, html, tileUrl);\n                } else if (tile_config.tile_type === \"app\") {\n                    // Load add form form selected tiletype\n                    utils.loading.show();\n\n                    const openAddFormInModal = function (html) {\n                        let initial = true;\n                        const m = new Modal(self.mosaic.panels[0], {\n                            html: html,\n                            modalSizeClass: \"modal-lg\",\n                            position: \"center top\",\n                            buttons: '.formControls > button[type=\"submit\"], .actionButtons > button[type=\"submit\"]',\n                        });\n                        m.on(\"after-render\",\n                            (event) => {\n                                /* Remove field errors since the user has not actually\n                                    been able to fill out the form yet\n                                */\n                                var $mContent = m.$modalContent;\n                                if (initial) {\n                                    $(\".field.error\", $mContent).removeClass(\"error\");\n                                    $(\n                                        \".fieldErrorBox,.portalMessage,.alert,.invalid-feedback\",\n                                        $mContent\n                                    ).remove();\n                                }\n                                $('button[name*=\"cancel\"]', $mContent)\n                                    .off(\"click\")\n                                    .on(\"click\", function () {\n                                        m.hide();\n                                    });\n                                log.debug(\"after-render\");\n                            }\n                        );\n                        m.on(\"formActionSuccess\",\n                            (event, response, state, xhr) => {\n                                log.debug(\"TileAddForm ActionSuccess\");\n                                var tileUrl = xhr.getResponseHeader(\"X-Tile-Url\");\n                                if (tileUrl && initial) {\n                                    mosaic.layoutManager.addAppTileHTML(\n                                        tile_type,\n                                        response,\n                                        tileUrl\n                                    );\n                                    initial = false;\n                                }\n                                m.hide();\n                            }\n                        );\n                        m.on(\"hide\", (e) => {\n                            // remove registered modal pattern events\n                            // XXX: shouldn't this be managed by pat-plone-modal?\n                            m.$el.off(\"after-render.plone-modal.patterns\");\n                            m.$el.off(\"formActionSuccess.plone-modal.patterns\");\n                        });\n                        m.show();\n                    };\n\n                    $.ajax({\n                        type: \"GET\",\n                        url: mosaic.options.context_url +\n                            \"/@@add-tile?tiletype=\" +\n                            tile_type +\n                            \"&form.button.Create=Create\",\n                        success: function (value, xhr) {\n                            utils.loading.hide();\n\n                            // Read form\n                            const $value = $(value);\n                            let action_url = $value.find(\"#add_tile\").attr(\"action\");\n                            const authenticator = $value.find('[name=\"_authenticator\"]').val();\n\n                            // Auto-submit add-form when all required fields are filled\n                            if ($(\"form .required\", $value).filter(function () {\n                                var val = $(this)\n                                    .parents(\".field\")\n                                    .first()\n                                    .find(\"input, select, textarea\")\n                                    .not('[type=\"hidden\"]')\n                                    .last()\n                                    .val();\n                                return val === null || val.length === 0;\n                            }).length > 0) {\n                                openAddFormInModal(value);\n                            } else if (action_url) {\n                                $(\"form\", $value).ajaxSubmit({\n                                    type: \"POST\",\n                                    url: action_url,\n                                    data: {\n                                        \"buttons.save\": \"Save\",\n                                        \"_authenticator\": authenticator,\n                                    },\n                                    success: function (value, state, xhr) {\n                                        var tileUrl = xhr.getResponseHeader(\"X-Tile-Url\");\n                                        if (tileUrl) {\n                                            mosaic.layoutManager.addAppTileHTML(\n                                                tile_type,\n                                                value,\n                                                tileUrl\n                                            );\n                                        } else {\n                                            openAddFormInModal(value);\n                                        }\n                                    },\n                                });\n                            }\n                        },\n                    });\n                } else {\n                    // Add tile\n                    mosaic.layoutManager.addTile(tile_type, mosaic.layoutManager.getDefaultValue(tile_config));\n                }\n\n                // reset menu\n                $(source).select2(\"val\", \"none\");\n\n                // Normal exit\n                return true;\n            },\n        });\n\n        // Handle keypress event, check for shortcuts\n        $(document).on(\"keypress\", function (e) {\n            // Action name\n            var action = \"\";\n\n            // Loop through shortcuts\n            $(mosaic.actionManager.shortcuts).each(function () {\n                // Check if shortcut matched\n                if ((e.ctrlKey === this.ctrl ||\n                    (navigator.userAgent.toLowerCase().indexOf(\"macintosh\") !== -1 &&\n                        e.metaKey === this.ctrl)) &&\n                    (e.altKey === this.alt || e.altKey === undefined) &&\n                    e.shiftKey === this.shift &&\n                    e.charCode &&\n                    String.fromCharCode(e.charCode).toUpperCase().charCodeAt(0) ===\n                    this.charCode) {\n                    // Found action\n                    action = this.action;\n                }\n            });\n\n            // Check if shortcut found\n            if (action !== \"\") {\n                // Exec actions\n                mosaic.actionManager.actions[action].exec();\n\n                // Prevent other actions\n                return false;\n            }\n\n            // Normal exit\n            return true;\n        });\n    };\n\n    blurSelectedTile() {\n        this.mosaic.document.querySelectorAll(\".mosaic-selected-tile\").forEach(el => {\n            $(el).data(\"mosaic-tile\").blur();\n        });\n    };\n\n    mosaicExecAction() {\n        // Loop through matched elements\n        return this.each(function () {\n            // Check if actions specified\n            if ($(this).data(\"action\") !== \"\") {\n                var mgr = $.mosaic.actionManager;\n\n                // Exec actions\n                mgr.actions[$(this).data(\"action\")].exec(this);\n            }\n        });\n    };\n}\n\nexport default ActionManager;\n"],"names":["log","logging","getLogger","constructor","mosaic","this","actions","shortcuts","registerAction","name","options","exec","shortcut","ctrl","alt","shift","key","visible","tile","charCode","toUpperCase","charCodeAt","action","push","execAction","source","self","error","getPrefixedClassName","indexOf","charAt","slice","async","arguments","length","value","$","document","toggleClass","i","j","group","formats","category","removeClass","parents","first","addClass","saving","blurSelectedTile","toolbar","SelectedTileChange","queue","next","layoutManager","saveLayoutToForm","trigger","setTimeout","window","open","context_url","tilecontent","text","height","children","find","html","empty","prepend","createElement","overlay","setSelectedContentLayout","hide","show","each","$mosaic_tile","data","makeMovable","$el","mosaicAddDrag","hasContentLayout","canChangeLayout","yes","confirm","selectLayout","available_layouts","saveLayout","Modal","modalSizeClass","ajaxUrl","val","select2","tile_config","tile_type","tile_group","tiles","uid","mosaic_utils","generate_uid","tileUrl","getDefaultValue","addAppTileHTML","utils","loading","openAddFormInModal","initial","m","panels","position","buttons","on","event","$mContent","$modalContent","remove","off","debug","response","state","xhr","getResponseHeader","e","type","url","success","$value","action_url","attr","authenticator","filter","not","last","ajaxSubmit","addTile","actionManager","ctrlKey","navigator","userAgent","toLowerCase","metaKey","altKey","undefined","shiftKey","String","fromCharCode","querySelectorAll","forEach","el","blur","mosaicExecAction"],"sourceRoot":""}