from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core

class hartman_watson_distribution_type(int):
    FULLY_ASYMPTOTIC:'hartman_watson_distribution_type'
    MIXTURE:'hartman_watson_distribution_type'
    NUMERICAL_INTEGRAL:'hartman_watson_distribution_type'

class gammaDistribution(object):
    def gamma(x:float) -> float: ...
    def lgamma(x:float) -> float: ...

class gaussianQuadrature(object):
    def gauss_hermite_coefficients(np:int, points:'vector_IdE', weights:'vector_IdE', use_precomputed:bool=True, tolerance:float=..., max_iter:int=20) -> None: ...
    def gauss_kronrod(n:int, x:'vector_IdE', w1:'vector_IdE', w2:'vector_IdE', tolerance:float=1.e-14, max_iter:int=20) -> None: ...
    def gauss_laguerre_coefficients(alpha:float, n:int, points:'vector_IdE', weights:'vector_IdE', tolerance:float=..., max_iter:int=20) -> None: ...
    def gauss_legendre_coefficients(n:int, points:'vector_IdE', weights:'vector_IdE', tolerance:float=1.e-14) -> None: ...

class hartmanWatsonDistribution(object):
    def cheyette_density(density:'vector_IdE', U:'vector_IdE', t:float, roots:'vector_IdE', weights:'vector_IdE', hartman_watson_roots:'vector_IdE', hartman_watson_weights:'vector_IdE') -> None: ...
    def distribution(results:'vector_IdE', t:float, x:'vector_IdE', roots:'vector_IdE', weights:'vector_IdE', type:'hartmanWatsonDistributionType'=..., max_bound:float=...) -> None: ...
    def distribution_numerical(x:float, t:float, roots:'vector_IdE', weights:'vector_IdE') -> float: ...
    def log_distribution_asymptotique(x:float, t:float) -> float: ...

class inverseGaussianDistribution(object):
    def cumulative(x:float, lambda_:float) -> float: ...
    def density(x:float, lambda_:float) -> float: ...

class laplaceInverterGaverStehfest(object): ...

class normalDistribution(object):
    def cdf_over_density(z:float) -> float: ...
    def cdfnorm(z:float) -> float: ...
    @overload
    def cdfnorminv(p:float) -> float: ...
    @overload
    def cdfnorminv(size:int, uniform:Sequence[float], gaussian:MutableSequence[float]): ...
    def cdfnorminv_fast(p:float) -> float: ...
    def density_function(x:float) -> float: ...

