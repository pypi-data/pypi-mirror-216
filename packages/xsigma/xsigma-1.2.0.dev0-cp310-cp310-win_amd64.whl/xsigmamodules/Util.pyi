from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core

class day_count_convention_type(int):
    ACT360:'day_count_convention_type'
    ACT365:'day_count_convention_type'
    ACTACT:'day_count_convention_type'
    D30360:'day_count_convention_type'

class iso(int):
    ISO8601_DATE:'iso'
    ISO8601_DATETIME:'iso'
    ISO8601_DATETIME_MILLIS:'iso'
    ISO8601_TIME:'iso'
    ISO8601_TIME_MILLIS:'iso'

class months_enum(int):
    April:'months_enum'
    August:'months_enum'
    December:'months_enum'
    February:'months_enum'
    January:'months_enum'
    July:'months_enum'
    June:'months_enum'
    March:'months_enum'
    May:'months_enum'
    November:'months_enum'
    October:'months_enum'
    September:'months_enum'

class volatility_type(int):
    LOG_NORMAL:'volatility_type'
    NORMAL:'volatility_type'
    PARAMETRIC:'volatility_type'

class week_days_enum(int):
    Friday:'week_days_enum'
    Monday:'week_days_enum'
    Saturday:'week_days_enum'
    Sunday:'week_days_enum'
    Thursday:'week_days_enum'
    Tuesday:'week_days_enum'
    Wednesday:'week_days_enum'

class bachelier(object):
    def delta(spot:float, forward:float, strike:float, expiry:float, volatility:float, numeraire:float, is_call:float) -> float: ...
    def gamma(spot:float, forward:float, strike:float, expiry:float, volatility:float, numeraire:float) -> float: ...
    def implied_volatility(forward:float, strike:float, expiry:float, price:float, numeraire:float, is_call:float) -> float: ...
    def price(forward:float, strike:float, expiry:float, volatility:float, numerair:float, is_call:float) -> float: ...
    def vega(forward:float, strike:float, expiry:float, volatility:float, numeraire:float) -> float: ...

class blackScholes(object):
    def delta(forward:float, strike:float, expiry:float, volatility:float, is_call:float) -> float: ...
    def density_function(forward:float, strike:float, expiry:float, volatility:float, dvol_dK:float, d2vol_dK2:float) -> float: ...
    def gamma(forward:float, strike:float, expiry:float, volatility:float) -> float: ...
    def implied_volatility(forward:float, strike:float, expiry:float, price:float, numeraire:float, call_or_put:float, tolerance:float=..., max_iteration:int=20) -> float: ...
    def price(forward:float, strike:float, expiry:float, volatility:float, numeraire:float, is_call:float) -> float: ...
    def probability(forward:float, strike:float, expiry:float, volatility:float, dvol_dK:float) -> float: ...
    def vega(forward:float, strike:float, expiry:float, volatility:float): ...

class calendar(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, dates:Sequence['datetime'], use_weekends:bool) -> None: ...
    @overload
    def __init__(self, __a:'calendar') -> None: ...
    def add_business_days(self, from_:'datetime', busDays:int) -> 'datetime': ...
    def is_business_day(self, date:'datetime') -> bool: ...
    def json_to_string(rhs:'calendar') -> str: ...
    def number_of_busniness_days(self, from_date:'datetime', to_date:'datetime') -> int: ...
    def read_from_binary(file_name:str) -> 'calendar': ...
    def read_from_json(file_name:str) -> 'calendar': ...
    def write_to_binary(file_name:str, rhs:'calendar') -> None: ...
    def write_to_json(file_name:str, rhs:'calendar') -> None: ...

class datetime(object):
    @overload
    def __init__(self, data:float=...) -> None: ...
    @overload
    def __init__(self, __a:'datetime') -> None: ...
    def as_float(self) -> float: ...
    def day_fraction(self) -> float: ...
    def serial(self) -> int: ...
    def to_string(self) -> str: ...

class datetimeHelper(object):
    def add_tenor(d:'datetime', t:'tenor') -> 'datetime': ...
    def from_string(str:str) -> float: ...
    def from_time(hour:int, minute:int, second:int, millis:int) -> float: ...
    def from_year_month_day(year:int, month:int, day:int) -> float: ...
    def is_string_date(str:str) -> bool: ...
    def to_isostring(data:float, format:'iso'=...) -> str: ...

class dayCountConvention(object):
    def fraction(self, start:'datetime', end:'datetime') -> float: ...
    def json_to_string(rhs:'dayCountConvention') -> str: ...
    def read_from_binary(file_name:str) -> 'dayCountConvention': ...
    def read_from_json(file_name:str) -> 'dayCountConvention': ...
    def schedule(self) -> 'calendar': ...
    def write_to_binary(file_name:str, rhs:'dayCountConvention') -> None: ...
    def write_to_json(file_name:str, rhs:'dayCountConvention') -> None: ...

class sabrAnalytics(object):
    def price(forward:float, strike:float, expiry:float, numeraire:float, is_call:float, alpha:float, beta:float, nu:float, rho:float, shift:float, is_skew_dampening:bool) -> float: ...

class surfaceTermStructure(object):
    def at(self, t1:'datetime', t2:'datetime') -> float: ...
    def json_to_string(rhs:'surfaceTermStructure') -> str: ...
    def read_from_binary(file_name:str) -> 'surfaceTermStructure': ...
    def read_from_json(file_name:str) -> 'surfaceTermStructure': ...
    def write_to_binary(file_name:str, rhs:'surfaceTermStructure') -> None: ...
    def write_to_json(file_name:str, rhs:'surfaceTermStructure') -> None: ...

class zabrAnalytics(object):
    def implied_volatility(self, outpt:MutableSequence[float], strikes:Sequence[float]) -> None: ...
    def optoin_prices(self, outpt:MutableSequence[float], strikes:Sequence[float]) -> None: ...

