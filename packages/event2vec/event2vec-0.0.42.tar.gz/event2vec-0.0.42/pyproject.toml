[tool.poetry]
name = "event2vec"
version = "0.0.42"
description = "event2vec"
authors = ["Matthieu Doutreligne <matt.dout@gmail.com>"]
license = "EUPL-v1.2"
readme = "README.md"
repository = "https://gitlab.com/strayMat/event2vec"
homepage = "https://gitlab.com/strayMat/event2vec"
include = ["bin"]
packages = [
    { include = "event2vec"},
]
keywords = []
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# [tool.poetry.urls]
# Changelog = "https://gitlab.com/strayMat/event2vec/releases"

[tool.poetry.dependencies]
python = ">=3.7.1,<3.11"

# Project-Specific
python-dotenv = "^0.15.0"
jedi = "^0.18.1"
pandas = ">=1.3.0"
pyarrow = ">=0.17.0"
numpy = ">=1.0.0"
# pyspark installation yields unsolved strange error with poetry,
# it is advised to pip install this depency after a poetry install
pyspark = { version = "2.4.3", optional = true, python = ">=3.7.1, <3.8"}
loguru = "^0.6.0"
matplotlib = "^3.5.0"
plotly = "^5.11.0"
scikit-learn = "^1.0"
fastparquet = "^0.8.1"
tabulate = "^0.9.0"
polars = "^0.18.0"

# Documentation
importlib-metadata = { version = "^4.11.3", optional = true }
pygments = { version = "^2.11.2", optional = true }
sphinx = { version = "^4.4.0", optional = true }
sphinx-autodoc-typehints = { version = "^1.17.0", optional = true }
pydata-sphinx-theme = { version = "^0.8.0", optional = true }
sphinxcontrib-apidoc = { version = "^0.3.0", optional = true }
sphinx-click = { version = "^3.1.0", optional = true }
myst-nb = {version = "^0.17.1", optional = true}


[tool.poetry.dev-dependencies]
# Testing
pytest = "^7.1.1"
pytest-cov = "^3.0.0"
pytest-mock = "^3.7.0"
pytest-sugar = "^0.9.4"
pytest-xdist = "^2.5.0"
ipdb = "^0.13.9"
jupyter = "^1.0.0"
jupytext = "^1.14.1"
xdoctest = {extras = ["all"], version = "^0.15.10"}

# Linting
## Type Checking and Data Validation
mypy = "^0.942" # Static type checker
## Code formatting
black = "^22.1.0" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
isort = "^5.10.1"
pylint = "^2.13.0"
## Automation and management
pre-commit = "^2.17.0"

[tool.poetry.extras]
docs = [
    "importlib-metadata",
    "myst-nb",
    "pygments",
    "sphinx",
    "sphinx-autodoc-typehints",
    "pydata-sphinx-theme",
    "sphinxcontrib-apidoc",
    "sphinx-click",
    "jinja2"
]
spark = [
    "spark"
]

[tool.poetry.scripts]
cli = "bin.cli:cli"

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.black]
line-length = 79

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["event2vec"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 70
show_missing = true
skip_covered = true

[tool.isort]
profile = "black"
atomic = "true"
combine_as_imports = "true"
line_length = 79

[tool.pylint.basic]
good-names-rgxs = ["^Test_.*$", "logger"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "bad-continuation",
  "c-extension-no-member",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.cruft]
skip = [
    ".git",
    "README.md",
]
[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--xdoctest"]
xfail_strict = "true"
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]
# activate logging in pytest and be less verbose
log_cli = true
log_cli_level = "ERROR"
log_cli_format = "%(message)s"
log_file = "pytest.log"
log_file_level = "INFO"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
#[build-system]
#requires = ["setuptools>=40.8.0", "wheel"]
#build-backend = "setuptools.build_meta:__legacy__"
