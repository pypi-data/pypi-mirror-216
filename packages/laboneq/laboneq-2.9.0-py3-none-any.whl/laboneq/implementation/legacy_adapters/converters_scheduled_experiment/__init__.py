# Copyright 2023 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0


from laboneq.core.types.compiled_experiment import PulseInstance as PulseInstanceDSL
from laboneq.core.types.compiled_experiment import PulseMapEntry as PulseMapEntryDSL
from laboneq.core.types.compiled_experiment import (
    PulseWaveformMap as PulseWaveformMapDSL,
)
from laboneq.core.types.enums.mixer_type import MixerType as MixerTypeDSL
from laboneq.data.scheduled_experiment import MixerType as MixerTypeDATA
from laboneq.data.scheduled_experiment import PulseInstance as PulseInstanceDATA
from laboneq.data.scheduled_experiment import PulseMapEntry as PulseMapEntryDATA
from laboneq.data.scheduled_experiment import PulseWaveformMap as PulseWaveformMapDATA
from laboneq.implementation.legacy_adapters.dynamic_converter import convert_dynamic

# converter functions for data type package 'scheduled_experiment'
#  AUTOGENERATED, DO NOT EDIT
from .post_process_scheduled_experiment import post_process


def get_converter_function_scheduled_experiment(orig):
    converter_function_directory = {
        PulseInstanceDSL: convert_PulseInstance,
        PulseMapEntryDSL: convert_PulseMapEntry,
        PulseWaveformMapDSL: convert_PulseWaveformMap,
    }
    return converter_function_directory.get(orig)


def convert_MixerType(orig: MixerTypeDSL):
    return (
        next(e for e in MixerTypeDATA if e.name == orig.name)
        if orig is not None
        else None
    )


def convert_PulseInstance(orig: PulseInstanceDSL):
    if orig is None:
        return None
    retval = PulseInstanceDATA()
    retval.amplitude = orig.amplitude
    retval.channel = orig.channel
    retval.has_marker1 = orig.has_marker1
    retval.has_marker2 = orig.has_marker2
    retval.iq_phase = orig.iq_phase
    retval.length = orig.length
    retval.modulation_frequency = orig.modulation_frequency
    retval.modulation_phase = orig.modulation_phase
    retval.needs_conjugate = orig.needs_conjugate
    retval.offset_samples = orig.offset_samples
    retval.overlaps = convert_dynamic(
        orig.overlaps,
        source_type_string="list[str]",
        target_type_string="List[str]",
        orig_is_collection=False,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
    retval.play_pulse_parameters = convert_dynamic(
        orig.play_pulse_parameters,
        source_type_string="dict[str, Any]",
        target_type_string="Dict",
        orig_is_collection=False,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
    retval.pulse_pulse_parameters = convert_dynamic(
        orig.pulse_pulse_parameters,
        source_type_string="dict[str, Any]",
        target_type_string="Dict",
        orig_is_collection=False,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
    return post_process(
        orig,
        retval,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )


def convert_PulseMapEntry(orig: PulseMapEntryDSL):
    if orig is None:
        return None
    retval = PulseMapEntryDATA()
    retval.waveforms = convert_dynamic(
        orig.waveforms,
        source_type_string="dict[str, PulseWaveformMap]",
        target_type_string="Dict[str, PulseWaveformMap]",
        orig_is_collection=False,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
    return post_process(
        orig,
        retval,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )


def convert_PulseWaveformMap(orig: PulseWaveformMapDSL):
    if orig is None:
        return None
    retval = PulseWaveformMapDATA()
    retval.instances = convert_dynamic(
        orig.instances,
        source_type_string="list[PulseInstance]",
        target_type_string="List[PulseInstance]",
        orig_is_collection=False,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
    retval.length_samples = orig.length_samples
    retval.mixer_type = convert_dynamic(
        orig.mixer_type,
        source_type_string="MixerType | None",
        target_type_string="MixerType",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
    retval.sampling_rate = orig.sampling_rate
    retval.signal_type = orig.signal_type
    return post_process(
        orig,
        retval,
        conversion_function_lookup=get_converter_function_scheduled_experiment,
    )
