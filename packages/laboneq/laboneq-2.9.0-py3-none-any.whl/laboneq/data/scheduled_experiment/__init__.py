# Copyright 2023 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0


# __init__.py of 'scheduled_experiment' package - autogenerated, do not edit
from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum, auto
from typing import Dict, List, Optional


#
# Enums
#
class MixerType(Enum):
    IQ = auto()
    UHFQA_ENVELOPE = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


#
# Data Classes
#


@dataclass
class PulseInstance:
    offset_samples: int = None
    amplitude: float = None
    length: float = None
    iq_phase: float = None
    modulation_frequency: float = None
    modulation_phase: float = None
    channel: int = None
    needs_conjugate: bool = None
    play_pulse_parameters: Optional[Dict] = None
    pulse_pulse_parameters: Optional[Dict] = None
    overlaps: List[str] = field(default_factory=list)
    has_marker1: bool = None
    has_marker2: bool = None


@dataclass
class PulseWaveformMap:
    sampling_rate: float = None
    length_samples: int = None
    signal_type: str = None
    mixer_type: Optional[MixerType] = None
    instances: List[PulseInstance] = field(default_factory=list)


@dataclass
class PulseMapEntry:
    waveforms: Dict[str, PulseWaveformMap] = field(default_factory=dict)


@dataclass
class ScheduledExperiment:
    uid: str = None
    recipe: Dict = field(default_factory=dict)
    src: List[Dict] = field(default_factory=list)
    waves: List[Dict] = field(default_factory=list)
    wave_indices: List[Dict] = field(default_factory=list)
    command_tables: List[Dict] = field(default_factory=list)
    pulse_map: Dict[str, PulseMapEntry] = field(default_factory=dict)
    compilation_job_hash: str = None
    experiment_hash: str = None
