load_file("nrngui.hoc")
objref file[2], xvec[2], yvec[2], glist, g
glist = new List()
for i=0,1 {
	xvec[i] = new Vector()
	yvec[i] = new Vector()
	file[i] = new File()
}


strdef s, sname, mname, tstr

proc showgout() {local ig, ng, il, nl, np, itg
	itg = 0
	if ($2<3) {
		print $s1, " color ", 3 - $2
	}else{
		print $s1, " color ", $2
	}
	file.ropen($s1)
	while (!file.eof) {
		ng = file.scanvar()
		print ng, " Graphs"
		for ig = 0, ng-1 {
			if ($2 == 1) {
				g = new Graph()
				glist.append(g)
			}else{
				g = glist.object(itg)
				itg += 1
			}
			nl = file.scanvar()
			print nl, " Lines"
			for il = 0, nl-1 {
				np = file.scanvar()
				if (skip4(np, file)) { continue }
				xvec.scanf(file, np)
				yvec.scanf(file, np)
				if ($2<3) {
					// 3-$2 gives red 1st, blk 2nd
					yvec.line(g, xvec, 3-$2, $3)
				} else { // other colors as they were
					yvec.line(g, xvec, $2, $3)
				}
//				if (!file.eof) { file.gets(tstr) }
			}
			if (nl > 0) {
				g.exec_menu("View = plot")
			}
		}
	}
	file.close()
}

func skip4() {local i
	if ($1 == 0) {
		for i=0, 3 {
			$o2.gets(tstr)
		}
		return 1
	}
	return 0
}

sprint(mname, "%s", gout1)	// current graphed in red 1st
showgout(mname, 1,3)
sprint(sname, "%s", gout2) // standard version black graphed 2nd (on top of current)
showgout(sname, 2,2)


proc cmpfile() {local isim, ig, ng, il, nl, np, itg, ng1, nl1, np1, x
	isim = 0
	file[0].ropen($s1)
	file[1].ropen($s2)

	while (!file.eof) {
		isim += 1
		ng = file.scanvar()
		ng1 = file[1].scanvar()
		if (ng != ng1) {
printf("sim %d has %d/%d graphs\n", isim, ng, ng1)
			return
		}
		for ig = 0, ng-1 {
			nl = file.scanvar()
			nl1 = file[1].scanvar()
			if (nl != nl1) {
printf("sim %d graph %d has %d/%d lines\n", isim, ig, nl, nl1)
				return
			}
			for il = 0, nl-1 {
				np = file.scanvar()
				np1 = file[1].scanvar()
				if (np != np1) {
printf("sim %d graph %d line %d has %d/%d points\n", isim, ig, il, np, np1)
				}
				xvec.scanf(file, np)
				yvec.scanf(file, np)
				skip4(np, file)
				xvec[1].scanf(file[1], np1)
				yvec[1].scanf(file[1], np1)
				skip4(np, file[1])
				if (!xvec.eq(xvec[1])) {
					yvec[1].interpolate(xvec, xvec[1])
				}
					x = yvec.sub(yvec[1]).abs.max
				if (x > 0) {
printf("sim %d graph %d line %d differs by %g\n", isim, ig, il, x)
				}
//				if (!file.eof) { file.gets(tstr) }
//				if (!file[1].eof) { file[1].gets(tstr) }
			}
		}
	}
	file.close()
	file[1].close()
}

cmpfile(sname, mname)
