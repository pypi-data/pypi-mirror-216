# generated by datamodel-codegen:
#   filename:  jcad.json
#   timestamp: 2023-06-29T13:06:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Parts(Enum):
    Part__Any = 'Part::Any'
    Part__Box = 'Part::Box'
    Part__Cylinder = 'Part::Cylinder'
    Part__Sphere = 'Part::Sphere'
    Part__Cone = 'Part::Cone'
    Part__Torus = 'Part::Torus'
    Part__Cut = 'Part::Cut'
    Part__MultiFuse = 'Part::MultiFuse'
    Part__MultiCommon = 'Part::MultiCommon'
    Part__Extrusion = 'Part::Extrusion'
    Sketcher__SketchObject = 'Sketcher::SketchObject'


class ShapeMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    mass: float
    centerOfMass: List[float]
    matrixOfInertia: List[List[float]]


class JcadObject(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    visible: bool
    shape: Optional[Parts] = None
    parameters: Optional[Dict[str, Any]] = None
    shapeMetadata: Optional[ShapeMetadata] = None
    operators: Optional[List[Dict[str, Any]]] = None
    dependencies: Optional[List[str]] = None


class JcadModel(BaseModel):
    __root__: List[JcadObject] = Field(..., title='IJCadModel')


class JcadOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    guidata: Optional[Dict[str, Any]] = None


class IJCadContent(BaseModel):
    class Config:
        extra = Extra.forbid

    objects: JcadModel
    options: Optional[JcadOptions] = None
    metadata: Optional[Dict[constr(regex=r'^.*$'), str]] = None
