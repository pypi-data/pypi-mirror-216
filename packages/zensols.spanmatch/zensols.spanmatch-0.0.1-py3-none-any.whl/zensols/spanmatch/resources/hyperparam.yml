document_matcher:
  doc: >-
    creates matching spans of text between two documents by first using the
    word mover algorithm and then clustering by tokens' positions in their
    respective documents
  desc: 'creates matching spans of text between two documents'
  params:
    cased:
      type: bool
      doc: whether or not to treat text as cased
      value: true
    distance_metric:
      type: choice
      choices: [descendant, ancestor, all, euclidean]
      value: euclidean
      doc: >-
        The default distance metric for calculating the distance from each
        embedded :class:`.TokenPoint`.
        :see: :function:`scipy.spatial.distance.cdist`
    bidirect_match:
      type: choice
      choices: [none, norm, sum]
      value: sum
      doc: whether to order matches by a bidirectional flow
    source_distance_threshold:
      type: float
      value: 1.3
      doc: 'the source document clustering threshold distance'
    target_distance_threshold:
      type: float
      value: 1.3
      doc: 'the target document clustering threshold distance'
    source_position_scale:
      type: float
      value: 1.8
      doc: 'used to scale the source document positional embedding component'
    target_position_scale:
      type: float
      value: 1.8
      doc: 'used to scale the target document positional embedding component'
    min_flow_value:
      type: float
      value: 0.
      doc: >-
        the minimum match flow; any matches that fall below this value are filtered
    min_source_token_span:
      type: int
      value: 1
      doc: 'the minimum source span length in tokens to be considered for matchs'
    min_target_token_span:
      type: int
      value: 1
      doc: 'the minimum target span length in tokens to be considered for matchs.'
