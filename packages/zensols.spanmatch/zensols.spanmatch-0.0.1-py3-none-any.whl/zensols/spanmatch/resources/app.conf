[cli]
apps = list: ${cli_config_default:apps}, papp, app
cleanups = list: ${cli_config_default:cleanups}, papp, app, app_decorator

#[log_cli]
#config_file = resource: resources/log.conf
#format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
#default_level = debug
#default_app_level = warn

[config_cli]
expect = False

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf

[config_import]
sections = list: app_imp_conf
references = list: default, package

[app_imp_conf]
type = import
config_files = list:
    ^{override},
    ^{config_path},
    resource(zensols.deeplearn): resources/default.conf,
    resource(zensols.deepnlp): resources/default.conf,
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/mapper.conf,
    resource(zensols.nlp): resources/decorator.conf,
    resource(zensols.deeplearn): resources/obj.conf,
    resource(zensols.deepnlp): resources/transformer-sent.conf,
    resource(zensols.deepnlp): resources/wordpiece.conf,
    resource(zensols.spanmatch): resources/obj.yml,
    ^{config_path}

[app]
class_name = zensols.spanmatch.Application
doc_parser = instance: spanmatch_doc_parser
matcher = instance: spanmatch_matcher

[app_decorator]
option_excludes = set: doc_parser, matcher
option_overrides = dict: {
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'source_file': {'long_name': 'source', 'short_name': 's'},
  'target_file': {'long_name': 'target', 'short_name': 't'}}
mnemonic_overrides = dict: {
  'write_hyperparam': 'hyper'}

[papp]
class_name = zensols.spanmatch.ProtoApplication
app = instance: app
