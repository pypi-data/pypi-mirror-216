[project]
name = "nmdb"  # Required
version = "0.1.0"
description = "Python examples to work with the Neutron Monitor database"
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE.txt"}
keywords = ["cosmic rays", "database"] 
authors = [
  {name = "Christian T. Steigies", email = "steigies@nmdb.eu" }
]
maintainers = [
  {name = "Christian T. Steigies", email = "steigies@nmdb.eu" }
]
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Scientific/Engineering :: Physics",
  # Pick your license as you wish
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [ # Optional
  "datetime",
  "mysqlclient",
  "pandas",
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
[project.optional-dependencies] # Optional
dev = ["check-manifest"]
test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]  # Optional
#"Homepage" = "https://github.com/pypa/sampleproject"
#"Bug Reports" = "https://github.com/pypa/sampleproject/issues"
#"Funding" = "https://donate.pypi.org"
#"Say Thanks!" = "http://saythanks.io/to/example"
#"Source" = "https://github.com/pypa/sampleproject/"
"Homepage" = "https://nmdb.eu"
"Source" = "https://github.com/steigies/nmdb/"

[project.scripts]
nmdb = "nmdb:main"
nmdb_nest_single = "nmdb_nest_single:main"
nmdb_nest_multi = "nmdb_nest_multi:main"
nmdb_realtime = "nmdb_realtime:main"

[tool.setuptools]
package-data = {"nmdb" = [".nmdbrc"]}

[build-system]
requires = ["setuptools>=43.0.0", "wheel"]
build-backend = "setuptools.build_meta"
