# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/mnt/Daten/Projekte/MTGProxyPrinter/mtg_proxy_printer/resources/ui/deck_import_wizard/select_deck_parser_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_WizardPage(object):
    def setupUi(self, WizardPage):
        WizardPage.setObjectName("WizardPage")
        WizardPage.resize(767, 596)
        self.gridLayout = QtWidgets.QGridLayout(WizardPage)
        self.gridLayout.setObjectName("gridLayout")
        self.select_parser_xmage = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_xmage.setObjectName("select_parser_xmage")
        self.gridLayout.addWidget(self.select_parser_xmage, 3, 1, 1, 4)
        self.tappedout_include_acquire_board = QtWidgets.QCheckBox(WizardPage)
        self.tappedout_include_acquire_board.setEnabled(False)
        self.tappedout_include_acquire_board.setObjectName("tappedout_include_acquire_board")
        self.gridLayout.addWidget(self.tappedout_include_acquire_board, 6, 3, 1, 1)
        self.select_parser_mtg_online = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_mtg_online.setObjectName("select_parser_mtg_online")
        self.gridLayout.addWidget(self.select_parser_mtg_online, 1, 1, 1, 4)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 11, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 9, 1, 1, 1)
        self.tappedout_include_maybe_board = QtWidgets.QCheckBox(WizardPage)
        self.tappedout_include_maybe_board.setEnabled(False)
        self.tappedout_include_maybe_board.setObjectName("tappedout_include_maybe_board")
        self.gridLayout.addWidget(self.tappedout_include_maybe_board, 6, 2, 1, 1)
        self.select_parser_scryfall_csv = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_scryfall_csv.setObjectName("select_parser_scryfall_csv")
        self.gridLayout.addWidget(self.select_parser_scryfall_csv, 4, 1, 1, 4)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 14, 1, 1, 4)
        self.select_parser_tappedout_csv = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_tappedout_csv.setObjectName("select_parser_tappedout_csv")
        self.gridLayout.addWidget(self.select_parser_tappedout_csv, 5, 1, 1, 4)
        self.sample_buttons_layout = QtWidgets.QGridLayout()
        self.sample_buttons_layout.setObjectName("sample_buttons_layout")
        self.insert_set_code_matcher_sample_button = QtWidgets.QPushButton(WizardPage)
        self.insert_set_code_matcher_sample_button.setEnabled(False)
        self.insert_set_code_matcher_sample_button.setObjectName("insert_set_code_matcher_sample_button")
        self.sample_buttons_layout.addWidget(self.insert_set_code_matcher_sample_button, 0, 1, 1, 1)
        self.insert_collector_number_matcher_sample_button = QtWidgets.QPushButton(WizardPage)
        self.insert_collector_number_matcher_sample_button.setEnabled(False)
        self.insert_collector_number_matcher_sample_button.setObjectName("insert_collector_number_matcher_sample_button")
        self.sample_buttons_layout.addWidget(self.insert_collector_number_matcher_sample_button, 0, 2, 1, 1)
        self.insert_copies_matcher_sample_button = QtWidgets.QPushButton(WizardPage)
        self.insert_copies_matcher_sample_button.setEnabled(False)
        self.insert_copies_matcher_sample_button.setObjectName("insert_copies_matcher_sample_button")
        self.sample_buttons_layout.addWidget(self.insert_copies_matcher_sample_button, 1, 0, 1, 1)
        self.insert_name_matcher_sample_button = QtWidgets.QPushButton(WizardPage)
        self.insert_name_matcher_sample_button.setEnabled(False)
        self.insert_name_matcher_sample_button.setObjectName("insert_name_matcher_sample_button")
        self.sample_buttons_layout.addWidget(self.insert_name_matcher_sample_button, 0, 0, 1, 1)
        self.insert_scryfall_id_matcher_sample_button = QtWidgets.QPushButton(WizardPage)
        self.insert_scryfall_id_matcher_sample_button.setEnabled(False)
        self.insert_scryfall_id_matcher_sample_button.setObjectName("insert_scryfall_id_matcher_sample_button")
        self.sample_buttons_layout.addWidget(self.insert_scryfall_id_matcher_sample_button, 1, 2, 1, 1)
        self.insert_language_matcher_sample_button = QtWidgets.QPushButton(WizardPage)
        self.insert_language_matcher_sample_button.setEnabled(False)
        self.insert_language_matcher_sample_button.setObjectName("insert_language_matcher_sample_button")
        self.sample_buttons_layout.addWidget(self.insert_language_matcher_sample_button, 1, 1, 1, 1)
        self.gridLayout.addLayout(self.sample_buttons_layout, 11, 2, 1, 3)
        self.select_parser_custom_re = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_custom_re.setObjectName("select_parser_custom_re")
        self.gridLayout.addWidget(self.select_parser_custom_re, 8, 1, 1, 4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 6, 1, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem4, 6, 4, 1, 1)
        self.select_parser_mtg_arena = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_mtg_arena.setObjectName("select_parser_mtg_arena")
        self.gridLayout.addWidget(self.select_parser_mtg_arena, 0, 1, 1, 4)
        self.custom_re_input = QtWidgets.QLineEdit(WizardPage)
        self.custom_re_input.setEnabled(False)
        self.custom_re_input.setClearButtonEnabled(True)
        self.custom_re_input.setObjectName("custom_re_input")
        self.gridLayout.addWidget(self.custom_re_input, 9, 2, 1, 3)
        self.select_parser_magic_workstation = QtWidgets.QRadioButton(WizardPage)
        self.select_parser_magic_workstation.setObjectName("select_parser_magic_workstation")
        self.gridLayout.addWidget(self.select_parser_magic_workstation, 2, 1, 1, 4)

        self.retranslateUi(WizardPage)
        self.select_parser_custom_re.toggled['bool'].connect(self.custom_re_input.setEnabled) # type: ignore
        self.select_parser_mtg_arena.clicked.connect(WizardPage.isComplete) # type: ignore
        self.select_parser_mtg_online.clicked.connect(WizardPage.isComplete) # type: ignore
        self.select_parser_scryfall_csv.clicked.connect(WizardPage.isComplete) # type: ignore
        self.select_parser_custom_re.clicked.connect(WizardPage.isComplete) # type: ignore
        self.select_parser_xmage.clicked.connect(WizardPage.isComplete) # type: ignore
        self.custom_re_input.textChanged['QString'].connect(WizardPage.isComplete) # type: ignore
        self.select_parser_tappedout_csv.clicked.connect(WizardPage.isComplete) # type: ignore
        self.select_parser_tappedout_csv.toggled['bool'].connect(self.tappedout_include_maybe_board.setEnabled) # type: ignore
        self.select_parser_tappedout_csv.toggled['bool'].connect(self.tappedout_include_acquire_board.setEnabled) # type: ignore
        self.select_parser_custom_re.toggled['bool'].connect(self.insert_name_matcher_sample_button.setEnabled) # type: ignore
        self.select_parser_custom_re.toggled['bool'].connect(self.insert_collector_number_matcher_sample_button.setEnabled) # type: ignore
        self.select_parser_custom_re.toggled['bool'].connect(self.insert_scryfall_id_matcher_sample_button.setEnabled) # type: ignore
        self.select_parser_custom_re.toggled['bool'].connect(self.insert_set_code_matcher_sample_button.setEnabled) # type: ignore
        self.select_parser_custom_re.toggled['bool'].connect(self.insert_copies_matcher_sample_button.setEnabled) # type: ignore
        self.select_parser_custom_re.toggled['bool'].connect(self.insert_language_matcher_sample_button.setEnabled) # type: ignore
        self.select_parser_magic_workstation.clicked.connect(WizardPage.isComplete) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(WizardPage)

    def retranslateUi(self, WizardPage):
        _translate = QtCore.QCoreApplication.translate
        WizardPage.setTitle(_translate("WizardPage", "Import a deck list for printing"))
        WizardPage.setSubTitle(_translate("WizardPage", "Select which kind of deck list you want to import."))
        self.select_parser_xmage.setToolTip(_translate("WizardPage", "Decklist files, stored in XMage’s native format.\n"
"Because XMage closely follows Scryfall regarding Magic sets,\n"
"this should give very accurate results."))
        self.select_parser_xmage.setText(_translate("WizardPage", "XMage"))
        self.tappedout_include_acquire_board.setToolTip(_translate("WizardPage", "This is a Tappedout-specific section of the deck.\n"
"It may contain the decklist author’s buylist or anything else."))
        self.tappedout_include_acquire_board.setText(_translate("WizardPage", "Include “Acquire-Board”"))
        self.select_parser_mtg_online.setToolTip(_translate("WizardPage", "The simplistic format used by Magic Online. It does not specify exact printings, so may not give the best results."))
        self.select_parser_mtg_online.setText(_translate("WizardPage", "Magic Online"))
        self.tappedout_include_maybe_board.setToolTip(_translate("WizardPage", "This is a Tappedout-specific section of the deck.\n"
"It may contain cards that the decklist creator considers for inclusion, based on the meta\n"
"or any other preference, like card price."))
        self.tappedout_include_maybe_board.setText(_translate("WizardPage", "Include “Maybe-Board”"))
        self.select_parser_scryfall_csv.setToolTip(_translate("WizardPage", "CSV exports from Scryfall’s own deck builder.\n"
"Gives very accurate results, unless the imported deck list contains ignored items\n"
"matching a configured download filter."))
        self.select_parser_scryfall_csv.setText(_translate("WizardPage", "Scryfall.com deck lists (CSV export)"))
        self.select_parser_tappedout_csv.setToolTip(_translate("WizardPage", "CSV exports can be downloaded from Tappedout by choosing the appropriate deck export option."))
        self.select_parser_tappedout_csv.setText(_translate("WizardPage", "tappedout.net deck list (CSV export)"))
        self.insert_set_code_matcher_sample_button.setToolTip(_translate("WizardPage", "Appends a sample matcher for a set code to the input field above."))
        self.insert_set_code_matcher_sample_button.setText(_translate("WizardPage", "Set code matcher"))
        self.insert_collector_number_matcher_sample_button.setToolTip(_translate("WizardPage", "Appends a sample matcher for a collector number to the input field above"))
        self.insert_collector_number_matcher_sample_button.setText(_translate("WizardPage", "Collector number matcher"))
        self.insert_copies_matcher_sample_button.setToolTip(_translate("WizardPage", "Appends a matcher for the number of card copies to the input field above.\n"
"If a card count field is not present in the deck list, 1 card copy per line is assumed"))
        self.insert_copies_matcher_sample_button.setText(_translate("WizardPage", "Copies matcher"))
        self.insert_name_matcher_sample_button.setToolTip(_translate("WizardPage", "Appends a matcher for a card name to the input field above."))
        self.insert_name_matcher_sample_button.setText(_translate("WizardPage", "Card name matcher"))
        self.insert_scryfall_id_matcher_sample_button.setToolTip(_translate("WizardPage", "Appends a matcher for the Scryfall ID to the input field above.\n"
"This may be used by deck lists that closely integrate with the Scryfall website.\n"
"Most deck lists won’t use this."))
        self.insert_scryfall_id_matcher_sample_button.setText(_translate("WizardPage", "Scryfall ID matcher"))
        self.insert_language_matcher_sample_button.setToolTip(_translate("WizardPage", "Appends a matcher for the  card language to the input field above.\n"
"If a language field is not present in the deck list, the card language is guessed."))
        self.insert_language_matcher_sample_button.setText(_translate("WizardPage", "Language matcher"))
        self.select_parser_custom_re.setToolTip(_translate("WizardPage", "Specify a custom regular expression in the input field below. It will be used to parse each deck list line.\n"
"You can use the buttons below to insert basic building blocks.\n"
"You have to separate them with the “control structures”, like spaces, as used in your deck list."))
        self.select_parser_custom_re.setText(_translate("WizardPage", "Custom regular expression based parser:"))
        self.select_parser_mtg_arena.setToolTip(_translate("WizardPage", "Magic Arena and exports from compatible websites, like moxfield.com\n"
"Note that this option is not limited to cards in Standard/Historic,\n"
"as the format works for any card."))
        self.select_parser_mtg_arena.setText(_translate("WizardPage", "MTG Arena"))
        self.custom_re_input.setToolTip(_translate("WizardPage", "Use this regular expression to parse the deck list file. See the context help (?-Button) for more detailes."))
        self.custom_re_input.setWhatsThis(_translate("WizardPage", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">You can enter a custom Regular Expression (in Python syntax) to parse the lines of your deck list. Use <span style=\" font-style:italic;\">named groups</span> to extract the individual card properties from the individual lines of the deck list.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A named group looks like this <span style=\" font-weight:600;\">(?P&lt;GroupName&gt;RE)</span>, where RE is a Regular Expression matching the part you want to extract.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This program recognises these group names:</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- <span style=\" font-weight:600;\">copies</span>: The number of card copies. Defaults to 1, if not present</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- <span style=\" font-weight:600;\">name</span>: The card name</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- <span style=\" font-weight:600;\">set_code</span>: The 3 (or more) letter code identifying the set.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- <span style=\" font-weight:600;\">collector_number</span>: The collector number of the card</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- <span style=\" font-weight:600;\">language</span>: The card language, using a two-letter language code. If not given, the importer tries to determine the language from the card name. Defaults to &quot;en&quot; for English, if not possible.<br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Not all groups are required for a successful match. For example, <span style=\" font-weight:600;\">set_code</span> and <span style=\" font-weight:600;\">collector_number</span> is sufficient for exact identification most of the time.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Hint: You may want to use an online Regular Expression editor, like <a href=\"https://regex101.com/\"><span style=\" text-decoration: underline; color:#2980b9;\">https://regex101.com/</span></a>, for example.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.custom_re_input.setPlaceholderText(_translate("WizardPage", "(?P<copies>\\w+) (?P<name>.+) \\((?P<set_code>\\w+)\\) (?P<collector_number>\\d+)"))
        self.select_parser_magic_workstation.setText(_translate("WizardPage", "Magic Workstation Deck Data (mwDeck)"))
