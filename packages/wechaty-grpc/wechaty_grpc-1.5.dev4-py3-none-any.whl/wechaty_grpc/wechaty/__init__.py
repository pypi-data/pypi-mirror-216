# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: wechaty/puppet.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from . import puppet


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class PuppetStub(betterproto.ServiceStub):
    async def message_file_stream(
        self,
        puppet_message_file_stream_request: "puppet.MessageFileStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["puppet.MessageFileStreamResponse"]:
        async for response in self._unary_stream(
            "/wechaty.Puppet/MessageFileStream",
            puppet_message_file_stream_request,
            puppet.MessageFileStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def message_image_stream(
        self,
        puppet_message_image_stream_request: "puppet.MessageImageStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["puppet.MessageImageStreamResponse"]:
        async for response in self._unary_stream(
            "/wechaty.Puppet/MessageImageStream",
            puppet_message_image_stream_request,
            puppet.MessageImageStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def message_send_file_stream(
        self,
        puppet_message_send_file_stream_request_iterator: Union[
            AsyncIterable["puppet.MessageSendFileStreamRequest"],
            Iterable["puppet.MessageSendFileStreamRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendFileStreamResponse":
        return await self._stream_unary(
            "/wechaty.Puppet/MessageSendFileStream",
            puppet_message_send_file_stream_request_iterator,
            puppet.MessageSendFileStreamRequest,
            puppet.MessageSendFileStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start(
        self,
        puppet_start_request: "puppet.StartRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.StartResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/Start",
            puppet_start_request,
            puppet.StartResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop(
        self,
        puppet_stop_request: "puppet.StopRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.StopResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/Stop",
            puppet_stop_request,
            puppet.StopResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def logout(
        self,
        puppet_logout_request: "puppet.LogoutRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.LogoutResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/Logout",
            puppet_logout_request,
            puppet.LogoutResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ding(
        self,
        puppet_ding_request: "puppet.DingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.DingResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/Ding",
            puppet_ding_request,
            puppet.DingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def version(
        self,
        puppet_version_request: "puppet.VersionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.VersionResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/Version",
            puppet_version_request,
            puppet.VersionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def event(
        self,
        puppet_event_request: "puppet.EventRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["puppet.EventResponse"]:
        async for response in self._unary_stream(
            "/wechaty.Puppet/Event",
            puppet_event_request,
            puppet.EventResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def dirty_payload(
        self,
        puppet_dirty_payload_request: "puppet.DirtyPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.DirtyPayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/DirtyPayload",
            puppet_dirty_payload_request,
            puppet.DirtyPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_self_qr_code(
        self,
        puppet_contact_self_qr_code_request: "puppet.ContactSelfQrCodeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactSelfQrCodeResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactSelfQRCode",
            puppet_contact_self_qr_code_request,
            puppet.ContactSelfQrCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_self_name(
        self,
        puppet_contact_self_name_request: "puppet.ContactSelfNameRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactSelfNameResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactSelfName",
            puppet_contact_self_name_request,
            puppet.ContactSelfNameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_self_signature(
        self,
        puppet_contact_self_signature_request: "puppet.ContactSelfSignatureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactSelfSignatureResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactSelfSignature",
            puppet_contact_self_signature_request,
            puppet.ContactSelfSignatureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_payload(
        self,
        puppet_contact_payload_request: "puppet.ContactPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactPayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactPayload",
            puppet_contact_payload_request,
            puppet.ContactPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_alias(
        self,
        puppet_contact_alias_request: "puppet.ContactAliasRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactAliasResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactAlias",
            puppet_contact_alias_request,
            puppet.ContactAliasResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_avatar(
        self,
        puppet_contact_avatar_request: "puppet.ContactAvatarRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactAvatarResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactAvatar",
            puppet_contact_avatar_request,
            puppet.ContactAvatarResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_phone(
        self,
        puppet_contact_phone_request: "puppet.ContactPhoneRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactPhoneResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactPhone",
            puppet_contact_phone_request,
            puppet.ContactPhoneResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_corporation_remark(
        self,
        puppet_contact_corporation_remark_request: "puppet.ContactCorporationRemarkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactCorporationRemarkResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactCorporationRemark",
            puppet_contact_corporation_remark_request,
            puppet.ContactCorporationRemarkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_description(
        self,
        puppet_contact_description_request: "puppet.ContactDescriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactDescriptionResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactDescription",
            puppet_contact_description_request,
            puppet.ContactDescriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contact_list(
        self,
        puppet_contact_list_request: "puppet.ContactListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ContactListResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ContactList",
            puppet_contact_list_request,
            puppet.ContactListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def friendship_payload(
        self,
        puppet_friendship_payload_request: "puppet.FriendshipPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.FriendshipPayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/FriendshipPayload",
            puppet_friendship_payload_request,
            puppet.FriendshipPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def friendship_search_phone(
        self,
        puppet_friendship_search_phone_request: "puppet.FriendshipSearchPhoneRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.FriendshipSearchPhoneResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/FriendshipSearchPhone",
            puppet_friendship_search_phone_request,
            puppet.FriendshipSearchPhoneResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def friendship_search_weixin(
        self,
        puppet_friendship_search_handle_request: "puppet.FriendshipSearchHandleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.FriendshipSearchHandleResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/FriendshipSearchWeixin",
            puppet_friendship_search_handle_request,
            puppet.FriendshipSearchHandleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def friendship_search_handle(
        self,
        puppet_friendship_search_handle_request: "puppet.FriendshipSearchHandleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.FriendshipSearchHandleResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/FriendshipSearchHandle",
            puppet_friendship_search_handle_request,
            puppet.FriendshipSearchHandleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def friendship_add(
        self,
        puppet_friendship_add_request: "puppet.FriendshipAddRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.FriendshipAddResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/FriendshipAdd",
            puppet_friendship_add_request,
            puppet.FriendshipAddResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def friendship_accept(
        self,
        puppet_friendship_accept_request: "puppet.FriendshipAcceptRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.FriendshipAcceptResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/FriendshipAccept",
            puppet_friendship_accept_request,
            puppet.FriendshipAcceptResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_file(
        self,
        puppet_message_file_request: "puppet.MessageFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageFileResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageFile",
            puppet_message_file_request,
            puppet.MessageFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_image(
        self,
        puppet_message_image_request: "puppet.MessageImageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageImageResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageImage",
            puppet_message_image_request,
            puppet.MessageImageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_send_file(
        self,
        puppet_message_send_file_request: "puppet.MessageSendFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendFileResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageSendFile",
            puppet_message_send_file_request,
            puppet.MessageSendFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_payload(
        self,
        puppet_message_payload_request: "puppet.MessagePayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessagePayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessagePayload",
            puppet_message_payload_request,
            puppet.MessagePayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_contact(
        self,
        puppet_message_contact_request: "puppet.MessageContactRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageContactResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageContact",
            puppet_message_contact_request,
            puppet.MessageContactResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_mini_program(
        self,
        puppet_message_mini_program_request: "puppet.MessageMiniProgramRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageMiniProgramResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageMiniProgram",
            puppet_message_mini_program_request,
            puppet.MessageMiniProgramResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_url(
        self,
        puppet_message_url_request: "puppet.MessageUrlRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageUrlResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageUrl",
            puppet_message_url_request,
            puppet.MessageUrlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_recall(
        self,
        puppet_message_recall_request: "puppet.MessageRecallRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageRecallResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageRecall",
            puppet_message_recall_request,
            puppet.MessageRecallResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_forward(
        self,
        puppet_message_forward_request: "puppet.MessageForwardRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageForwardResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageForward",
            puppet_message_forward_request,
            puppet.MessageForwardResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_location(
        self,
        puppet_message_location_request: "puppet.MessageLocationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageLocationResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageLocation",
            puppet_message_location_request,
            puppet.MessageLocationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_send_contact(
        self,
        puppet_message_send_contact_request: "puppet.MessageSendContactRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendContactResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageSendContact",
            puppet_message_send_contact_request,
            puppet.MessageSendContactResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_send_text(
        self,
        puppet_message_send_text_request: "puppet.MessageSendTextRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendTextResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageSendText",
            puppet_message_send_text_request,
            puppet.MessageSendTextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_send_mini_program(
        self,
        puppet_message_send_mini_program_request: "puppet.MessageSendMiniProgramRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendMiniProgramResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageSendMiniProgram",
            puppet_message_send_mini_program_request,
            puppet.MessageSendMiniProgramResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_send_url(
        self,
        puppet_message_send_url_request: "puppet.MessageSendUrlRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendUrlResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageSendUrl",
            puppet_message_send_url_request,
            puppet.MessageSendUrlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def message_send_location(
        self,
        puppet_message_send_location_request: "puppet.MessageSendLocationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.MessageSendLocationResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/MessageSendLocation",
            puppet_message_send_location_request,
            puppet.MessageSendLocationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def conversation_read(
        self,
        puppet_conversation_read_request: "puppet.ConversationReadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.ConversationReadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/ConversationRead",
            puppet_conversation_read_request,
            puppet.ConversationReadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_payload(
        self,
        puppet_room_payload_request: "puppet.RoomPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomPayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomPayload",
            puppet_room_payload_request,
            puppet.RoomPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_list(
        self,
        puppet_room_list_request: "puppet.RoomListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomListResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomList",
            puppet_room_list_request,
            puppet.RoomListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_add(
        self,
        puppet_room_add_request: "puppet.RoomAddRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomAddResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomAdd",
            puppet_room_add_request,
            puppet.RoomAddResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_avatar(
        self,
        puppet_room_avatar_request: "puppet.RoomAvatarRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomAvatarResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomAvatar",
            puppet_room_avatar_request,
            puppet.RoomAvatarResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_create(
        self,
        puppet_room_create_request: "puppet.RoomCreateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomCreateResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomCreate",
            puppet_room_create_request,
            puppet.RoomCreateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_del(
        self,
        puppet_room_del_request: "puppet.RoomDelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomDelResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomDel",
            puppet_room_del_request,
            puppet.RoomDelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_quit(
        self,
        puppet_room_quit_request: "puppet.RoomQuitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomQuitResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomQuit",
            puppet_room_quit_request,
            puppet.RoomQuitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_topic(
        self,
        puppet_room_topic_request: "puppet.RoomTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomTopicResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomTopic",
            puppet_room_topic_request,
            puppet.RoomTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_qr_code(
        self,
        puppet_room_qr_code_request: "puppet.RoomQrCodeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomQrCodeResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomQRCode",
            puppet_room_qr_code_request,
            puppet.RoomQrCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_announce(
        self,
        puppet_room_announce_request: "puppet.RoomAnnounceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomAnnounceResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomAnnounce",
            puppet_room_announce_request,
            puppet.RoomAnnounceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_member_payload(
        self,
        puppet_room_member_payload_request: "puppet.RoomMemberPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomMemberPayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomMemberPayload",
            puppet_room_member_payload_request,
            puppet.RoomMemberPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_member_list(
        self,
        puppet_room_member_list_request: "puppet.RoomMemberListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomMemberListResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomMemberList",
            puppet_room_member_list_request,
            puppet.RoomMemberListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_invitation_payload(
        self,
        puppet_room_invitation_payload_request: "puppet.RoomInvitationPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomInvitationPayloadResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomInvitationPayload",
            puppet_room_invitation_payload_request,
            puppet.RoomInvitationPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def room_invitation_accept(
        self,
        puppet_room_invitation_accept_request: "puppet.RoomInvitationAcceptRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.RoomInvitationAcceptResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/RoomInvitationAccept",
            puppet_room_invitation_accept_request,
            puppet.RoomInvitationAcceptResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tag_contact_add(
        self,
        puppet_tag_contact_add_request: "puppet.TagContactAddRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.TagContactAddResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/TagContactAdd",
            puppet_tag_contact_add_request,
            puppet.TagContactAddResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tag_contact_remove(
        self,
        puppet_tag_contact_remove_request: "puppet.TagContactRemoveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.TagContactRemoveResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/TagContactRemove",
            puppet_tag_contact_remove_request,
            puppet.TagContactRemoveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tag_contact_delete(
        self,
        puppet_tag_contact_delete_request: "puppet.TagContactDeleteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.TagContactDeleteResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/TagContactDelete",
            puppet_tag_contact_delete_request,
            puppet.TagContactDeleteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tag_contact_list(
        self,
        puppet_tag_contact_list_request: "puppet.TagContactListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.TagContactListResponse":
        return await self._unary_unary(
            "/wechaty.Puppet/TagContactList",
            puppet_tag_contact_list_request,
            puppet.TagContactListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def download(
        self,
        puppet_download_request: "puppet.DownloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["puppet.DownloadResponse"]:
        async for response in self._unary_stream(
            "/wechaty.Puppet/Download",
            puppet_download_request,
            puppet.DownloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def upload(
        self,
        puppet_upload_request_iterator: Union[
            AsyncIterable["puppet.UploadRequest"], Iterable["puppet.UploadRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "puppet.UploadResponse":
        return await self._stream_unary(
            "/wechaty.Puppet/Upload",
            puppet_upload_request_iterator,
            puppet.UploadRequest,
            puppet.UploadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PuppetBase(ServiceBase):
    async def message_file_stream(
        self, puppet_message_file_stream_request: "puppet.MessageFileStreamRequest"
    ) -> AsyncIterator["puppet.MessageFileStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield puppet.MessageFileStreamResponse()

    async def message_image_stream(
        self, puppet_message_image_stream_request: "puppet.MessageImageStreamRequest"
    ) -> AsyncIterator["puppet.MessageImageStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield puppet.MessageImageStreamResponse()

    async def message_send_file_stream(
        self,
        puppet_message_send_file_stream_request_iterator: AsyncIterator[
            "puppet.MessageSendFileStreamRequest"
        ],
    ) -> "puppet.MessageSendFileStreamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start(
        self, puppet_start_request: "puppet.StartRequest"
    ) -> "puppet.StartResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop(
        self, puppet_stop_request: "puppet.StopRequest"
    ) -> "puppet.StopResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def logout(
        self, puppet_logout_request: "puppet.LogoutRequest"
    ) -> "puppet.LogoutResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ding(
        self, puppet_ding_request: "puppet.DingRequest"
    ) -> "puppet.DingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def version(
        self, puppet_version_request: "puppet.VersionRequest"
    ) -> "puppet.VersionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def event(
        self, puppet_event_request: "puppet.EventRequest"
    ) -> AsyncIterator["puppet.EventResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield puppet.EventResponse()

    async def dirty_payload(
        self, puppet_dirty_payload_request: "puppet.DirtyPayloadRequest"
    ) -> "puppet.DirtyPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_self_qr_code(
        self, puppet_contact_self_qr_code_request: "puppet.ContactSelfQrCodeRequest"
    ) -> "puppet.ContactSelfQrCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_self_name(
        self, puppet_contact_self_name_request: "puppet.ContactSelfNameRequest"
    ) -> "puppet.ContactSelfNameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_self_signature(
        self,
        puppet_contact_self_signature_request: "puppet.ContactSelfSignatureRequest",
    ) -> "puppet.ContactSelfSignatureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_payload(
        self, puppet_contact_payload_request: "puppet.ContactPayloadRequest"
    ) -> "puppet.ContactPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_alias(
        self, puppet_contact_alias_request: "puppet.ContactAliasRequest"
    ) -> "puppet.ContactAliasResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_avatar(
        self, puppet_contact_avatar_request: "puppet.ContactAvatarRequest"
    ) -> "puppet.ContactAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_phone(
        self, puppet_contact_phone_request: "puppet.ContactPhoneRequest"
    ) -> "puppet.ContactPhoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_corporation_remark(
        self,
        puppet_contact_corporation_remark_request: "puppet.ContactCorporationRemarkRequest",
    ) -> "puppet.ContactCorporationRemarkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_description(
        self, puppet_contact_description_request: "puppet.ContactDescriptionRequest"
    ) -> "puppet.ContactDescriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_list(
        self, puppet_contact_list_request: "puppet.ContactListRequest"
    ) -> "puppet.ContactListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_payload(
        self, puppet_friendship_payload_request: "puppet.FriendshipPayloadRequest"
    ) -> "puppet.FriendshipPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_search_phone(
        self,
        puppet_friendship_search_phone_request: "puppet.FriendshipSearchPhoneRequest",
    ) -> "puppet.FriendshipSearchPhoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_search_weixin(
        self,
        puppet_friendship_search_handle_request: "puppet.FriendshipSearchHandleRequest",
    ) -> "puppet.FriendshipSearchHandleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_search_handle(
        self,
        puppet_friendship_search_handle_request: "puppet.FriendshipSearchHandleRequest",
    ) -> "puppet.FriendshipSearchHandleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_add(
        self, puppet_friendship_add_request: "puppet.FriendshipAddRequest"
    ) -> "puppet.FriendshipAddResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_accept(
        self, puppet_friendship_accept_request: "puppet.FriendshipAcceptRequest"
    ) -> "puppet.FriendshipAcceptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_file(
        self, puppet_message_file_request: "puppet.MessageFileRequest"
    ) -> "puppet.MessageFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_image(
        self, puppet_message_image_request: "puppet.MessageImageRequest"
    ) -> "puppet.MessageImageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_file(
        self, puppet_message_send_file_request: "puppet.MessageSendFileRequest"
    ) -> "puppet.MessageSendFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_payload(
        self, puppet_message_payload_request: "puppet.MessagePayloadRequest"
    ) -> "puppet.MessagePayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_contact(
        self, puppet_message_contact_request: "puppet.MessageContactRequest"
    ) -> "puppet.MessageContactResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_mini_program(
        self, puppet_message_mini_program_request: "puppet.MessageMiniProgramRequest"
    ) -> "puppet.MessageMiniProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_url(
        self, puppet_message_url_request: "puppet.MessageUrlRequest"
    ) -> "puppet.MessageUrlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_recall(
        self, puppet_message_recall_request: "puppet.MessageRecallRequest"
    ) -> "puppet.MessageRecallResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_forward(
        self, puppet_message_forward_request: "puppet.MessageForwardRequest"
    ) -> "puppet.MessageForwardResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_location(
        self, puppet_message_location_request: "puppet.MessageLocationRequest"
    ) -> "puppet.MessageLocationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_contact(
        self, puppet_message_send_contact_request: "puppet.MessageSendContactRequest"
    ) -> "puppet.MessageSendContactResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_text(
        self, puppet_message_send_text_request: "puppet.MessageSendTextRequest"
    ) -> "puppet.MessageSendTextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_mini_program(
        self,
        puppet_message_send_mini_program_request: "puppet.MessageSendMiniProgramRequest",
    ) -> "puppet.MessageSendMiniProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_url(
        self, puppet_message_send_url_request: "puppet.MessageSendUrlRequest"
    ) -> "puppet.MessageSendUrlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_location(
        self, puppet_message_send_location_request: "puppet.MessageSendLocationRequest"
    ) -> "puppet.MessageSendLocationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def conversation_read(
        self, puppet_conversation_read_request: "puppet.ConversationReadRequest"
    ) -> "puppet.ConversationReadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_payload(
        self, puppet_room_payload_request: "puppet.RoomPayloadRequest"
    ) -> "puppet.RoomPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_list(
        self, puppet_room_list_request: "puppet.RoomListRequest"
    ) -> "puppet.RoomListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_add(
        self, puppet_room_add_request: "puppet.RoomAddRequest"
    ) -> "puppet.RoomAddResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_avatar(
        self, puppet_room_avatar_request: "puppet.RoomAvatarRequest"
    ) -> "puppet.RoomAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_create(
        self, puppet_room_create_request: "puppet.RoomCreateRequest"
    ) -> "puppet.RoomCreateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_del(
        self, puppet_room_del_request: "puppet.RoomDelRequest"
    ) -> "puppet.RoomDelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_quit(
        self, puppet_room_quit_request: "puppet.RoomQuitRequest"
    ) -> "puppet.RoomQuitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_topic(
        self, puppet_room_topic_request: "puppet.RoomTopicRequest"
    ) -> "puppet.RoomTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_qr_code(
        self, puppet_room_qr_code_request: "puppet.RoomQrCodeRequest"
    ) -> "puppet.RoomQrCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_announce(
        self, puppet_room_announce_request: "puppet.RoomAnnounceRequest"
    ) -> "puppet.RoomAnnounceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_member_payload(
        self, puppet_room_member_payload_request: "puppet.RoomMemberPayloadRequest"
    ) -> "puppet.RoomMemberPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_member_list(
        self, puppet_room_member_list_request: "puppet.RoomMemberListRequest"
    ) -> "puppet.RoomMemberListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_invitation_payload(
        self,
        puppet_room_invitation_payload_request: "puppet.RoomInvitationPayloadRequest",
    ) -> "puppet.RoomInvitationPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_invitation_accept(
        self,
        puppet_room_invitation_accept_request: "puppet.RoomInvitationAcceptRequest",
    ) -> "puppet.RoomInvitationAcceptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_add(
        self, puppet_tag_contact_add_request: "puppet.TagContactAddRequest"
    ) -> "puppet.TagContactAddResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_remove(
        self, puppet_tag_contact_remove_request: "puppet.TagContactRemoveRequest"
    ) -> "puppet.TagContactRemoveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_delete(
        self, puppet_tag_contact_delete_request: "puppet.TagContactDeleteRequest"
    ) -> "puppet.TagContactDeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_list(
        self, puppet_tag_contact_list_request: "puppet.TagContactListRequest"
    ) -> "puppet.TagContactListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def download(
        self, puppet_download_request: "puppet.DownloadRequest"
    ) -> AsyncIterator["puppet.DownloadResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield puppet.DownloadResponse()

    async def upload(
        self, puppet_upload_request_iterator: AsyncIterator["puppet.UploadRequest"]
    ) -> "puppet.UploadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_message_file_stream(
        self,
        stream: "grpclib.server.Stream[puppet.MessageFileStreamRequest, puppet.MessageFileStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.message_file_stream,
            stream,
            request,
        )

    async def __rpc_message_image_stream(
        self,
        stream: "grpclib.server.Stream[puppet.MessageImageStreamRequest, puppet.MessageImageStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.message_image_stream,
            stream,
            request,
        )

    async def __rpc_message_send_file_stream(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendFileStreamRequest, puppet.MessageSendFileStreamResponse]",
    ) -> None:
        request = stream.__aiter__()
        response = await self.message_send_file_stream(request)
        await stream.send_message(response)

    async def __rpc_start(
        self, stream: "grpclib.server.Stream[puppet.StartRequest, puppet.StartResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.start(request)
        await stream.send_message(response)

    async def __rpc_stop(
        self, stream: "grpclib.server.Stream[puppet.StopRequest, puppet.StopResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop(request)
        await stream.send_message(response)

    async def __rpc_logout(
        self,
        stream: "grpclib.server.Stream[puppet.LogoutRequest, puppet.LogoutResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.logout(request)
        await stream.send_message(response)

    async def __rpc_ding(
        self, stream: "grpclib.server.Stream[puppet.DingRequest, puppet.DingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ding(request)
        await stream.send_message(response)

    async def __rpc_version(
        self,
        stream: "grpclib.server.Stream[puppet.VersionRequest, puppet.VersionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.version(request)
        await stream.send_message(response)

    async def __rpc_event(
        self, stream: "grpclib.server.Stream[puppet.EventRequest, puppet.EventResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.event,
            stream,
            request,
        )

    async def __rpc_dirty_payload(
        self,
        stream: "grpclib.server.Stream[puppet.DirtyPayloadRequest, puppet.DirtyPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.dirty_payload(request)
        await stream.send_message(response)

    async def __rpc_contact_self_qr_code(
        self,
        stream: "grpclib.server.Stream[puppet.ContactSelfQrCodeRequest, puppet.ContactSelfQrCodeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_self_qr_code(request)
        await stream.send_message(response)

    async def __rpc_contact_self_name(
        self,
        stream: "grpclib.server.Stream[puppet.ContactSelfNameRequest, puppet.ContactSelfNameResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_self_name(request)
        await stream.send_message(response)

    async def __rpc_contact_self_signature(
        self,
        stream: "grpclib.server.Stream[puppet.ContactSelfSignatureRequest, puppet.ContactSelfSignatureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_self_signature(request)
        await stream.send_message(response)

    async def __rpc_contact_payload(
        self,
        stream: "grpclib.server.Stream[puppet.ContactPayloadRequest, puppet.ContactPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_payload(request)
        await stream.send_message(response)

    async def __rpc_contact_alias(
        self,
        stream: "grpclib.server.Stream[puppet.ContactAliasRequest, puppet.ContactAliasResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_alias(request)
        await stream.send_message(response)

    async def __rpc_contact_avatar(
        self,
        stream: "grpclib.server.Stream[puppet.ContactAvatarRequest, puppet.ContactAvatarResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_avatar(request)
        await stream.send_message(response)

    async def __rpc_contact_phone(
        self,
        stream: "grpclib.server.Stream[puppet.ContactPhoneRequest, puppet.ContactPhoneResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_phone(request)
        await stream.send_message(response)

    async def __rpc_contact_corporation_remark(
        self,
        stream: "grpclib.server.Stream[puppet.ContactCorporationRemarkRequest, puppet.ContactCorporationRemarkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_corporation_remark(request)
        await stream.send_message(response)

    async def __rpc_contact_description(
        self,
        stream: "grpclib.server.Stream[puppet.ContactDescriptionRequest, puppet.ContactDescriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_description(request)
        await stream.send_message(response)

    async def __rpc_contact_list(
        self,
        stream: "grpclib.server.Stream[puppet.ContactListRequest, puppet.ContactListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contact_list(request)
        await stream.send_message(response)

    async def __rpc_friendship_payload(
        self,
        stream: "grpclib.server.Stream[puppet.FriendshipPayloadRequest, puppet.FriendshipPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.friendship_payload(request)
        await stream.send_message(response)

    async def __rpc_friendship_search_phone(
        self,
        stream: "grpclib.server.Stream[puppet.FriendshipSearchPhoneRequest, puppet.FriendshipSearchPhoneResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.friendship_search_phone(request)
        await stream.send_message(response)

    async def __rpc_friendship_search_weixin(
        self,
        stream: "grpclib.server.Stream[puppet.FriendshipSearchHandleRequest, puppet.FriendshipSearchHandleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.friendship_search_weixin(request)
        await stream.send_message(response)

    async def __rpc_friendship_search_handle(
        self,
        stream: "grpclib.server.Stream[puppet.FriendshipSearchHandleRequest, puppet.FriendshipSearchHandleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.friendship_search_handle(request)
        await stream.send_message(response)

    async def __rpc_friendship_add(
        self,
        stream: "grpclib.server.Stream[puppet.FriendshipAddRequest, puppet.FriendshipAddResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.friendship_add(request)
        await stream.send_message(response)

    async def __rpc_friendship_accept(
        self,
        stream: "grpclib.server.Stream[puppet.FriendshipAcceptRequest, puppet.FriendshipAcceptResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.friendship_accept(request)
        await stream.send_message(response)

    async def __rpc_message_file(
        self,
        stream: "grpclib.server.Stream[puppet.MessageFileRequest, puppet.MessageFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_file(request)
        await stream.send_message(response)

    async def __rpc_message_image(
        self,
        stream: "grpclib.server.Stream[puppet.MessageImageRequest, puppet.MessageImageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_image(request)
        await stream.send_message(response)

    async def __rpc_message_send_file(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendFileRequest, puppet.MessageSendFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_send_file(request)
        await stream.send_message(response)

    async def __rpc_message_payload(
        self,
        stream: "grpclib.server.Stream[puppet.MessagePayloadRequest, puppet.MessagePayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_payload(request)
        await stream.send_message(response)

    async def __rpc_message_contact(
        self,
        stream: "grpclib.server.Stream[puppet.MessageContactRequest, puppet.MessageContactResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_contact(request)
        await stream.send_message(response)

    async def __rpc_message_mini_program(
        self,
        stream: "grpclib.server.Stream[puppet.MessageMiniProgramRequest, puppet.MessageMiniProgramResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_mini_program(request)
        await stream.send_message(response)

    async def __rpc_message_url(
        self,
        stream: "grpclib.server.Stream[puppet.MessageUrlRequest, puppet.MessageUrlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_url(request)
        await stream.send_message(response)

    async def __rpc_message_recall(
        self,
        stream: "grpclib.server.Stream[puppet.MessageRecallRequest, puppet.MessageRecallResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_recall(request)
        await stream.send_message(response)

    async def __rpc_message_forward(
        self,
        stream: "grpclib.server.Stream[puppet.MessageForwardRequest, puppet.MessageForwardResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_forward(request)
        await stream.send_message(response)

    async def __rpc_message_location(
        self,
        stream: "grpclib.server.Stream[puppet.MessageLocationRequest, puppet.MessageLocationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_location(request)
        await stream.send_message(response)

    async def __rpc_message_send_contact(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendContactRequest, puppet.MessageSendContactResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_send_contact(request)
        await stream.send_message(response)

    async def __rpc_message_send_text(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendTextRequest, puppet.MessageSendTextResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_send_text(request)
        await stream.send_message(response)

    async def __rpc_message_send_mini_program(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendMiniProgramRequest, puppet.MessageSendMiniProgramResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_send_mini_program(request)
        await stream.send_message(response)

    async def __rpc_message_send_url(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendUrlRequest, puppet.MessageSendUrlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_send_url(request)
        await stream.send_message(response)

    async def __rpc_message_send_location(
        self,
        stream: "grpclib.server.Stream[puppet.MessageSendLocationRequest, puppet.MessageSendLocationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.message_send_location(request)
        await stream.send_message(response)

    async def __rpc_conversation_read(
        self,
        stream: "grpclib.server.Stream[puppet.ConversationReadRequest, puppet.ConversationReadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.conversation_read(request)
        await stream.send_message(response)

    async def __rpc_room_payload(
        self,
        stream: "grpclib.server.Stream[puppet.RoomPayloadRequest, puppet.RoomPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_payload(request)
        await stream.send_message(response)

    async def __rpc_room_list(
        self,
        stream: "grpclib.server.Stream[puppet.RoomListRequest, puppet.RoomListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_list(request)
        await stream.send_message(response)

    async def __rpc_room_add(
        self,
        stream: "grpclib.server.Stream[puppet.RoomAddRequest, puppet.RoomAddResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_add(request)
        await stream.send_message(response)

    async def __rpc_room_avatar(
        self,
        stream: "grpclib.server.Stream[puppet.RoomAvatarRequest, puppet.RoomAvatarResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_avatar(request)
        await stream.send_message(response)

    async def __rpc_room_create(
        self,
        stream: "grpclib.server.Stream[puppet.RoomCreateRequest, puppet.RoomCreateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_create(request)
        await stream.send_message(response)

    async def __rpc_room_del(
        self,
        stream: "grpclib.server.Stream[puppet.RoomDelRequest, puppet.RoomDelResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_del(request)
        await stream.send_message(response)

    async def __rpc_room_quit(
        self,
        stream: "grpclib.server.Stream[puppet.RoomQuitRequest, puppet.RoomQuitResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_quit(request)
        await stream.send_message(response)

    async def __rpc_room_topic(
        self,
        stream: "grpclib.server.Stream[puppet.RoomTopicRequest, puppet.RoomTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_topic(request)
        await stream.send_message(response)

    async def __rpc_room_qr_code(
        self,
        stream: "grpclib.server.Stream[puppet.RoomQrCodeRequest, puppet.RoomQrCodeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_qr_code(request)
        await stream.send_message(response)

    async def __rpc_room_announce(
        self,
        stream: "grpclib.server.Stream[puppet.RoomAnnounceRequest, puppet.RoomAnnounceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_announce(request)
        await stream.send_message(response)

    async def __rpc_room_member_payload(
        self,
        stream: "grpclib.server.Stream[puppet.RoomMemberPayloadRequest, puppet.RoomMemberPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_member_payload(request)
        await stream.send_message(response)

    async def __rpc_room_member_list(
        self,
        stream: "grpclib.server.Stream[puppet.RoomMemberListRequest, puppet.RoomMemberListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_member_list(request)
        await stream.send_message(response)

    async def __rpc_room_invitation_payload(
        self,
        stream: "grpclib.server.Stream[puppet.RoomInvitationPayloadRequest, puppet.RoomInvitationPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_invitation_payload(request)
        await stream.send_message(response)

    async def __rpc_room_invitation_accept(
        self,
        stream: "grpclib.server.Stream[puppet.RoomInvitationAcceptRequest, puppet.RoomInvitationAcceptResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.room_invitation_accept(request)
        await stream.send_message(response)

    async def __rpc_tag_contact_add(
        self,
        stream: "grpclib.server.Stream[puppet.TagContactAddRequest, puppet.TagContactAddResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.tag_contact_add(request)
        await stream.send_message(response)

    async def __rpc_tag_contact_remove(
        self,
        stream: "grpclib.server.Stream[puppet.TagContactRemoveRequest, puppet.TagContactRemoveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.tag_contact_remove(request)
        await stream.send_message(response)

    async def __rpc_tag_contact_delete(
        self,
        stream: "grpclib.server.Stream[puppet.TagContactDeleteRequest, puppet.TagContactDeleteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.tag_contact_delete(request)
        await stream.send_message(response)

    async def __rpc_tag_contact_list(
        self,
        stream: "grpclib.server.Stream[puppet.TagContactListRequest, puppet.TagContactListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.tag_contact_list(request)
        await stream.send_message(response)

    async def __rpc_download(
        self,
        stream: "grpclib.server.Stream[puppet.DownloadRequest, puppet.DownloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.download,
            stream,
            request,
        )

    async def __rpc_upload(
        self,
        stream: "grpclib.server.Stream[puppet.UploadRequest, puppet.UploadResponse]",
    ) -> None:
        request = stream.__aiter__()
        response = await self.upload(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/wechaty.Puppet/MessageFileStream": grpclib.const.Handler(
                self.__rpc_message_file_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                puppet.MessageFileStreamRequest,
                puppet.MessageFileStreamResponse,
            ),
            "/wechaty.Puppet/MessageImageStream": grpclib.const.Handler(
                self.__rpc_message_image_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                puppet.MessageImageStreamRequest,
                puppet.MessageImageStreamResponse,
            ),
            "/wechaty.Puppet/MessageSendFileStream": grpclib.const.Handler(
                self.__rpc_message_send_file_stream,
                grpclib.const.Cardinality.STREAM_UNARY,
                puppet.MessageSendFileStreamRequest,
                puppet.MessageSendFileStreamResponse,
            ),
            "/wechaty.Puppet/Start": grpclib.const.Handler(
                self.__rpc_start,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.StartRequest,
                puppet.StartResponse,
            ),
            "/wechaty.Puppet/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.StopRequest,
                puppet.StopResponse,
            ),
            "/wechaty.Puppet/Logout": grpclib.const.Handler(
                self.__rpc_logout,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.LogoutRequest,
                puppet.LogoutResponse,
            ),
            "/wechaty.Puppet/Ding": grpclib.const.Handler(
                self.__rpc_ding,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.DingRequest,
                puppet.DingResponse,
            ),
            "/wechaty.Puppet/Version": grpclib.const.Handler(
                self.__rpc_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.VersionRequest,
                puppet.VersionResponse,
            ),
            "/wechaty.Puppet/Event": grpclib.const.Handler(
                self.__rpc_event,
                grpclib.const.Cardinality.UNARY_STREAM,
                puppet.EventRequest,
                puppet.EventResponse,
            ),
            "/wechaty.Puppet/DirtyPayload": grpclib.const.Handler(
                self.__rpc_dirty_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.DirtyPayloadRequest,
                puppet.DirtyPayloadResponse,
            ),
            "/wechaty.Puppet/ContactSelfQRCode": grpclib.const.Handler(
                self.__rpc_contact_self_qr_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactSelfQrCodeRequest,
                puppet.ContactSelfQrCodeResponse,
            ),
            "/wechaty.Puppet/ContactSelfName": grpclib.const.Handler(
                self.__rpc_contact_self_name,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactSelfNameRequest,
                puppet.ContactSelfNameResponse,
            ),
            "/wechaty.Puppet/ContactSelfSignature": grpclib.const.Handler(
                self.__rpc_contact_self_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactSelfSignatureRequest,
                puppet.ContactSelfSignatureResponse,
            ),
            "/wechaty.Puppet/ContactPayload": grpclib.const.Handler(
                self.__rpc_contact_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactPayloadRequest,
                puppet.ContactPayloadResponse,
            ),
            "/wechaty.Puppet/ContactAlias": grpclib.const.Handler(
                self.__rpc_contact_alias,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactAliasRequest,
                puppet.ContactAliasResponse,
            ),
            "/wechaty.Puppet/ContactAvatar": grpclib.const.Handler(
                self.__rpc_contact_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactAvatarRequest,
                puppet.ContactAvatarResponse,
            ),
            "/wechaty.Puppet/ContactPhone": grpclib.const.Handler(
                self.__rpc_contact_phone,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactPhoneRequest,
                puppet.ContactPhoneResponse,
            ),
            "/wechaty.Puppet/ContactCorporationRemark": grpclib.const.Handler(
                self.__rpc_contact_corporation_remark,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactCorporationRemarkRequest,
                puppet.ContactCorporationRemarkResponse,
            ),
            "/wechaty.Puppet/ContactDescription": grpclib.const.Handler(
                self.__rpc_contact_description,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactDescriptionRequest,
                puppet.ContactDescriptionResponse,
            ),
            "/wechaty.Puppet/ContactList": grpclib.const.Handler(
                self.__rpc_contact_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ContactListRequest,
                puppet.ContactListResponse,
            ),
            "/wechaty.Puppet/FriendshipPayload": grpclib.const.Handler(
                self.__rpc_friendship_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.FriendshipPayloadRequest,
                puppet.FriendshipPayloadResponse,
            ),
            "/wechaty.Puppet/FriendshipSearchPhone": grpclib.const.Handler(
                self.__rpc_friendship_search_phone,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.FriendshipSearchPhoneRequest,
                puppet.FriendshipSearchPhoneResponse,
            ),
            "/wechaty.Puppet/FriendshipSearchWeixin": grpclib.const.Handler(
                self.__rpc_friendship_search_weixin,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.FriendshipSearchHandleRequest,
                puppet.FriendshipSearchHandleResponse,
            ),
            "/wechaty.Puppet/FriendshipSearchHandle": grpclib.const.Handler(
                self.__rpc_friendship_search_handle,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.FriendshipSearchHandleRequest,
                puppet.FriendshipSearchHandleResponse,
            ),
            "/wechaty.Puppet/FriendshipAdd": grpclib.const.Handler(
                self.__rpc_friendship_add,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.FriendshipAddRequest,
                puppet.FriendshipAddResponse,
            ),
            "/wechaty.Puppet/FriendshipAccept": grpclib.const.Handler(
                self.__rpc_friendship_accept,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.FriendshipAcceptRequest,
                puppet.FriendshipAcceptResponse,
            ),
            "/wechaty.Puppet/MessageFile": grpclib.const.Handler(
                self.__rpc_message_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageFileRequest,
                puppet.MessageFileResponse,
            ),
            "/wechaty.Puppet/MessageImage": grpclib.const.Handler(
                self.__rpc_message_image,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageImageRequest,
                puppet.MessageImageResponse,
            ),
            "/wechaty.Puppet/MessageSendFile": grpclib.const.Handler(
                self.__rpc_message_send_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageSendFileRequest,
                puppet.MessageSendFileResponse,
            ),
            "/wechaty.Puppet/MessagePayload": grpclib.const.Handler(
                self.__rpc_message_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessagePayloadRequest,
                puppet.MessagePayloadResponse,
            ),
            "/wechaty.Puppet/MessageContact": grpclib.const.Handler(
                self.__rpc_message_contact,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageContactRequest,
                puppet.MessageContactResponse,
            ),
            "/wechaty.Puppet/MessageMiniProgram": grpclib.const.Handler(
                self.__rpc_message_mini_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageMiniProgramRequest,
                puppet.MessageMiniProgramResponse,
            ),
            "/wechaty.Puppet/MessageUrl": grpclib.const.Handler(
                self.__rpc_message_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageUrlRequest,
                puppet.MessageUrlResponse,
            ),
            "/wechaty.Puppet/MessageRecall": grpclib.const.Handler(
                self.__rpc_message_recall,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageRecallRequest,
                puppet.MessageRecallResponse,
            ),
            "/wechaty.Puppet/MessageForward": grpclib.const.Handler(
                self.__rpc_message_forward,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageForwardRequest,
                puppet.MessageForwardResponse,
            ),
            "/wechaty.Puppet/MessageLocation": grpclib.const.Handler(
                self.__rpc_message_location,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageLocationRequest,
                puppet.MessageLocationResponse,
            ),
            "/wechaty.Puppet/MessageSendContact": grpclib.const.Handler(
                self.__rpc_message_send_contact,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageSendContactRequest,
                puppet.MessageSendContactResponse,
            ),
            "/wechaty.Puppet/MessageSendText": grpclib.const.Handler(
                self.__rpc_message_send_text,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageSendTextRequest,
                puppet.MessageSendTextResponse,
            ),
            "/wechaty.Puppet/MessageSendMiniProgram": grpclib.const.Handler(
                self.__rpc_message_send_mini_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageSendMiniProgramRequest,
                puppet.MessageSendMiniProgramResponse,
            ),
            "/wechaty.Puppet/MessageSendUrl": grpclib.const.Handler(
                self.__rpc_message_send_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageSendUrlRequest,
                puppet.MessageSendUrlResponse,
            ),
            "/wechaty.Puppet/MessageSendLocation": grpclib.const.Handler(
                self.__rpc_message_send_location,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.MessageSendLocationRequest,
                puppet.MessageSendLocationResponse,
            ),
            "/wechaty.Puppet/ConversationRead": grpclib.const.Handler(
                self.__rpc_conversation_read,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.ConversationReadRequest,
                puppet.ConversationReadResponse,
            ),
            "/wechaty.Puppet/RoomPayload": grpclib.const.Handler(
                self.__rpc_room_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomPayloadRequest,
                puppet.RoomPayloadResponse,
            ),
            "/wechaty.Puppet/RoomList": grpclib.const.Handler(
                self.__rpc_room_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomListRequest,
                puppet.RoomListResponse,
            ),
            "/wechaty.Puppet/RoomAdd": grpclib.const.Handler(
                self.__rpc_room_add,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomAddRequest,
                puppet.RoomAddResponse,
            ),
            "/wechaty.Puppet/RoomAvatar": grpclib.const.Handler(
                self.__rpc_room_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomAvatarRequest,
                puppet.RoomAvatarResponse,
            ),
            "/wechaty.Puppet/RoomCreate": grpclib.const.Handler(
                self.__rpc_room_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomCreateRequest,
                puppet.RoomCreateResponse,
            ),
            "/wechaty.Puppet/RoomDel": grpclib.const.Handler(
                self.__rpc_room_del,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomDelRequest,
                puppet.RoomDelResponse,
            ),
            "/wechaty.Puppet/RoomQuit": grpclib.const.Handler(
                self.__rpc_room_quit,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomQuitRequest,
                puppet.RoomQuitResponse,
            ),
            "/wechaty.Puppet/RoomTopic": grpclib.const.Handler(
                self.__rpc_room_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomTopicRequest,
                puppet.RoomTopicResponse,
            ),
            "/wechaty.Puppet/RoomQRCode": grpclib.const.Handler(
                self.__rpc_room_qr_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomQrCodeRequest,
                puppet.RoomQrCodeResponse,
            ),
            "/wechaty.Puppet/RoomAnnounce": grpclib.const.Handler(
                self.__rpc_room_announce,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomAnnounceRequest,
                puppet.RoomAnnounceResponse,
            ),
            "/wechaty.Puppet/RoomMemberPayload": grpclib.const.Handler(
                self.__rpc_room_member_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomMemberPayloadRequest,
                puppet.RoomMemberPayloadResponse,
            ),
            "/wechaty.Puppet/RoomMemberList": grpclib.const.Handler(
                self.__rpc_room_member_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomMemberListRequest,
                puppet.RoomMemberListResponse,
            ),
            "/wechaty.Puppet/RoomInvitationPayload": grpclib.const.Handler(
                self.__rpc_room_invitation_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomInvitationPayloadRequest,
                puppet.RoomInvitationPayloadResponse,
            ),
            "/wechaty.Puppet/RoomInvitationAccept": grpclib.const.Handler(
                self.__rpc_room_invitation_accept,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.RoomInvitationAcceptRequest,
                puppet.RoomInvitationAcceptResponse,
            ),
            "/wechaty.Puppet/TagContactAdd": grpclib.const.Handler(
                self.__rpc_tag_contact_add,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.TagContactAddRequest,
                puppet.TagContactAddResponse,
            ),
            "/wechaty.Puppet/TagContactRemove": grpclib.const.Handler(
                self.__rpc_tag_contact_remove,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.TagContactRemoveRequest,
                puppet.TagContactRemoveResponse,
            ),
            "/wechaty.Puppet/TagContactDelete": grpclib.const.Handler(
                self.__rpc_tag_contact_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.TagContactDeleteRequest,
                puppet.TagContactDeleteResponse,
            ),
            "/wechaty.Puppet/TagContactList": grpclib.const.Handler(
                self.__rpc_tag_contact_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                puppet.TagContactListRequest,
                puppet.TagContactListResponse,
            ),
            "/wechaty.Puppet/Download": grpclib.const.Handler(
                self.__rpc_download,
                grpclib.const.Cardinality.UNARY_STREAM,
                puppet.DownloadRequest,
                puppet.DownloadResponse,
            ),
            "/wechaty.Puppet/Upload": grpclib.const.Handler(
                self.__rpc_upload,
                grpclib.const.Cardinality.STREAM_UNARY,
                puppet.UploadRequest,
                puppet.UploadResponse,
            ),
        }
