# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: wechaty/deprecated/file-box.proto, wechaty/puppet/base.proto, wechaty/puppet/contact.proto, wechaty/puppet/conversation.proto, wechaty/puppet/download-upload.proto, wechaty/puppet/event.proto, wechaty/puppet/friendship.proto, wechaty/puppet/image.proto, wechaty/puppet/location.proto, wechaty/puppet/message.proto, wechaty/puppet/mini-program.proto, wechaty/puppet/referrer.proto, wechaty/puppet/room-invitation.proto, wechaty/puppet/room-member.proto, wechaty/puppet/room.proto, wechaty/puppet/tag.proto, wechaty/puppet/url-link.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from dataclasses import dataclass
from datetime import datetime
from typing import (
    List,
    Optional,
)

import betterproto


class ImageType(betterproto.Enum):
    IMAGE_TYPE_UNSPECIFIED = 0
    IMAGE_TYPE_THUMBNAIL = 1
    IMAGE_TYPE_HD = 2
    IMAGE_TYPE_ARTWORK = 3


class PayloadType(betterproto.Enum):
    PAYLOAD_TYPE_UNSPECIFIED = 0
    PAYLOAD_TYPE_MESSAGE = 1
    PAYLOAD_TYPE_CONTACT = 2
    PAYLOAD_TYPE_ROOM = 3
    PAYLOAD_TYPE_ROOM_MEMBER = 4
    PAYLOAD_TYPE_FRIENDSHIP = 5


class ContactGender(betterproto.Enum):
    CONTACT_GENDER_UNSPECIFIED = 0
    CONTACT_GENDER_MALE = 1
    CONTACT_GENDER_FEMALE = 2


class ContactType(betterproto.Enum):
    CONTACT_TYPE_UNSPECIFIED = 0
    CONTACT_TYPE_PERSONAL = 1
    CONTACT_TYPE_OFFICIAL = 2
    CONTACT_TYPE_CORPORATION = 3


class EventType(betterproto.Enum):
    EVENT_TYPE_UNSPECIFIED = 0
    EVENT_TYPE_HEARTBEAT = 1
    EVENT_TYPE_MESSAGE = 2
    EVENT_TYPE_DONG = 3
    EVENT_TYPE_POST = 4
    EVENT_TYPE_ERROR = 16
    EVENT_TYPE_FRIENDSHIP = 17
    EVENT_TYPE_ROOM_INVITE = 18
    EVENT_TYPE_ROOM_JOIN = 19
    EVENT_TYPE_ROOM_LEAVE = 20
    EVENT_TYPE_ROOM_TOPIC = 21
    EVENT_TYPE_SCAN = 22
    EVENT_TYPE_READY = 23
    EVENT_TYPE_RESET = 24
    EVENT_TYPE_LOGIN = 25
    EVENT_TYPE_LOGOUT = 26
    EVENT_TYPE_DIRTY = 27
    EVENT_TYPE_ROOM_ANNOUNCE = 32


class FriendshipType(betterproto.Enum):
    FRIENDSHIP_TYPE_UNSPECIFIED = 0
    FRIENDSHIP_TYPE_CONFIRM = 1
    FRIENDSHIP_TYPE_RECEIVE = 2
    FRIENDSHIP_TYPE_VERIFY = 3


class FriendshipSceneType(betterproto.Enum):
    FRIENDSHIP_SCENE_TYPE_UNSPECIFIED = 0
    FRIENDSHIP_SCENE_TYPE_QQ = 1
    FRIENDSHIP_SCENE_TYPE_EMAIL = 2
    FRIENDSHIP_SCENE_TYPE_WEIXIN = 3
    FRIENDSHIP_SCENE_TYPE_QQTBD = 12
    FRIENDSHIP_SCENE_TYPE_ROOM = 14
    FRIENDSHIP_SCENE_TYPE_PHONE = 15
    FRIENDSHIP_SCENE_TYPE_CARD = 17
    FRIENDSHIP_SCENE_TYPE_LOCATION = 18
    FRIENDSHIP_SCENE_TYPE_BOTTLE = 25
    FRIENDSHIP_SCENE_TYPE_SHAKING = 29
    FRIENDSHIP_SCENE_TYPE_QRCODE = 30


class MessageType(betterproto.Enum):
    MESSAGE_TYPE_UNSPECIFIED = 0
    MESSAGE_TYPE_ATTACHMENT = 1
    MESSAGE_TYPE_AUDIO = 2
    MESSAGE_TYPE_CONTACT = 3
    MESSAGE_TYPE_EMOTICON = 4
    MESSAGE_TYPE_IMAGE = 5
    MESSAGE_TYPE_TEXT = 6
    MESSAGE_TYPE_VIDEO = 7
    MESSAGE_TYPE_CHAT_HISTORY = 8
    MESSAGE_TYPE_LOCATION = 9
    MESSAGE_TYPE_MINI_PROGRAM = 10
    MESSAGE_TYPE_TRANSFER = 11
    MESSAGE_TYPE_RED_ENVELOPE = 12
    MESSAGE_TYPE_RECALLED = 13
    MESSAGE_TYPE_URL = 14
    MESSAGE_TYPE_GROUP_NOTE = 15
    MESSAGE_TYPE_POST = 16
    MESSAGE_TYPE_SYSTEM = 18


@dataclass(eq=False, repr=False)
class FileBoxChunk(betterproto.Message):
    data: Optional[bytes] = betterproto.bytes_field(1, optional=True, group="_data")
    """oneof payload {"""

    name: Optional[str] = betterproto.string_field(2, optional=True, group="_name")


@dataclass(eq=False, repr=False)
class MessageImageStreamRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: "ImageType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class MessageImageStreamResponse(betterproto.Message):
    file_box_chunk: "FileBoxChunk" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MessageFileStreamRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageFileStreamResponse(betterproto.Message):
    file_box_chunk: "FileBoxChunk" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MessageSendFileStreamRequest(betterproto.Message):
    conversation_id: Optional[str] = betterproto.string_field(
        1, optional=True, group="_conversation_id"
    )
    """oneof payload {"""

    file_box_chunk: Optional["FileBoxChunk"] = betterproto.message_field(
        2, optional=True, group="_file_box_chunk"
    )


@dataclass(eq=False, repr=False)
class MessageSendFileStreamResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageSendFileStreamResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class StartRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StartResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StopRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StopResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class VersionRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class VersionResponse(betterproto.Message):
    version: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LogoutRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LogoutResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DingRequest(betterproto.Message):
    data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DirtyPayloadRequest(betterproto.Message):
    type: "PayloadType" = betterproto.enum_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DirtyPayloadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactListResponse(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    gender: "ContactGender" = betterproto.enum_field(2)
    type: "ContactType" = betterproto.enum_field(3)
    name: str = betterproto.string_field(4)
    avatar: str = betterproto.string_field(5)
    address: str = betterproto.string_field(6)
    alias: str = betterproto.string_field(7)
    city: str = betterproto.string_field(8)
    friend: bool = betterproto.bool_field(9)
    province: str = betterproto.string_field(10)
    signature: str = betterproto.string_field(11)
    star: bool = betterproto.bool_field(12)
    weixin: str = betterproto.string_field(13)
    """
    * Huan(202203): in gRPC, we can freely rename the field name as long as the
    number keep consistent.  so we can just rename `weixin` to `handle` here.
    (Huan(20220329): use `weixin` for now, until we upgrade to v2.0  the
    `wechaty-grpc@1.0.0` will use the latest v1.x automatically when running
    `npm install`    which will causing a breaking change.  @link
    https://github.com/wechaty/getting-started/issues/254 TODO: rename `weixin`
    to `handle` in v2.0.0
    """

    corporation: str = betterproto.string_field(14)
    title: str = betterproto.string_field(15)
    description: str = betterproto.string_field(16)
    coworker: bool = betterproto.bool_field(17)
    phones: List[str] = betterproto.string_field(18)


@dataclass(eq=False, repr=False)
class ContactSelfQrCodeRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactSelfQrCodeResponse(betterproto.Message):
    qrcode: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactSelfNameRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactSelfNameResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactSelfSignatureRequest(betterproto.Message):
    signature: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactSelfSignatureResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactAliasRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    alias_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    """nullable"""

    alias: Optional[str] = betterproto.string_field(3, optional=True, group="_alias")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("alias_string_value_deprecated"):
            warnings.warn(
                "ContactAliasRequest.alias_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactAliasResponse(betterproto.Message):
    alias_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    alias: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("alias_string_value_deprecated"):
            warnings.warn(
                "ContactAliasResponse.alias_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactAvatarRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    filebox_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    file_box: Optional[str] = betterproto.string_field(
        3, optional=True, group="_file_box"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("filebox_string_value_deprecated"):
            warnings.warn(
                "ContactAvatarRequest.filebox_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactAvatarResponse(betterproto.Message):
    filebox_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    file_box: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("filebox_string_value_deprecated"):
            warnings.warn(
                "ContactAvatarResponse.filebox_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactPhoneRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    phones: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContactPhoneResponse(betterproto.Message):
    phones: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContactCorporationRemarkRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    corporation_remark_string_value_deprecated: Optional[
        str
    ] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    corporation_remark: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("corporation_remark_string_value_deprecated"):
            warnings.warn(
                "ContactCorporationRemarkRequest.corporation_remark_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactCorporationRemarkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactDescriptionRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    description_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    description: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("description_string_value_deprecated"):
            warnings.warn(
                "ContactDescriptionRequest.description_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactDescriptionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UploadRequest(betterproto.Message):
    chunk: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class UploadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DownloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DownloadResponse(betterproto.Message):
    chunk: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class EventRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EventResponse(betterproto.Message):
    type: "EventType" = betterproto.enum_field(1)
    payload: str = betterproto.string_field(2)
    """TODO: Huan(202002) consider to use a PB Map?"""


@dataclass(eq=False, repr=False)
class Referrer(betterproto.Message):
    """
    * "Referrer" and "Referral" refers to different things. "Referrer" is
    something or somebody who refers. "Referral" is the act of referring.  -
    https://english.stackexchange.com/questions/33135/referrer-versus-referral-
    versus-referer
    """

    contact_id: str = betterproto.string_field(1)
    room_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FriendshipPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    payload_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    """
    * Huan(202003):  What's the reason we need belowing payload?  We should
    remove it if possible.
    """

    payload: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("payload_string_value_deprecated"):
            warnings.warn(
                "FriendshipPayloadRequest.payload_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)
    hello: str = betterproto.string_field(3)
    type: "FriendshipType" = betterproto.enum_field(4)
    stranger: str = betterproto.string_field(5)
    ticket: str = betterproto.string_field(6)
    scene: "FriendshipSceneType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class FriendshipSearchPhoneRequest(betterproto.Message):
    phone: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FriendshipSearchPhoneResponse(betterproto.Message):
    contact_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """nullable"""

    contact_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("contact_id_string_value_deprecated"):
            warnings.warn(
                "FriendshipSearchPhoneResponse.contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipSearchHandleRequest(betterproto.Message):
    """
    * Huan(202003): we just rename the payload message because gRPC only care
    about the message structure  (and as long as we keep consistent with the
    old structure).  @link https://github.com/wechaty/grpc/pull/173 Rename:  1.
    `FriendshipSearchWeixinRequest`    -> `FriendshipSearchHandleRequest`  2.
    `FriendshipSearchWeixinReqsponse`  -> `FriendshipSearchHandleResponse`
    """

    weixin: str = betterproto.string_field(1)
    """
    * Huan(202203): in gRPC, we can freely rename the field name as long as the
    number keep consistent.  so we can just rename `weixin` to `handle` here.
    (Huan(20220329): use `weixin` for now, until we upgrade to v2.0  the
    `wechaty-grpc@1.0.0` will use the latest v1.x automatically when running
    `npm install`    which will causing a breaking change.  @link
    https://github.com/wechaty/getting-started/issues/254 TODO: rename `weixin`
    to `handle` in v2.0.0
    """


@dataclass(eq=False, repr=False)
class FriendshipSearchHandleResponse(betterproto.Message):
    contact_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """nullable"""

    contact_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("contact_id_string_value_deprecated"):
            warnings.warn(
                "FriendshipSearchHandleResponse.contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipAddRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    hello: str = betterproto.string_field(2)
    source_room_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        3, wraps=betterproto.TYPE_STRING
    )
    source_contact_id_string_value_deprecated: Optional[
        str
    ] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)
    referrer: "Referrer" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("source_room_id_string_value_deprecated"):
            warnings.warn(
                "FriendshipAddRequest.source_room_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )
        if self.is_set("source_contact_id_string_value_deprecated"):
            warnings.warn(
                "FriendshipAddRequest.source_contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipAddResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FriendshipAcceptRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FriendshipAcceptResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LocationPayload(betterproto.Message):
    accuracy: float = betterproto.float_field(1)
    address: str = betterproto.string_field(2)
    latitude: float = betterproto.double_field(3)
    longitude: float = betterproto.double_field(4)
    name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MiniProgramPayload(betterproto.Message):
    appid: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    page_path: str = betterproto.string_field(3)
    icon_url: str = betterproto.string_field(4)
    share_id: str = betterproto.string_field(5)
    thumb_url: str = betterproto.string_field(6)
    title: str = betterproto.string_field(7)
    username: str = betterproto.string_field(8)
    thumb_key: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class UrlLinkPayload(betterproto.Message):
    description: str = betterproto.string_field(1)
    thumbnail_url: str = betterproto.string_field(2)
    title: str = betterproto.string_field(3)
    url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MessagePayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessagePayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    filename: str = betterproto.string_field(2)
    text: str = betterproto.string_field(3)
    timestamp_deprecated: int = betterproto.uint64_field(4)
    """
    * @deprecated will be removed after Dec 31, 2022  Huan(202109): use
    receive_time(10) instead
    """

    type: "MessageType" = betterproto.enum_field(5)
    talker_id: str = betterproto.string_field(6)
    room_id: str = betterproto.string_field(7)
    listener_id: str = betterproto.string_field(8)
    mention_ids: List[str] = betterproto.string_field(9)
    receive_time: datetime = betterproto.message_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("timestamp_deprecated"):
            warnings.warn(
                "MessagePayloadResponse.timestamp_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageImageRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: "ImageType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class MessageImageResponse(betterproto.Message):
    file_box: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageContactRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageContactResponse(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageFileRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageFileResponse(betterproto.Message):
    file_box: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageMiniProgramRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageMiniProgramResponse(betterproto.Message):
    mini_program_deprecated: str = betterproto.string_field(1)
    """
    * Huan(202110): We should use payload instead of JSON.stringify string  The
    compatible code will be removed after Dec 31, 2022
    """

    mini_program: "MiniProgramPayload" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("mini_program_deprecated"):
            warnings.warn(
                "MessageMiniProgramResponse.mini_program_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageUrlRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageUrlResponse(betterproto.Message):
    url_link_deprecated: str = betterproto.string_field(1)
    """
    * Huan(202110): We should use payload instead of JSON.stringify string  The
    compatible code will be removed after Dec 31, 2022
    """

    url_link: "UrlLinkPayload" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("url_link_deprecated"):
            warnings.warn(
                "MessageUrlResponse.url_link_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendContactRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageSendContactResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageSendContactResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendFileRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    file_box: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageSendFileResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageSendFileResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendTextRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    text: str = betterproto.string_field(2)
    mentional_ids: List[str] = betterproto.string_field(3)
    """
    Huan(202011) FIXME: Issue #99 https://github.com/wechaty/grpc/issues/99
    """


@dataclass(eq=False, repr=False)
class MessageSendTextResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageSendTextResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendMiniProgramRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    mini_program_deprecated: str = betterproto.string_field(2)
    """
    * Huan(202110): We should use payload instead of JSON.stringify string  The
    compatible code will be removed after Dec 31, 2022
    """

    mini_program: "MiniProgramPayload" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("mini_program_deprecated"):
            warnings.warn(
                "MessageSendMiniProgramRequest.mini_program_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendMiniProgramResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageSendMiniProgramResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendUrlRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    url_link_deprecated: str = betterproto.string_field(2)
    """
    * Huan(202110): We should use payload instead of JSON.stringify string  The
    compatible code will be removed after Dec 31, 2022
    """

    url_link: "UrlLinkPayload" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("url_link_deprecated"):
            warnings.warn(
                "MessageSendUrlRequest.url_link_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendUrlResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageSendUrlResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageRecallRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageRecallResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MessageForwardRequest(betterproto.Message):
    message_id: str = betterproto.string_field(1)
    conversation_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageForwardResponse(betterproto.Message):
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    * @deprecated: use payload instead.  Huan(202109): Wrapper types must not
    be used going forward.    https://cloud.google.com/apis/design/design_patte
    rns#optional_primitive_fields
    """

    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id_string_value_deprecated"):
            warnings.warn(
                "MessageForwardResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageLocationRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageLocationResponse(betterproto.Message):
    location: "LocationPayload" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MessageSendLocationRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    location: "LocationPayload" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MessageSendLocationResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    * Huan(202110): we will not use wrappers any more by following the Google
    Style Guide:  If not using optional would add complexity or ambiguity, then
    use optional primitive fields,  Wrapper types must not be used going
    forward.  — Optional Primitive Fields
    (https://cloud.google.com/apis/design/design_patterns.md#optional-
    primitive-fields)
    """


@dataclass(eq=False, repr=False)
class RoomInvitationPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    payload_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    """
    * Huan(202002): `payload` should be removed.  The puppet server should take
    the responsibilities  for storing the unaccepted friend-request payload.
    @deprecated: use payload instead.  Huan(202109): Wrapper types must not be
    used going forward.    https://cloud.google.com/apis/design/design_patterns
    #optional_primitive_fields
    """

    payload: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("payload_string_value_deprecated"):
            warnings.warn(
                "RoomInvitationPayloadRequest.payload_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomInvitationPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    inviter_id: str = betterproto.string_field(2)
    topic: str = betterproto.string_field(3)
    member_count: int = betterproto.int32_field(4)
    member_ids: List[str] = betterproto.string_field(5)
    timestamp_uint64_deprecated: int = betterproto.uint64_field(6)
    """
    * @deprecated will be removed after Dec 31, 2022  Huan(202109): use
    receive_time(10) instead
    """

    avatar: str = betterproto.string_field(7)
    invitation: str = betterproto.string_field(8)
    receiver_id: str = betterproto.string_field(9)
    receive_time: datetime = betterproto.message_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("timestamp_uint64_deprecated"):
            warnings.warn(
                "RoomInvitationPayloadResponse.timestamp_uint64_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomInvitationAcceptRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomInvitationAcceptResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomMemberPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    member_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RoomMemberPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    room_alias: str = betterproto.string_field(2)
    inviter_id: str = betterproto.string_field(3)
    avatar: str = betterproto.string_field(4)
    name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class RoomMemberListRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomMemberListResponse(betterproto.Message):
    member_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomListResponse(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    topic: str = betterproto.string_field(2)
    avatar: str = betterproto.string_field(3)
    owner_id: str = betterproto.string_field(4)
    admin_ids: List[str] = betterproto.string_field(5)
    member_ids: List[str] = betterproto.string_field(6)
    handle: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class RoomAddRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)
    invite_only: bool = betterproto.bool_field(3)
    contact_ids: List[str] = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("contact_id"):
            warnings.warn("RoomAddRequest.contact_id is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class RoomAddResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomAvatarRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomAvatarResponse(betterproto.Message):
    file_box: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomCreateRequest(betterproto.Message):
    contact_ids: List[str] = betterproto.string_field(1)
    topic: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RoomCreateResponse(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomDelRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)
    contact_ids: List[str] = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("contact_id"):
            warnings.warn("RoomDelRequest.contact_id is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class RoomDelResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomQuitRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomQuitResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomTopicRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    topic_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    topic: Optional[str] = betterproto.string_field(3, optional=True, group="_topic")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("topic_string_value_deprecated"):
            warnings.warn(
                "RoomTopicRequest.topic_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomTopicResponse(betterproto.Message):
    topic_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    topic: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("topic_string_value_deprecated"):
            warnings.warn(
                "RoomTopicResponse.topic_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomQrCodeRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomQrCodeResponse(betterproto.Message):
    qrcode: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomAnnounceRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    text_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    text: Optional[str] = betterproto.string_field(3, optional=True, group="_text")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("text_string_value_deprecated"):
            warnings.warn(
                "RoomAnnounceRequest.text_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomAnnounceResponse(betterproto.Message):
    text_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    text: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("text_string_value_deprecated"):
            warnings.warn(
                "RoomAnnounceResponse.text_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class TagContactAddRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TagContactAddResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TagContactRemoveRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TagContactRemoveResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TagContactDeleteRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TagContactDeleteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TagContactListRequest(betterproto.Message):
    contact_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """
    @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    lds
    """

    contact_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("contact_id_string_value_deprecated"):
            warnings.warn(
                "TagContactListRequest.contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class TagContactListResponse(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ConversationReadRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    has_read: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ConversationReadResponse(betterproto.Message):
    has_read: bool = betterproto.bool_field(1)
