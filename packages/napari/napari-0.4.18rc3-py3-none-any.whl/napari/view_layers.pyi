# THIS FILE IS AUTOGENERATED BY napari.utils.stubgen
# DO NOT EDIT

import pathlib
from typing import List, Optional, Sequence, Tuple, Union

import napari.layers.image.image
import napari.viewer

def view_image(
    data=None,
    *,
    channel_axis=None,
    rgb=None,
    colormap=None,
    contrast_limits=None,
    gamma=1,
    interpolation2d='nearest',
    interpolation3d='linear',
    rendering='mip',
    depiction='volume',
    iso_threshold=None,
    attenuation=0.05,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=1,
    blending=None,
    visible=True,
    multiscale=None,
    cache=True,
    plane=None,
    experimental_clipping_planes=None,
    custom_interpolation_kernel_2d=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def view_labels(
    data,
    *,
    num_colors=50,
    features=None,
    properties=None,
    color=None,
    seed=0.5,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=0.7,
    blending='translucent',
    rendering='iso_categorical',
    depiction='volume',
    visible=True,
    multiscale=None,
    cache=True,
    plane=None,
    experimental_clipping_planes=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def view_path(
    path: Union[str, pathlib.Path, Sequence[Union[str, pathlib.Path]]],
    *,
    stack: Union[bool, List[List[str]]] = False,
    plugin: Optional[str] = 'napari',
    layer_type: Optional[Optional[str]] = None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
    **kwargs,
) -> napari.viewer.Viewer: ...
def view_points(
    data=None,
    *,
    ndim=None,
    features=None,
    feature_defaults=None,
    properties=None,
    text=None,
    symbol='o',
    size=10,
    edge_width=0.05,
    edge_width_is_relative=True,
    edge_color='dimgray',
    edge_color_cycle=None,
    edge_colormap='viridis',
    edge_contrast_limits=None,
    face_color='white',
    face_color_cycle=None,
    face_colormap='viridis',
    face_contrast_limits=None,
    out_of_slice_display=False,
    n_dimensional=None,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=1,
    blending='translucent',
    visible=True,
    cache=True,
    property_choices=None,
    experimental_clipping_planes=None,
    shading='none',
    canvas_size_limits=(2, 10000),
    antialiasing=1,
    shown=True,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def view_shapes(
    data=None,
    *,
    ndim=None,
    features=None,
    feature_defaults=None,
    properties=None,
    property_choices=None,
    text=None,
    shape_type='rectangle',
    edge_width=1,
    edge_color='#777777',
    edge_color_cycle=None,
    edge_colormap='viridis',
    edge_contrast_limits=None,
    face_color='white',
    face_color_cycle=None,
    face_colormap='viridis',
    face_contrast_limits=None,
    z_index=0,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=0.7,
    blending='translucent',
    visible=True,
    cache=True,
    experimental_clipping_planes=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def view_surface(
    data,
    *,
    colormap='gray',
    contrast_limits=None,
    gamma=1,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=1,
    blending='translucent',
    shading='flat',
    visible=True,
    cache=True,
    experimental_clipping_planes=None,
    wireframe=None,
    normals=None,
    texture=None,
    texcoords=None,
    vertex_colors=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def view_tracks(
    data,
    *,
    features=None,
    properties=None,
    graph=None,
    tail_width=2,
    tail_length=30,
    head_length=0,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=1,
    blending='additive',
    visible=True,
    colormap='turbo',
    color_by='track_id',
    colormaps_dict=None,
    cache=True,
    experimental_clipping_planes=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def view_vectors(
    data=None,
    *,
    ndim=None,
    features=None,
    feature_defaults=None,
    properties=None,
    property_choices=None,
    edge_width=1,
    edge_color='red',
    edge_color_cycle=None,
    edge_colormap='viridis',
    edge_contrast_limits=None,
    out_of_slice_display=False,
    length=1,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=0.7,
    blending='translucent',
    visible=True,
    cache=True,
    experimental_clipping_planes=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> napari.viewer.Viewer: ...
def imshow(
    data,
    *,
    channel_axis=None,
    rgb=None,
    colormap=None,
    contrast_limits=None,
    gamma=1,
    interpolation2d='nearest',
    interpolation3d='linear',
    rendering='mip',
    depiction='volume',
    iso_threshold=None,
    attenuation=0.05,
    name=None,
    metadata=None,
    scale=None,
    translate=None,
    rotate=None,
    shear=None,
    affine=None,
    opacity=1,
    blending=None,
    visible=True,
    multiscale=None,
    cache=True,
    plane=None,
    experimental_clipping_planes=None,
    custom_interpolation_kernel_2d=None,
    viewer=None,
    title='napari',
    ndisplay=2,
    order=(),
    axis_labels=(),
    show=True,
) -> Tuple[napari.viewer.Viewer, List[napari.layers.image.image.Image]]: ...
