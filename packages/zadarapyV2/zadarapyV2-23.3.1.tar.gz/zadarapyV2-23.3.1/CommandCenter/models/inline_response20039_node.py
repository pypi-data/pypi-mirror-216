# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.03.1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20039Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'absent': 'bool',
        'information': 'InlineResponse20039NodeInformation',
        'nic_information': 'list[InlineResponse20039NodeNicInformation]',
        'services': 'list[InlineResponse20039NodeServices]',
        'resources': 'InlineResponse20039NodeResources',
        'drives': 'list[InlineResponse20039NodeDrives]',
        'fault_domain': 'str',
        'master': 'bool',
        'slave': 'bool',
        'license': 'InlineResponse20039NodeLicense'
    }

    attribute_map = {
        'name': 'name',
        'absent': 'absent',
        'information': 'information',
        'nic_information': 'nic_information',
        'services': 'services',
        'resources': 'resources',
        'drives': 'drives',
        'fault_domain': 'fault_domain',
        'master': 'master',
        'slave': 'slave',
        'license': 'license'
    }

    def __init__(self, name=None, absent=None, information=None, nic_information=None, services=None, resources=None, drives=None, fault_domain=None, master=None, slave=None, license=None, _configuration=None):  # noqa: E501
        """InlineResponse20039Node - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._absent = None
        self._information = None
        self._nic_information = None
        self._services = None
        self._resources = None
        self._drives = None
        self._fault_domain = None
        self._master = None
        self._slave = None
        self._license = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if absent is not None:
            self.absent = absent
        if information is not None:
            self.information = information
        if nic_information is not None:
            self.nic_information = nic_information
        if services is not None:
            self.services = services
        if resources is not None:
            self.resources = resources
        if drives is not None:
            self.drives = drives
        if fault_domain is not None:
            self.fault_domain = fault_domain
        if master is not None:
            self.master = master
        if slave is not None:
            self.slave = slave
        if license is not None:
            self.license = license

    @property
    def name(self):
        """Gets the name of this InlineResponse20039Node.  # noqa: E501


        :return: The name of this InlineResponse20039Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20039Node.


        :param name: The name of this InlineResponse20039Node.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def absent(self):
        """Gets the absent of this InlineResponse20039Node.  # noqa: E501


        :return: The absent of this InlineResponse20039Node.  # noqa: E501
        :rtype: bool
        """
        return self._absent

    @absent.setter
    def absent(self, absent):
        """Sets the absent of this InlineResponse20039Node.


        :param absent: The absent of this InlineResponse20039Node.  # noqa: E501
        :type: bool
        """

        self._absent = absent

    @property
    def information(self):
        """Gets the information of this InlineResponse20039Node.  # noqa: E501


        :return: The information of this InlineResponse20039Node.  # noqa: E501
        :rtype: InlineResponse20039NodeInformation
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this InlineResponse20039Node.


        :param information: The information of this InlineResponse20039Node.  # noqa: E501
        :type: InlineResponse20039NodeInformation
        """

        self._information = information

    @property
    def nic_information(self):
        """Gets the nic_information of this InlineResponse20039Node.  # noqa: E501


        :return: The nic_information of this InlineResponse20039Node.  # noqa: E501
        :rtype: list[InlineResponse20039NodeNicInformation]
        """
        return self._nic_information

    @nic_information.setter
    def nic_information(self, nic_information):
        """Sets the nic_information of this InlineResponse20039Node.


        :param nic_information: The nic_information of this InlineResponse20039Node.  # noqa: E501
        :type: list[InlineResponse20039NodeNicInformation]
        """

        self._nic_information = nic_information

    @property
    def services(self):
        """Gets the services of this InlineResponse20039Node.  # noqa: E501


        :return: The services of this InlineResponse20039Node.  # noqa: E501
        :rtype: list[InlineResponse20039NodeServices]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this InlineResponse20039Node.


        :param services: The services of this InlineResponse20039Node.  # noqa: E501
        :type: list[InlineResponse20039NodeServices]
        """

        self._services = services

    @property
    def resources(self):
        """Gets the resources of this InlineResponse20039Node.  # noqa: E501


        :return: The resources of this InlineResponse20039Node.  # noqa: E501
        :rtype: InlineResponse20039NodeResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this InlineResponse20039Node.


        :param resources: The resources of this InlineResponse20039Node.  # noqa: E501
        :type: InlineResponse20039NodeResources
        """

        self._resources = resources

    @property
    def drives(self):
        """Gets the drives of this InlineResponse20039Node.  # noqa: E501


        :return: The drives of this InlineResponse20039Node.  # noqa: E501
        :rtype: list[InlineResponse20039NodeDrives]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this InlineResponse20039Node.


        :param drives: The drives of this InlineResponse20039Node.  # noqa: E501
        :type: list[InlineResponse20039NodeDrives]
        """

        self._drives = drives

    @property
    def fault_domain(self):
        """Gets the fault_domain of this InlineResponse20039Node.  # noqa: E501


        :return: The fault_domain of this InlineResponse20039Node.  # noqa: E501
        :rtype: str
        """
        return self._fault_domain

    @fault_domain.setter
    def fault_domain(self, fault_domain):
        """Sets the fault_domain of this InlineResponse20039Node.


        :param fault_domain: The fault_domain of this InlineResponse20039Node.  # noqa: E501
        :type: str
        """

        self._fault_domain = fault_domain

    @property
    def master(self):
        """Gets the master of this InlineResponse20039Node.  # noqa: E501


        :return: The master of this InlineResponse20039Node.  # noqa: E501
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this InlineResponse20039Node.


        :param master: The master of this InlineResponse20039Node.  # noqa: E501
        :type: bool
        """

        self._master = master

    @property
    def slave(self):
        """Gets the slave of this InlineResponse20039Node.  # noqa: E501


        :return: The slave of this InlineResponse20039Node.  # noqa: E501
        :rtype: bool
        """
        return self._slave

    @slave.setter
    def slave(self, slave):
        """Sets the slave of this InlineResponse20039Node.


        :param slave: The slave of this InlineResponse20039Node.  # noqa: E501
        :type: bool
        """

        self._slave = slave

    @property
    def license(self):
        """Gets the license of this InlineResponse20039Node.  # noqa: E501


        :return: The license of this InlineResponse20039Node.  # noqa: E501
        :rtype: InlineResponse20039NodeLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this InlineResponse20039Node.


        :param license: The license of this InlineResponse20039Node.  # noqa: E501
        :type: InlineResponse20039NodeLicense
        """

        self._license = license

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20039Node):
            return True

        return self.to_dict() != other.to_dict()
