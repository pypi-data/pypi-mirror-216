# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/abc/dfdm/01_base.ipynb.

# %% auto 0
__all__ = ['BaseDataFrameDataModule', 'set_dataset']

# %% ../../../nbs/abc/dfdm/01_base.ipynb 3
from dataclasses import dataclass, field
from beartype.typing import (Any, Optional,  Type)


import pytorch_lightning as pl
import numpy as np, pandas as pd

from iza.utils import (filter_kwargs_for_class)

# %% ../../../nbs/abc/dfdm/01_base.ipynb 4
from ...types import BoolLike

# %% ../../../nbs/abc/dfdm/01_base.ipynb 6
from .meta import MetaDataFrameDataModule
from ..dfds.mixs import DataFrameArgsMixin, DataFrameKWArgsMixins
from ..dfds.base import BaseDataFrameDataset

# %% ../../../nbs/abc/dfdm/01_base.ipynb 7
@dataclass
class BaseDataFrameDataModule(
    pl.LightningDataModule, DataFrameArgsMixin, DataFrameKWArgsMixins, 
    metaclass=MetaDataFrameDataModule
): 
    
    DatasetClass: Type[BaseDataFrameDataset] = field(init=False, repr=False, default=BaseDataFrameDataset)
        
    def __post_init__(self):        
        super().__post_init__()        
        pass

    def prepare_data(self):
        pass
        return self
    
    def setup(self, stage: Optional[str]=None):
        pass
        return self
    
    def make_dataset(self, **kwargs):
        params = self.__kwargs__()
        params.update(kwargs)
        params = filter_kwargs_for_class(self.DatasetClass, **params)    
        return self.DatasetClass(**params)

# %% ../../../nbs/abc/dfdm/01_base.ipynb 8
def set_dataset(DatasetClass: Any = BaseDataFrameDataset):
    def inner(cls):        
        cls.DatasetClass = DatasetClass
        return cls
    return inner
