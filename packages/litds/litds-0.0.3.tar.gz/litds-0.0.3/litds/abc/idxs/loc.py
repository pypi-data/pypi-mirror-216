# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/abc/idxs/03_loc.ipynb.

# %% auto 0
__all__ = ['logger', 'DataFrameDatasetLocIndexer']

# %% ../../../nbs/abc/idxs/03_loc.ipynb 3
from dataclasses import dataclass, field
from beartype.typing import (Union, List)

import numpy as np

from iza.nbs import NotebookLogger

# %% ../../../nbs/abc/idxs/03_loc.ipynb 4
from .base import BaseDataFrameDatasetIndexer

# %% ../../../nbs/abc/idxs/03_loc.ipynb 5
logger = NotebookLogger()

# %% ../../../nbs/abc/idxs/03_loc.ipynb 7
@dataclass
class DataFrameDatasetLocIndexer(BaseDataFrameDatasetIndexer):
    
    def __getitem__(self, idx: Union[int, slice, List[bool]]) -> List:
        arange = np.arange(len(self.index))

        try:
            # use dataframe loc, but this may give repeated values
            idx = self.dataset.df.loc[idx].index
            idx = self.index.isin(idx)
            iloc = arange[idx]
            logger.debug(f"iloc: {iloc}")
            return self.dataset.__getitem__(iloc)
        
        except KeyError as err:
            pass

        try:
            idx = self.index.get_loc(idx)
            iloc = arange[idx]
            logger.debug(f"iloc: {iloc}")
            return self.dataset.__getitem__(iloc)
        
        except KeyError as err:
            raise err
