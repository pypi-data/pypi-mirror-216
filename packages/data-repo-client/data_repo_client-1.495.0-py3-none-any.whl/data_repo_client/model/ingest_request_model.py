# coding: utf-8

"""
    Data Repository API

    <details><summary>This document defines the REST API for the Terra Data Repository.</summary> <p> **Status: design in progress** There are a few top-level endpoints (besides some used by swagger):  * / - generated by swagger: swagger API page that provides this documentation and a live UI for submitting REST requests  * /status - provides the operational status of the service  * /configuration - provides the basic configuration and information about the service  * /api - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The API endpoints are organized by interface. Each interface is separately versioned. <p> **Notes on Naming** <p> All of the reference items are suffixed with \\\"Model\\\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes. </details>   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from data_repo_client import schemas  # noqa: F401


class IngestRequestModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request to ingest data from a file in GCS into a table in a dataset. The ingest source must be readable by the DR manager. TODO: other input forms

    """


    class MetaOapg:
        required = {
            "max_bad_records",
            "max_failed_file_loads",
            "format",
            "table",
        }
        
        class properties:
        
            @staticmethod
            def table() -> typing.Type['ObjectNameProperty']:
                return ObjectNameProperty
            
            
            class format(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "csv": "CSV",
                        "json": "JSON",
                        "array": "ARRAY",
                    }
                
                @schemas.classproperty
                def CSV(cls):
                    return cls("csv")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("json")
                
                @schemas.classproperty
                def ARRAY(cls):
                    return cls("array")
            max_bad_records = schemas.IntSchema
            max_failed_file_loads = schemas.IntSchema
            path = schemas.StrSchema
            
            
            class records(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'records':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            load_tag = schemas.StrSchema
            profile_id = schemas.UUIDSchema
            ignore_unknown_values = schemas.BoolSchema
            csv_field_delimiter = schemas.StrSchema
            csv_quote = schemas.StrSchema
            csv_skip_leading_rows = schemas.IntSchema
            csv_allow_quoted_newlines = schemas.BoolSchema
            csv_null_marker = schemas.StrSchema
            csv_generate_row_ids = schemas.BoolSchema
            resolve_existing_files = schemas.BoolSchema
            transactionId = schemas.UUIDSchema
            
            
            class updateStrategy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "append": "APPEND",
                        "replace": "REPLACE",
                        "merge": "MERGE",
                    }
                
                @schemas.classproperty
                def APPEND(cls):
                    return cls("append")
                
                @schemas.classproperty
                def REPLACE(cls):
                    return cls("replace")
                
                @schemas.classproperty
                def MERGE(cls):
                    return cls("merge")
            bulkMode = schemas.BoolSchema
            __annotations__ = {
                "table": table,
                "format": format,
                "max_bad_records": max_bad_records,
                "max_failed_file_loads": max_failed_file_loads,
                "path": path,
                "records": records,
                "load_tag": load_tag,
                "profile_id": profile_id,
                "ignore_unknown_values": ignore_unknown_values,
                "csv_field_delimiter": csv_field_delimiter,
                "csv_quote": csv_quote,
                "csv_skip_leading_rows": csv_skip_leading_rows,
                "csv_allow_quoted_newlines": csv_allow_quoted_newlines,
                "csv_null_marker": csv_null_marker,
                "csv_generate_row_ids": csv_generate_row_ids,
                "resolve_existing_files": resolve_existing_files,
                "transactionId": transactionId,
                "updateStrategy": updateStrategy,
                "bulkMode": bulkMode,
            }
    
    max_bad_records: MetaOapg.properties.max_bad_records
    max_failed_file_loads: MetaOapg.properties.max_failed_file_loads
    format: MetaOapg.properties.format
    table: 'ObjectNameProperty'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["table"]) -> 'ObjectNameProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_bad_records"]) -> MetaOapg.properties.max_bad_records: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_failed_file_loads"]) -> MetaOapg.properties.max_failed_file_loads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["records"]) -> MetaOapg.properties.records: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["load_tag"]) -> MetaOapg.properties.load_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_id"]) -> MetaOapg.properties.profile_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ignore_unknown_values"]) -> MetaOapg.properties.ignore_unknown_values: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_field_delimiter"]) -> MetaOapg.properties.csv_field_delimiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_quote"]) -> MetaOapg.properties.csv_quote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_skip_leading_rows"]) -> MetaOapg.properties.csv_skip_leading_rows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_allow_quoted_newlines"]) -> MetaOapg.properties.csv_allow_quoted_newlines: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_null_marker"]) -> MetaOapg.properties.csv_null_marker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_generate_row_ids"]) -> MetaOapg.properties.csv_generate_row_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolve_existing_files"]) -> MetaOapg.properties.resolve_existing_files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateStrategy"]) -> MetaOapg.properties.updateStrategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bulkMode"]) -> MetaOapg.properties.bulkMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["table", "format", "max_bad_records", "max_failed_file_loads", "path", "records", "load_tag", "profile_id", "ignore_unknown_values", "csv_field_delimiter", "csv_quote", "csv_skip_leading_rows", "csv_allow_quoted_newlines", "csv_null_marker", "csv_generate_row_ids", "resolve_existing_files", "transactionId", "updateStrategy", "bulkMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["table"]) -> 'ObjectNameProperty': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_bad_records"]) -> MetaOapg.properties.max_bad_records: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_failed_file_loads"]) -> MetaOapg.properties.max_failed_file_loads: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["records"]) -> typing.Union[MetaOapg.properties.records, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["load_tag"]) -> typing.Union[MetaOapg.properties.load_tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_id"]) -> typing.Union[MetaOapg.properties.profile_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ignore_unknown_values"]) -> typing.Union[MetaOapg.properties.ignore_unknown_values, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_field_delimiter"]) -> typing.Union[MetaOapg.properties.csv_field_delimiter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_quote"]) -> typing.Union[MetaOapg.properties.csv_quote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_skip_leading_rows"]) -> typing.Union[MetaOapg.properties.csv_skip_leading_rows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_allow_quoted_newlines"]) -> typing.Union[MetaOapg.properties.csv_allow_quoted_newlines, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_null_marker"]) -> typing.Union[MetaOapg.properties.csv_null_marker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_generate_row_ids"]) -> typing.Union[MetaOapg.properties.csv_generate_row_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolve_existing_files"]) -> typing.Union[MetaOapg.properties.resolve_existing_files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> typing.Union[MetaOapg.properties.transactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateStrategy"]) -> typing.Union[MetaOapg.properties.updateStrategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bulkMode"]) -> typing.Union[MetaOapg.properties.bulkMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["table", "format", "max_bad_records", "max_failed_file_loads", "path", "records", "load_tag", "profile_id", "ignore_unknown_values", "csv_field_delimiter", "csv_quote", "csv_skip_leading_rows", "csv_allow_quoted_newlines", "csv_null_marker", "csv_generate_row_ids", "resolve_existing_files", "transactionId", "updateStrategy", "bulkMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        max_bad_records: typing.Union[MetaOapg.properties.max_bad_records, decimal.Decimal, int, ],
        max_failed_file_loads: typing.Union[MetaOapg.properties.max_failed_file_loads, decimal.Decimal, int, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        table: 'ObjectNameProperty',
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        records: typing.Union[MetaOapg.properties.records, list, tuple, schemas.Unset] = schemas.unset,
        load_tag: typing.Union[MetaOapg.properties.load_tag, str, schemas.Unset] = schemas.unset,
        profile_id: typing.Union[MetaOapg.properties.profile_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        ignore_unknown_values: typing.Union[MetaOapg.properties.ignore_unknown_values, bool, schemas.Unset] = schemas.unset,
        csv_field_delimiter: typing.Union[MetaOapg.properties.csv_field_delimiter, str, schemas.Unset] = schemas.unset,
        csv_quote: typing.Union[MetaOapg.properties.csv_quote, str, schemas.Unset] = schemas.unset,
        csv_skip_leading_rows: typing.Union[MetaOapg.properties.csv_skip_leading_rows, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        csv_allow_quoted_newlines: typing.Union[MetaOapg.properties.csv_allow_quoted_newlines, bool, schemas.Unset] = schemas.unset,
        csv_null_marker: typing.Union[MetaOapg.properties.csv_null_marker, str, schemas.Unset] = schemas.unset,
        csv_generate_row_ids: typing.Union[MetaOapg.properties.csv_generate_row_ids, bool, schemas.Unset] = schemas.unset,
        resolve_existing_files: typing.Union[MetaOapg.properties.resolve_existing_files, bool, schemas.Unset] = schemas.unset,
        transactionId: typing.Union[MetaOapg.properties.transactionId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        updateStrategy: typing.Union[MetaOapg.properties.updateStrategy, str, schemas.Unset] = schemas.unset,
        bulkMode: typing.Union[MetaOapg.properties.bulkMode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IngestRequestModel':
        return super().__new__(
            cls,
            *_args,
            max_bad_records=max_bad_records,
            max_failed_file_loads=max_failed_file_loads,
            format=format,
            table=table,
            path=path,
            records=records,
            load_tag=load_tag,
            profile_id=profile_id,
            ignore_unknown_values=ignore_unknown_values,
            csv_field_delimiter=csv_field_delimiter,
            csv_quote=csv_quote,
            csv_skip_leading_rows=csv_skip_leading_rows,
            csv_allow_quoted_newlines=csv_allow_quoted_newlines,
            csv_null_marker=csv_null_marker,
            csv_generate_row_ids=csv_generate_row_ids,
            resolve_existing_files=resolve_existing_files,
            transactionId=transactionId,
            updateStrategy=updateStrategy,
            bulkMode=bulkMode,
            _configuration=_configuration,
            **kwargs,
        )

from data_repo_client.model.object_name_property import ObjectNameProperty
