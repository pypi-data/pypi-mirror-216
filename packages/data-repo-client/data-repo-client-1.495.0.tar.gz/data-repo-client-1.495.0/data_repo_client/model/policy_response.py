# coding: utf-8

"""
    Data Repository API

    <details><summary>This document defines the REST API for the Terra Data Repository.</summary> <p> **Status: design in progress** There are a few top-level endpoints (besides some used by swagger):  * / - generated by swagger: swagger API page that provides this documentation and a live UI for submitting REST requests  * /status - provides the operational status of the service  * /configuration - provides the basic configuration and information about the service  * /api - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The API endpoints are organized by interface. Each interface is separately versioned. <p> **Notes on Naming** <p> All of the reference items are suffixed with \\\"Model\\\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes. </details>   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from data_repo_client import schemas  # noqa: F401


class PolicyResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    email of user or group to add to policy

    """


    class MetaOapg:
        
        class properties:
            
            
            class policies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PolicyModel']:
                        return PolicyModel
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PolicyModel'], typing.List['PolicyModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'policies':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PolicyModel':
                    return super().__getitem__(i)
            
            
            class workspaces(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkspacePolicyModel']:
                        return WorkspacePolicyModel
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WorkspacePolicyModel'], typing.List['WorkspacePolicyModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workspaces':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkspacePolicyModel':
                    return super().__getitem__(i)
            
            
            class inaccessibleWorkspaces(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InaccessibleWorkspacePolicyModel']:
                        return InaccessibleWorkspacePolicyModel
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['InaccessibleWorkspacePolicyModel'], typing.List['InaccessibleWorkspacePolicyModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inaccessibleWorkspaces':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InaccessibleWorkspacePolicyModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "policies": policies,
                "workspaces": workspaces,
                "inaccessibleWorkspaces": inaccessibleWorkspaces,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policies"]) -> MetaOapg.properties.policies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaces"]) -> MetaOapg.properties.workspaces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inaccessibleWorkspaces"]) -> MetaOapg.properties.inaccessibleWorkspaces: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["policies", "workspaces", "inaccessibleWorkspaces", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policies"]) -> typing.Union[MetaOapg.properties.policies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaces"]) -> typing.Union[MetaOapg.properties.workspaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inaccessibleWorkspaces"]) -> typing.Union[MetaOapg.properties.inaccessibleWorkspaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["policies", "workspaces", "inaccessibleWorkspaces", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        policies: typing.Union[MetaOapg.properties.policies, list, tuple, schemas.Unset] = schemas.unset,
        workspaces: typing.Union[MetaOapg.properties.workspaces, list, tuple, schemas.Unset] = schemas.unset,
        inaccessibleWorkspaces: typing.Union[MetaOapg.properties.inaccessibleWorkspaces, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PolicyResponse':
        return super().__new__(
            cls,
            *_args,
            policies=policies,
            workspaces=workspaces,
            inaccessibleWorkspaces=inaccessibleWorkspaces,
            _configuration=_configuration,
            **kwargs,
        )

from data_repo_client.model.inaccessible_workspace_policy_model import InaccessibleWorkspacePolicyModel
from data_repo_client.model.policy_model import PolicyModel
from data_repo_client.model.workspace_policy_model import WorkspacePolicyModel
