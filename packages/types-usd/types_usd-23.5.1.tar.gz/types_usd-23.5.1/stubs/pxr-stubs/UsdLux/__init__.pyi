# mypy: disable_error_code = misc
import Boost.Python
import pxr.Usd
import typing
from typing import Any, ClassVar, overload

class BoundableLightBase(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiffuseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateEnableColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFiltersRel(self) -> pxr.Usd.Relationship: ...
    def CreateIntensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSpecularAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> BoundableLightBase: ...
    def GetColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiffuseAttr(self) -> pxr.Usd.Attribute: ...
    def GetEnableColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFiltersRel(self) -> pxr.Usd.Relationship: ...
    def GetIntensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSpecularAttr(self) -> pxr.Usd.Attribute: ...
    def LightAPI(self) -> LightAPI: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class CylinderLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateLengthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTreatAsLineAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> CylinderLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> CylinderLight: ...
    def GetLengthAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTreatAsLineAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DiskLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DiskLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DiskLight: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DistantLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAngleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DistantLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DistantLight: ...
    def GetAngleAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DomeLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateGuideRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePortalsRel(self) -> pxr.Usd.Relationship: ...
    def CreateTextureFileAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTextureFormatAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DomeLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DomeLight: ...
    def GetGuideRadiusAttr(self) -> pxr.Usd.Attribute: ...
    def GetPortalsRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTextureFileAttr(self) -> pxr.Usd.Attribute: ...
    def GetTextureFormatAttr(self) -> pxr.Usd.Attribute: ...
    def OrientToStageUpAxis(self) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class GeometryLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateGeometryRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> GeometryLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> GeometryLight: ...
    def GetGeometryRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> LightAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiffuseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateEnableColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFiltersRel(self) -> pxr.Usd.Relationship: ...
    def CreateInput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateIntensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateMaterialSyncModeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOutput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShaderIdAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShaderIdAttrForRenderContext(self, renderContext: str | pxr.Ar.ResolvedPath, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSpecularAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> LightAPI: ...
    def GetColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiffuseAttr(self) -> pxr.Usd.Attribute: ...
    def GetEnableColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFiltersRel(self) -> pxr.Usd.Relationship: ...
    def GetInput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetIntensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetLightLinkCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetMaterialSyncModeAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    def GetOutput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShaderId(self, renderContexts: list[str] | list[pxr.Ar.ResolvedPath]) -> str: ...
    def GetShaderIdAttr(self) -> pxr.Usd.Attribute: ...
    def GetShaderIdAttrForRenderContext(self, renderContext: str | pxr.Ar.ResolvedPath) -> pxr.Usd.Attribute: ...
    def GetShadowLinkCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetSpecularAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LightFilter(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateInput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateOutput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShaderIdAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShaderIdAttrForRenderContext(self, renderContext: str | pxr.Ar.ResolvedPath, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> LightFilter: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> LightFilter: ...
    def GetFilterLinkCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetInput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetOutput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShaderId(self, renderContexts: list[str] | list[pxr.Ar.ResolvedPath]) -> str: ...
    def GetShaderIdAttr(self) -> pxr.Usd.Attribute: ...
    def GetShaderIdAttrForRenderContext(self, renderContext: str | pxr.Ar.ResolvedPath) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LightListAPI(pxr.Usd.APISchemaBase):
    class ComputeMode(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> Any: ...
        def __reduce__(self) -> Any: ...
    ComputeModeConsultModelHierarchyCache: ClassVar[LightListAPI.ComputeMode] = ...
    ComputeModeIgnoreCache: ClassVar[LightListAPI.ComputeMode] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> LightListAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeLightList(self, arg2: LightListAPI.ComputeMode) -> list[pxr.Sdf.Path]: ...
    def CreateLightListCacheBehaviorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> LightListAPI: ...
    def GetLightListCacheBehaviorAttr(self) -> pxr.Usd.Attribute: ...
    def GetLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def InvalidateLightList(self) -> None: ...
    def StoreLightList(self, arg2: typing.Iterable[pxr.Sdf.Path | str]) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ListAPI(pxr.Usd.APISchemaBase):
    class ComputeMode(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> Any: ...
        def __reduce__(self) -> Any: ...
    ComputeModeConsultModelHierarchyCache: ClassVar[LightListAPI.ComputeMode] = ...
    ComputeModeIgnoreCache: ClassVar[LightListAPI.ComputeMode] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ListAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeLightList(self, arg2: LightListAPI.ComputeMode) -> list[pxr.Sdf.Path]: ...
    def CreateLightListCacheBehaviorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> ListAPI: ...
    def GetLightListCacheBehaviorAttr(self) -> pxr.Usd.Attribute: ...
    def GetLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def InvalidateLightList(self) -> None: ...
    def StoreLightList(self, arg2: typing.Iterable[pxr.Sdf.Path | str]) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class MeshLightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> MeshLightAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> MeshLightAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class NonboundableLightBase(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiffuseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateEnableColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFiltersRel(self) -> pxr.Usd.Relationship: ...
    def CreateIntensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSpecularAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> NonboundableLightBase: ...
    def GetColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiffuseAttr(self) -> pxr.Usd.Attribute: ...
    def GetEnableColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFiltersRel(self) -> pxr.Usd.Relationship: ...
    def GetIntensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSpecularAttr(self) -> pxr.Usd.Attribute: ...
    def LightAPI(self) -> LightAPI: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PluginLight(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PluginLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PluginLight: ...
    def GetNodeDefAPI(self) -> pxr.UsdShade.NodeDefAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PluginLightFilter(LightFilter):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PluginLightFilter: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PluginLightFilter: ...
    def GetNodeDefAPI(self) -> pxr.UsdShade.NodeDefAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PortalLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PortalLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PortalLight: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class RectLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTextureFileAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateWidthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> RectLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> RectLight: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTextureFileAttr(self) -> pxr.Usd.Attribute: ...
    def GetWidthAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ShadowAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ShadowAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateInput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateOutput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShadowColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowDistanceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowEnableAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowFalloffAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowFalloffGammaAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> ShadowAPI: ...
    def GetInput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetOutput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShadowColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowDistanceAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowEnableAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowFalloffAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowFalloffGammaAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ShapingAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ShapingAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateInput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateOutput(self, name: str | pxr.Ar.ResolvedPath, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShapingConeAngleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingConeSoftnessAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingFocusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingFocusTintAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingIesAngleScaleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingIesFileAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingIesNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> ShapingAPI: ...
    def GetInput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetOutput(self, name: str | pxr.Ar.ResolvedPath) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShapingConeAngleAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingConeSoftnessAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingFocusAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingFocusTintAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingIesAngleScaleAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingIesFileAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingIesNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class SphereLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTreatAsPointAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> SphereLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> SphereLight: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTreatAsPointAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    BoundableLightBase: ClassVar[Any] = ...  # read-only
    CylinderLight: ClassVar[Any] = ...  # read-only
    DiskLight: ClassVar[Any] = ...  # read-only
    DistantLight: ClassVar[Any] = ...  # read-only
    DomeLight: ClassVar[Any] = ...  # read-only
    GeometryLight: ClassVar[Any] = ...  # read-only
    LightAPI: ClassVar[Any] = ...  # read-only
    LightFilter: ClassVar[Any] = ...  # read-only
    LightListAPI: ClassVar[Any] = ...  # read-only
    ListAPI: ClassVar[Any] = ...  # read-only
    MeshLight: ClassVar[Any] = ...  # read-only
    MeshLightAPI: ClassVar[Any] = ...  # read-only
    NonboundableLightBase: ClassVar[Any] = ...  # read-only
    PluginLight: ClassVar[Any] = ...  # read-only
    PluginLightFilter: ClassVar[Any] = ...  # read-only
    PortalLight: ClassVar[Any] = ...  # read-only
    RectLight: ClassVar[Any] = ...  # read-only
    ShadowAPI: ClassVar[Any] = ...  # read-only
    ShapingAPI: ClassVar[Any] = ...  # read-only
    SphereLight: ClassVar[Any] = ...  # read-only
    VolumeLight: ClassVar[Any] = ...  # read-only
    VolumeLightAPI: ClassVar[Any] = ...  # read-only
    angular: ClassVar[Any] = ...  # read-only
    automatic: ClassVar[Any] = ...  # read-only
    collectionFilterLinkIncludeRoot: ClassVar[Any] = ...  # read-only
    collectionLightLinkIncludeRoot: ClassVar[Any] = ...  # read-only
    collectionShadowLinkIncludeRoot: ClassVar[Any] = ...  # read-only
    consumeAndContinue: ClassVar[Any] = ...  # read-only
    consumeAndHalt: ClassVar[Any] = ...  # read-only
    cubeMapVerticalCross: ClassVar[Any] = ...  # read-only
    extent: ClassVar[Any] = ...  # read-only
    filterLink: ClassVar[Any] = ...  # read-only
    geometry: ClassVar[Any] = ...  # read-only
    guideRadius: ClassVar[Any] = ...  # read-only
    ignore: ClassVar[Any] = ...  # read-only
    independent: ClassVar[Any] = ...  # read-only
    inputsAngle: ClassVar[Any] = ...  # read-only
    inputsColor: ClassVar[Any] = ...  # read-only
    inputsColorTemperature: ClassVar[Any] = ...  # read-only
    inputsDiffuse: ClassVar[Any] = ...  # read-only
    inputsEnableColorTemperature: ClassVar[Any] = ...  # read-only
    inputsExposure: ClassVar[Any] = ...  # read-only
    inputsHeight: ClassVar[Any] = ...  # read-only
    inputsIntensity: ClassVar[Any] = ...  # read-only
    inputsLength: ClassVar[Any] = ...  # read-only
    inputsNormalize: ClassVar[Any] = ...  # read-only
    inputsRadius: ClassVar[Any] = ...  # read-only
    inputsShadowColor: ClassVar[Any] = ...  # read-only
    inputsShadowDistance: ClassVar[Any] = ...  # read-only
    inputsShadowEnable: ClassVar[Any] = ...  # read-only
    inputsShadowFalloff: ClassVar[Any] = ...  # read-only
    inputsShadowFalloffGamma: ClassVar[Any] = ...  # read-only
    inputsShapingConeAngle: ClassVar[Any] = ...  # read-only
    inputsShapingConeSoftness: ClassVar[Any] = ...  # read-only
    inputsShapingFocus: ClassVar[Any] = ...  # read-only
    inputsShapingFocusTint: ClassVar[Any] = ...  # read-only
    inputsShapingIesAngleScale: ClassVar[Any] = ...  # read-only
    inputsShapingIesFile: ClassVar[Any] = ...  # read-only
    inputsShapingIesNormalize: ClassVar[Any] = ...  # read-only
    inputsSpecular: ClassVar[Any] = ...  # read-only
    inputsTextureFile: ClassVar[Any] = ...  # read-only
    inputsTextureFormat: ClassVar[Any] = ...  # read-only
    inputsWidth: ClassVar[Any] = ...  # read-only
    latlong: ClassVar[Any] = ...  # read-only
    lightFilterShaderId: ClassVar[Any] = ...  # read-only
    lightFilters: ClassVar[Any] = ...  # read-only
    lightLink: ClassVar[Any] = ...  # read-only
    lightList: ClassVar[Any] = ...  # read-only
    lightListCacheBehavior: ClassVar[Any] = ...  # read-only
    lightMaterialSyncMode: ClassVar[Any] = ...  # read-only
    lightShaderId: ClassVar[Any] = ...  # read-only
    materialGlowTintsLight: ClassVar[Any] = ...  # read-only
    mirroredBall: ClassVar[Any] = ...  # read-only
    noMaterialResponse: ClassVar[Any] = ...  # read-only
    orientToStageUpAxis: ClassVar[Any] = ...  # read-only
    portals: ClassVar[Any] = ...  # read-only
    shadowLink: ClassVar[Any] = ...  # read-only
    treatAsLine: ClassVar[Any] = ...  # read-only
    treatAsPoint: ClassVar[Any] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class VolumeLightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> VolumeLightAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> VolumeLightAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> typing.Iterator[Any]: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def BlackbodyTemperatureAsRgb(arg1: float) -> pxr.Gf.Vec3f: ...