# mypy: disable_error_code = misc
import Boost.Python
import pxr.Tf
import typing
from typing import Any, ClassVar, overload

class ArticulationRootAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ArticulationRootAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> ArticulationRootAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class CollisionAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> CollisionAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateCollisionEnabledAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSimulationOwnerRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> CollisionAPI: ...
    def GetCollisionEnabledAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSimulationOwnerRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class CollisionGroup(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def ComputeCollisionGroupTable(cls, stage: pxr.Usd.Stage) -> CollisionGroupTable: ...
    def CreateFilteredGroupsRel(self) -> pxr.Usd.Relationship: ...
    def CreateInvertFilteredGroupsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateMergeGroupNameAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> CollisionGroup: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> CollisionGroup: ...
    def GetCollidersCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetFilteredGroupsRel(self) -> pxr.Usd.Relationship: ...
    def GetInvertFilteredGroupsAttr(self) -> pxr.Usd.Attribute: ...
    def GetMergeGroupNameAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class CollisionGroupTable(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def GetGroups(self) -> list: ...
    def IsCollisionEnabled(self, arg2: object, arg3: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class DistanceJoint(Joint):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateMaxDistanceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateMinDistanceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DistanceJoint: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DistanceJoint: ...
    def GetMaxDistanceAttr(self) -> pxr.Usd.Attribute: ...
    def GetMinDistanceAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DriveAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: pxr.Usd.Prim, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: pxr.Usd.SchemaBase, arg3: object) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim, name: str | pxr.Ar.ResolvedPath) -> DriveAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim, name: str | pxr.Ar.ResolvedPath) -> _CanApplyResult: ...
    def CreateDampingAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateMaxForceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateStiffnessAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTargetPositionAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTargetVelocityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTypeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @overload
    @classmethod
    def Get(cls, prim: pxr.Usd.Prim, name: str | pxr.Ar.ResolvedPath) -> DriveAPI: ...
    @overload
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> DriveAPI: ...
    @classmethod
    def GetAll(cls, prim: pxr.Usd.Prim) -> list[DriveAPI]: ...
    def GetDampingAttr(self) -> pxr.Usd.Attribute: ...
    def GetMaxForceAttr(self) -> pxr.Usd.Attribute: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, arg1: bool, includeInherited: str | pxr.Ar.ResolvedPath) -> list[str]: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetStiffnessAttr(self) -> pxr.Usd.Attribute: ...
    def GetTargetPositionAttr(self) -> pxr.Usd.Attribute: ...
    def GetTargetVelocityAttr(self) -> pxr.Usd.Attribute: ...
    def GetTypeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def IsPhysicsDriveAPIPath(cls, arg1: pxr.Sdf.Path | str) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class FilteredPairsAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> FilteredPairsAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateFilteredPairsRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> FilteredPairsAPI: ...
    def GetFilteredPairsRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class FixedJoint(Joint):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> FixedJoint: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> FixedJoint: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Joint(pxr.UsdGeom.Imageable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateBody0Rel(self) -> pxr.Usd.Relationship: ...
    def CreateBody1Rel(self) -> pxr.Usd.Relationship: ...
    def CreateBreakForceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateBreakTorqueAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateCollisionEnabledAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExcludeFromArticulationAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointEnabledAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLocalPos0Attr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLocalPos1Attr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLocalRot0Attr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLocalRot1Attr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Joint: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Joint: ...
    def GetBody0Rel(self) -> pxr.Usd.Relationship: ...
    def GetBody1Rel(self) -> pxr.Usd.Relationship: ...
    def GetBreakForceAttr(self) -> pxr.Usd.Attribute: ...
    def GetBreakTorqueAttr(self) -> pxr.Usd.Attribute: ...
    def GetCollisionEnabledAttr(self) -> pxr.Usd.Attribute: ...
    def GetExcludeFromArticulationAttr(self) -> pxr.Usd.Attribute: ...
    def GetJointEnabledAttr(self) -> pxr.Usd.Attribute: ...
    def GetLocalPos0Attr(self) -> pxr.Usd.Attribute: ...
    def GetLocalPos1Attr(self) -> pxr.Usd.Attribute: ...
    def GetLocalRot0Attr(self) -> pxr.Usd.Attribute: ...
    def GetLocalRot1Attr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LimitAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: pxr.Usd.Prim, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: pxr.Usd.SchemaBase, arg3: object) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim, name: str | pxr.Ar.ResolvedPath) -> LimitAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim, name: str | pxr.Ar.ResolvedPath) -> _CanApplyResult: ...
    def CreateHighAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLowAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @overload
    @classmethod
    def Get(cls, prim: pxr.Usd.Prim, name: str | pxr.Ar.ResolvedPath) -> LimitAPI: ...
    @overload
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> LimitAPI: ...
    @classmethod
    def GetAll(cls, prim: pxr.Usd.Prim) -> list[LimitAPI]: ...
    def GetHighAttr(self) -> pxr.Usd.Attribute: ...
    def GetLowAttr(self) -> pxr.Usd.Attribute: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, arg1: bool, includeInherited: str | pxr.Ar.ResolvedPath) -> list[str]: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def IsPhysicsLimitAPIPath(cls, arg1: pxr.Sdf.Path | str) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class MassAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> MassAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateCenterOfMassAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiagonalInertiaAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateMassAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePrincipalAxesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> MassAPI: ...
    def GetCenterOfMassAttr(self) -> pxr.Usd.Attribute: ...
    def GetDensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiagonalInertiaAttr(self) -> pxr.Usd.Attribute: ...
    def GetMassAttr(self) -> pxr.Usd.Attribute: ...
    def GetPrincipalAxesAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class MassUnits(Boost.Python.instance):
    grams: ClassVar[Any] = ...  # read-only
    kilograms: ClassVar[Any] = ...  # read-only
    slugs: ClassVar[Any] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class MaterialAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> MaterialAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateDensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDynamicFrictionAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRestitutionAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateStaticFrictionAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> MaterialAPI: ...
    def GetDensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetDynamicFrictionAttr(self) -> pxr.Usd.Attribute: ...
    def GetRestitutionAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetStaticFrictionAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class MeshCollisionAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> MeshCollisionAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateApproximationAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> MeshCollisionAPI: ...
    def GetApproximationAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PrismaticJoint(Joint):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLowerLimitAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateUpperLimitAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PrismaticJoint: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PrismaticJoint: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetLowerLimitAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetUpperLimitAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class RevoluteJoint(Joint):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLowerLimitAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateUpperLimitAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> RevoluteJoint: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> RevoluteJoint: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetLowerLimitAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetUpperLimitAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class RigidBodyAPI(pxr.Usd.APISchemaBase):
    class MassInformation(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        centerOfMass: Any
        inertia: Any
        localPos: Any
        localRot: Any
        volume: Any
        def __init__(self) -> None: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> RigidBodyAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeMassProperties(self, arg2: MassInformationFn) -> tuple: ...
    def CreateAngularVelocityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateKinematicEnabledAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRigidBodyEnabledAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSimulationOwnerRel(self) -> pxr.Usd.Relationship: ...
    def CreateStartsAsleepAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVelocityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> RigidBodyAPI: ...
    def GetAngularVelocityAttr(self) -> pxr.Usd.Attribute: ...
    def GetKinematicEnabledAttr(self) -> pxr.Usd.Attribute: ...
    def GetRigidBodyEnabledAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSimulationOwnerRel(self) -> pxr.Usd.Relationship: ...
    def GetStartsAsleepAttr(self) -> pxr.Usd.Attribute: ...
    def GetVelocityAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Scene(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateGravityDirectionAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateGravityMagnitudeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Scene: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Scene: ...
    def GetGravityDirectionAttr(self) -> pxr.Usd.Attribute: ...
    def GetGravityMagnitudeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class SphericalJoint(Joint):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateConeAngle0LimitAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateConeAngle1LimitAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> SphericalJoint: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> SphericalJoint: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetConeAngle0LimitAttr(self) -> pxr.Usd.Attribute: ...
    def GetConeAngle1LimitAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    PhysicsArticulationRootAPI: ClassVar[Any] = ...  # read-only
    PhysicsCollisionAPI: ClassVar[Any] = ...  # read-only
    PhysicsCollisionGroup: ClassVar[Any] = ...  # read-only
    PhysicsDistanceJoint: ClassVar[Any] = ...  # read-only
    PhysicsDriveAPI: ClassVar[Any] = ...  # read-only
    PhysicsFilteredPairsAPI: ClassVar[Any] = ...  # read-only
    PhysicsFixedJoint: ClassVar[Any] = ...  # read-only
    PhysicsJoint: ClassVar[Any] = ...  # read-only
    PhysicsLimitAPI: ClassVar[Any] = ...  # read-only
    PhysicsMassAPI: ClassVar[Any] = ...  # read-only
    PhysicsMaterialAPI: ClassVar[Any] = ...  # read-only
    PhysicsMeshCollisionAPI: ClassVar[Any] = ...  # read-only
    PhysicsPrismaticJoint: ClassVar[Any] = ...  # read-only
    PhysicsRevoluteJoint: ClassVar[Any] = ...  # read-only
    PhysicsRigidBodyAPI: ClassVar[Any] = ...  # read-only
    PhysicsScene: ClassVar[Any] = ...  # read-only
    PhysicsSphericalJoint: ClassVar[Any] = ...  # read-only
    acceleration: ClassVar[Any] = ...  # read-only
    angular: ClassVar[Any] = ...  # read-only
    boundingCube: ClassVar[Any] = ...  # read-only
    boundingSphere: ClassVar[Any] = ...  # read-only
    colliders: ClassVar[Any] = ...  # read-only
    convexDecomposition: ClassVar[Any] = ...  # read-only
    convexHull: ClassVar[Any] = ...  # read-only
    distance: ClassVar[Any] = ...  # read-only
    drive: ClassVar[Any] = ...  # read-only
    drive_MultipleApplyTemplate_PhysicsDamping: ClassVar[Any] = ...  # read-only
    drive_MultipleApplyTemplate_PhysicsMaxForce: ClassVar[Any] = ...  # read-only
    drive_MultipleApplyTemplate_PhysicsStiffness: ClassVar[Any] = ...  # read-only
    drive_MultipleApplyTemplate_PhysicsTargetPosition: ClassVar[Any] = ...  # read-only
    drive_MultipleApplyTemplate_PhysicsTargetVelocity: ClassVar[Any] = ...  # read-only
    drive_MultipleApplyTemplate_PhysicsType: ClassVar[Any] = ...  # read-only
    force: ClassVar[Any] = ...  # read-only
    kilogramsPerUnit: ClassVar[Any] = ...  # read-only
    limit: ClassVar[Any] = ...  # read-only
    limit_MultipleApplyTemplate_PhysicsHigh: ClassVar[Any] = ...  # read-only
    limit_MultipleApplyTemplate_PhysicsLow: ClassVar[Any] = ...  # read-only
    linear: ClassVar[Any] = ...  # read-only
    meshSimplification: ClassVar[Any] = ...  # read-only
    none: ClassVar[Any] = ...  # read-only
    physicsAngularVelocity: ClassVar[Any] = ...  # read-only
    physicsApproximation: ClassVar[Any] = ...  # read-only
    physicsAxis: ClassVar[Any] = ...  # read-only
    physicsBody0: ClassVar[Any] = ...  # read-only
    physicsBody1: ClassVar[Any] = ...  # read-only
    physicsBreakForce: ClassVar[Any] = ...  # read-only
    physicsBreakTorque: ClassVar[Any] = ...  # read-only
    physicsCenterOfMass: ClassVar[Any] = ...  # read-only
    physicsCollisionEnabled: ClassVar[Any] = ...  # read-only
    physicsConeAngle0Limit: ClassVar[Any] = ...  # read-only
    physicsConeAngle1Limit: ClassVar[Any] = ...  # read-only
    physicsDensity: ClassVar[Any] = ...  # read-only
    physicsDiagonalInertia: ClassVar[Any] = ...  # read-only
    physicsDynamicFriction: ClassVar[Any] = ...  # read-only
    physicsExcludeFromArticulation: ClassVar[Any] = ...  # read-only
    physicsFilteredGroups: ClassVar[Any] = ...  # read-only
    physicsFilteredPairs: ClassVar[Any] = ...  # read-only
    physicsGravityDirection: ClassVar[Any] = ...  # read-only
    physicsGravityMagnitude: ClassVar[Any] = ...  # read-only
    physicsInvertFilteredGroups: ClassVar[Any] = ...  # read-only
    physicsJointEnabled: ClassVar[Any] = ...  # read-only
    physicsKinematicEnabled: ClassVar[Any] = ...  # read-only
    physicsLocalPos0: ClassVar[Any] = ...  # read-only
    physicsLocalPos1: ClassVar[Any] = ...  # read-only
    physicsLocalRot0: ClassVar[Any] = ...  # read-only
    physicsLocalRot1: ClassVar[Any] = ...  # read-only
    physicsLowerLimit: ClassVar[Any] = ...  # read-only
    physicsMass: ClassVar[Any] = ...  # read-only
    physicsMaxDistance: ClassVar[Any] = ...  # read-only
    physicsMergeGroup: ClassVar[Any] = ...  # read-only
    physicsMinDistance: ClassVar[Any] = ...  # read-only
    physicsPrincipalAxes: ClassVar[Any] = ...  # read-only
    physicsRestitution: ClassVar[Any] = ...  # read-only
    physicsRigidBodyEnabled: ClassVar[Any] = ...  # read-only
    physicsSimulationOwner: ClassVar[Any] = ...  # read-only
    physicsStartsAsleep: ClassVar[Any] = ...  # read-only
    physicsStaticFriction: ClassVar[Any] = ...  # read-only
    physicsUpperLimit: ClassVar[Any] = ...  # read-only
    physicsVelocity: ClassVar[Any] = ...  # read-only
    rotX: ClassVar[Any] = ...  # read-only
    rotY: ClassVar[Any] = ...  # read-only
    rotZ: ClassVar[Any] = ...  # read-only
    transX: ClassVar[Any] = ...  # read-only
    transY: ClassVar[Any] = ...  # read-only
    transZ: ClassVar[Any] = ...  # read-only
    x: ClassVar[Any] = ...  # read-only
    y: ClassVar[Any] = ...  # read-only
    z: ClassVar[Any] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> typing.Iterator[Any]: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def GetStageKilogramsPerUnit(stage: pxr.Usd.Stage) -> float: ...
def MassUnitsAre(authoredUnits: float, standardUnits: float, epsilon: float = ...) -> bool: ...
def SetStageKilogramsPerUnit(stage: pxr.Usd.Stage, metersPerUnit: float) -> bool: ...
def StageHasAuthoredKilogramsPerUnit(stage: pxr.Usd.Stage) -> bool: ...