{"version":3,"sources":["MyComponent.jsx","index.jsx"],"names":["Box","_ref","children","geometry","style","_jsx","_objectSpread","position","left","concat","x","top","y","height","width","renderContent","_ref3","annotation","background","color","padding","fontSize","data","text","id","DataDiv","_ref4","annotations","labels","_useState","useState","_useState2","_slicedToArray","setData","useEffect","tempData","forEach","label","frquency","console","log","_Fragment","className","Object","keys","map","key","_jsxs","MyComponent","_Component","_inherits","_super","_createSuper","props","_this$props","_this","_classCallCheck","call","canvasRef","React","createRef","moveDiv","e","setState","coords","clientX","clientY","onMouseMove","showDiv","window","addEventListener","onMouseOut","removeEventListener","renderImageToCanvas","Promise","resolve","canvas","current","context","getContext","img","Image","onload","drawImage","state","px","py","pwidth","pheight","beginPath","rect","lineWidth","strokeStyle","fillStyle","stroke","font","fillText","src","image","onChange","onSubmit","Math","random","onChangeType","type","currentTarget","innerHTML","deleteAnnotation","filter","downloadImage","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$canvasRef$curre","dataUrl","link","wrap","_context","prev","next","toDataURL","document","createElement","href","download","click","stop","_toConsumableArray","detectedAnotations","_createClass","value","this","_this2","imageSrc","Annotation","alt","renderEditor","target","onClick","renderHighlight","_ref6","_ref2","active","border","generateRandomHexCode","ref","display","Component","App","_StreamlitComponentBa","_super2","apply","arguments","_this$props$args","args","StreamlitComponentBase","withStreamlitConnection","hexCode","i","floor","toString","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.209bf5ec.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { Component, useState, useEffect } from \"react\"\nimport \"./label-image.css\"\n\n// import Button from \"./Button\"\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase {\n//   state = { numClicks: 0, isFocused: false }\n\n//   render = () => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   onClicked = () => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       (prevState) => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   _onFocus = () => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   _onBlur = () => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React from \"react\"\n\n// class MyComponent extends StreamlitComponentBase {\n//   state = { numClicks: 0, isFocused: false }\n\n//   render = () => {\n//     const props = this.props\n//     const { image, labels } = props.args\n//     console.log({ labels })\n//     // prepend the proper prefix for base64 encoded jpeg images\n//     const imageSrc = \"data:image/jpeg;base64,\" + image\n//     console.log(props)\n//     return (\n//       <div>\n//         <img src={imageSrc} alt=\"My custom component image\" width=\"100%\" />\n//       </div>\n//     )\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent)\nimport Annotation from \"react-image-annotation\"\n\nconst Box = ({ children, geometry, style }) => (\n  <div\n    style={{\n      ...style,\n      position: \"absolute\",\n      left: `${geometry.x}%`,\n      top: `${geometry.y}%`,\n      height: `${geometry.height}%`,\n      width: `${geometry.width}%`,\n    }}\n  >\n    {children}\n  </div>\n)\n\nfunction renderHighlight({ annotation, active, deleteAnnotation }) {\n  const { geometry } = annotation\n  if (!geometry) return null\n  return (\n    <Box\n      key={annotation.data.id}\n      geometry={geometry}\n      style={{\n        border: `solid 1px ${active ? \"#3e8e41\" : generateRandomHexCode()}`,\n        // boxShadow: active && \"0 0 20px 20px rgba(255, 255, 255, 0.3) inset\",\n      }}\n    >\n      {active && (\n        <button\n          className=\"deleteAnnotationButton\"\n          onClick={() => {\n            console.log(\"delete\")\n            deleteAnnotation(annotation.data.id)\n          }}\n        >\n          X\n        </button>\n      )}\n    </Box>\n  )\n}\n\nfunction renderContent({ annotation }) {\n  const { geometry } = annotation\n  return (\n    <div\n      key={annotation.data.id}\n      style={{\n        background: \"black\",\n        color: \"white\",\n        padding: 10,\n        position: \"absolute\",\n        fontSize: 12,\n        left: `${geometry.x}%`,\n        top: `${geometry.y + geometry.height}%`,\n      }}\n    >\n      {annotation.data && annotation.data.text}\n    </div>\n  )\n}\nfunction renderEditor(props, labels) {\n  const { geometry } = props.annotation\n  if (!geometry) return null\n  return (\n    <div\n      className=\"holder\"\n      style={{\n        background: \"rgba(0, 0, 0, 0.15)\",\n        left: `${geometry.x > 80 ? 75 : geometry.x}%`,\n        top: `${geometry.y > 85 ? 85 : geometry.y}%`,\n      }}\n    >\n      <select\n        className=\"selectItem\"\n        onChange={(e) => {\n          props.onChange({\n            ...props.annotation,\n            data: {\n              ...props.annotation.data,\n              text: e.target.value,\n            },\n          })\n        }}\n      >\n        <option value=\"\">Select...</option>\n        {labels.map((label) => (\n          <option key={label} value={label}>\n            {label}\n          </option>\n        ))}\n      </select>\n      <button className=\"addLabelButton\" onClick={props.onSubmit}>\n        Add\n      </button>\n    </div>\n  )\n}\n\nconst DataDiv = ({ annotations, labels }) => {\n  // we will create a table here\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const tempData = {}\n    labels.forEach((label) => {\n      tempData[label] = 0\n    })\n    annotations.forEach((annotation) => {\n      const { data } = annotation\n      const { text } = data\n      const frquency = tempData[text] ? tempData[text] + 1 : 1\n      tempData[text] = frquency\n    })\n    setData(tempData)\n    console.log({ tempData })\n  }, [annotations])\n  return (\n    <>\n      <div className=\"dataHolder\">\n        {Object.keys(data).map((key) => {\n          return (\n            <div className=\"dataItem\" key={key}>\n              <div className=\"dataItemLabel\">{key}</div>\n              <div className=\"dataItemValue\">{data[key]}</div>\n            </div>\n          )\n        })}\n      </div>\n    </>\n  )\n}\n\nclass MyComponent extends Component {\n  // state = {\n  //   annotations: [],\n  //   annotation: {},\n  // }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      annotations: [...this.props?.detectedAnotations],\n      annotation: {},\n      showDiv: false,\n      coords: { x: 0, y: 0 },\n    }\n  }\n  canvasRef = React.createRef()\n  moveDiv = (e) => {\n    this.setState({ coords: { x: e.clientX, y: e.clientY } })\n  }\n\n  onMouseMove = (e) => {\n    this.setState({ showDiv: true })\n    window.addEventListener(\"mousemove\", this.moveDiv)\n  }\n\n  onMouseOut = (e) => {\n    this.setState({ showDiv: false })\n    window.removeEventListener(\"mousemove\", this.moveDiv)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mousemove\", this.moveDiv)\n  }\n\n  renderImageToCanvas = () => {\n    return new Promise((resolve) => {\n      const canvas = this.canvasRef.current\n      const context = canvas.getContext(\"2d\")\n      const img = new Image()\n\n      img.onload = () => {\n        canvas.width = img.width\n        canvas.height = img.height\n        context.drawImage(img, 0, 0, img.width, img.height)\n\n        this.state.annotations.forEach((annotation) => {\n          const { geometry, data } = annotation\n          const { x, y, width, height } = geometry\n          const { text } = data\n\n          const [px, py, pwidth, pheight] = [\n            (x / 100) * img.width,\n            (y / 100) * img.height,\n            (width / 100) * img.width,\n            (height / 100) * img.height,\n          ]\n\n          context.beginPath()\n          context.rect(px, py, pwidth, pheight)\n          context.lineWidth = 3\n          context.strokeStyle = \"red\"\n          context.fillStyle = \"red\"\n          context.stroke()\n          context.font = \"40px Arial\" // Set the font size and font family\n          context.fillText(text, px, py > 15 ? py - 5 : py + 15)\n        })\n\n        // Resolve the Promise after the image has loaded and drawn\n        resolve()\n      }\n\n      img.src = \"data:image/jpeg;base64,\" + this.props.image\n    })\n  }\n\n  onChange = (annotation) => {\n    this.setState({ annotation })\n  }\n\n  onSubmit = (annotation) => {\n    const { geometry, data } = annotation\n\n    this.setState({\n      annotation: {},\n      annotations: this.state.annotations.concat({\n        geometry,\n        data: {\n          ...data,\n          id: Math.random(),\n        },\n      }),\n    })\n  }\n  onChangeType = (e) => {\n    this.setState({\n      annotation: {},\n      type: e.currentTarget.innerHTML,\n    })\n  }\n  deleteAnnotation = (id) => {\n    this.setState({\n      annotations: this.state.annotations.filter((annotation) => {\n        return annotation.data.id !== id\n      }),\n    })\n  }\n\n  downloadImage = async () => {\n    // First, render the image to the canvas\n    await this.renderImageToCanvas()\n\n    // Then, create a data URL of the canvas content\n    const dataUrl = this.canvasRef.current?.toDataURL()\n\n    // Create a new 'a' element\n    const link = document.createElement(\"a\")\n    link.href = dataUrl\n\n    // Set the download attribute with the desired file name\n    link.download = \"image.png\"\n\n    // Trigger a click on the link to start the download\n    link.click()\n  }\n  render() {\n    const imageSrc = \"data:image/jpeg;base64,\" + this.props.image\n\n    return (\n      <>\n        <div\n          className=\"hoverDiv\"\n          onMouseMove={this.onMouseMove}\n          onMouseOut={this.onMouseOut}\n        >\n          <Annotation\n            src={imageSrc}\n            alt=\"pcb\"\n            annotations={this.state.annotations}\n            type={this.state.type}\n            value={this.state.annotation}\n            onChange={this.onChange}\n            onSubmit={this.onSubmit}\n            renderEditor={(props) => {\n              const labels = this.props.labels\n              return renderEditor(props, labels)\n            }}\n            renderContent={renderContent}\n            renderHighlight={({ annotation, active }) => {\n              return renderHighlight({\n                annotation,\n                active,\n                deleteAnnotation: this.deleteAnnotation,\n              })\n            }}\n          />\n          {this.state.showDiv && (\n            <div\n              className=\"hover-info\"\n              style={{\n                top: `${this.state.coords.y + 30}px`,\n                left: `${this.state.coords.x + 30}px`,\n              }}\n              // style={{\n              //   top: `${50}px`,\n              //   left: `${20}px`,\n              // }}\n            >\n              <DataDiv\n                labels={this.props.labels}\n                annotations={this.state.annotations}\n              />\n            </div>\n          )}\n        </div>\n        <button className=\"downloadButton\" onClick={this.downloadImage}>\n          Download\n        </button>\n\n        <canvas ref={this.canvasRef} style={{ display: \"none\" }} />\n      </>\n    )\n  }\n}\n\nclass App extends StreamlitComponentBase {\n  render() {\n    const { image, labels, detectedAnotations } = this.props.args\n\n    return (\n      <MyComponent\n        image={image}\n        labels={labels}\n        detectedAnotations={detectedAnotations}\n      />\n    )\n  }\n}\n\nexport default withStreamlitConnection(App)\n\nfunction generateRandomHexCode() {\n  let hexCode = \"#\"\n\n  // Generate a random hex color code\n  for (let i = 0; i < 6; i++) {\n    // Generate a random number between 0 and 15, convert to hex\n    let hexSegment = Math.floor(Math.random() * 16).toString(16)\n\n    // Add the segment to the hex code\n    hexCode += hexSegment\n  }\n\n  return hexCode\n}\n\n// {\n//   \"annotations\": [\n//       {\n//           \"geometry\": {\n//               \"type\": \"RECTANGLE\",\n//               \"x\": 13.494318181818182,\n//               \"y\": 21.284080914687774,\n//               \"width\": 12.642045454545455,\n//               \"height\": 27.08883025505717\n//           },\n//           \"data\": {\n//               \"text\": \"new\",\n//               \"id\": 0.3982473149726953\n//           }\n//       }\n//   ],\n//   \"annotation\": {}\n// }\n\n// {\n//   \"annotations\": [],\n//   \"annotation\": {\n//       \"selection\": {\n//           \"mode\": \"EDITING\",\n//           \"anchorX\": 16.90340909090909,\n//           \"anchorY\": 29.37554969217238,\n//           \"showEditor\": true\n//       },\n//       \"geometry\": {\n//           \"type\": \"RECTANGLE\",\n//           \"x\": 16.90340909090909,\n//           \"y\": 29.37554969217238,\n//           \"width\": 9.65909090909091,\n//           \"height\": 5.980650835532106\n//       },\n//       \"data\": {\n//           \"text\": \"option1\"\n//       }\n//   }\n// }\n\n// {\n//   \"annotations\": [],\n//   \"annotation\": {\n//       \"selection\": {\n//           \"mode\": \"EDITING\",\n//           \"anchorX\": 17.1875,\n//           \"anchorY\": 29.551451187335093,\n//           \"showEditor\": true\n//       },\n//       \"geometry\": {\n//           \"type\": \"RECTANGLE\",\n//           \"x\": 17.1875,\n//           \"y\": 29.551451187335093,\n//           \"width\": 9.65909090909091,\n//           \"height\": 5.980650835532099\n//       },\n//       \"data\": {\n//           \"text\": \"option1\"\n//       }\n//   }\n// }\n\n// {\n//   \"annotations\": [\n//       {\n//           \"geometry\": {\n//               \"type\": \"RECTANGLE\",\n//               \"x\": 1.4204545454545454,\n//               \"y\": 1.58311345646438,\n//               \"width\": 49.85795454545455,\n//               \"height\": 50.131926121372025\n//           },\n//           \"data\": {\n//               \"text\": \"option1\",\n//               \"id\": 0.42675792821517256\n//           }\n//       },\n//       {\n//           \"geometry\": {\n//               \"type\": \"RECTANGLE\",\n//               \"x\": 51.42045454545454,\n//               \"y\": 49.780123131046615,\n//               \"width\": 48.295454545454554,\n//               \"height\": 49.42832014072119\n//           },\n//           \"data\": {\n//               \"text\": \"option2\",\n//               \"id\": 0.1293396936727722\n//           }\n//       }\n//   ],\n//   \"annotation\": {\n//       \"selection\": {\n//           \"mode\": \"EDITING\",\n//           \"anchorX\": 98.7215909090909,\n//           \"anchorY\": 1.2313104661389622,\n//           \"showEditor\": true\n//       },\n//       \"geometry\": {\n//           \"type\": \"RECTANGLE\",\n//           \"x\": 51.42045454545454,\n//           \"y\": 1.2313104661389622,\n//           \"width\": 47.30113636363637,\n//           \"height\": 48.37291116974494\n//       },\n//       \"data\": {\n//           \"text\": \"option3\"\n//       }\n//   }\n// }\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}