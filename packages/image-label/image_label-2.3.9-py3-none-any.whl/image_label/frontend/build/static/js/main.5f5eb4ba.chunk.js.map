{"version":3,"sources":["MyComponent.jsx","index.jsx"],"names":["Box","_ref","children","geometry","style","_jsx","_objectSpread","position","left","concat","x","top","y","height","width","renderContent","_ref3","annotation","background","color","padding","fontSize","data","text","id","MyComponent","_Component","_inherits","_super","_createSuper","props","_this$props","_this","_classCallCheck","call","canvasRef","React","createRef","renderImageToCanvas","Promise","resolve","canvas","current","context","getContext","img","Image","onload","drawImage","state","annotations","forEach","px","py","pwidth","pheight","beginPath","rect","lineWidth","strokeStyle","fillStyle","stroke","font","fillText","src","image","onChange","setState","onSubmit","Math","random","onChangeType","e","type","currentTarget","innerHTML","deleteAnnotation","filter","downloadImage","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$canvasRef$curre","dataUrl","link","wrap","_context","prev","next","toDataURL","document","createElement","href","download","click","stop","_toConsumableArray","detectedAnotations","_createClass","key","value","_this2","imageSrc","this","_jsxs","Annotation","alt","renderEditor","labels","className","target","map","label","onClick","renderHighlight","_ref5","_ref2","active","border","generateRandomHexCode","console","log","ref","display","Component","App","_StreamlitComponentBa","_super2","apply","arguments","_this$props$args","args","StreamlitComponentBase","withStreamlitConnection","hexCode","i","floor","toString","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f5eb4ba.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { Component } from \"react\"\nimport \"./label-image.css\"\n\n// import Button from \"./Button\"\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase {\n//   state = { numClicks: 0, isFocused: false }\n\n//   render = () => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   onClicked = () => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       (prevState) => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   _onFocus = () => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   _onBlur = () => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React from \"react\"\n\n// class MyComponent extends StreamlitComponentBase {\n//   state = { numClicks: 0, isFocused: false }\n\n//   render = () => {\n//     const props = this.props\n//     const { image, labels } = props.args\n//     console.log({ labels })\n//     // prepend the proper prefix for base64 encoded jpeg images\n//     const imageSrc = \"data:image/jpeg;base64,\" + image\n//     console.log(props)\n//     return (\n//       <div>\n//         <img src={imageSrc} alt=\"My custom component image\" width=\"100%\" />\n//       </div>\n//     )\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent)\nimport Annotation from \"react-image-annotation\"\n\nconst Box = ({ children, geometry, style }) => (\n  <div\n    style={{\n      ...style,\n      position: \"absolute\",\n      left: `${geometry.x}%`,\n      top: `${geometry.y}%`,\n      height: `${geometry.height}%`,\n      width: `${geometry.width}%`,\n    }}\n  >\n    {children}\n  </div>\n)\n\nfunction renderHighlight({ annotation, active, deleteAnnotation }) {\n  const { geometry } = annotation\n  if (!geometry) return null\n  return (\n    <Box\n      key={annotation.data.id}\n      geometry={geometry}\n      style={{\n        border: `solid 1px ${active ? \"#3e8e41\" : generateRandomHexCode()}`,\n        // boxShadow: active && \"0 0 20px 20px rgba(255, 255, 255, 0.3) inset\",\n      }}\n    >\n      {active && (\n        <button\n          className=\"deleteAnnotationButton\"\n          onClick={() => {\n            console.log(\"delete\")\n            deleteAnnotation(annotation.data.id)\n          }}\n        >\n          X\n        </button>\n      )}\n    </Box>\n  )\n}\n\nfunction renderContent({ annotation }) {\n  const { geometry } = annotation\n  return (\n    <div\n      key={annotation.data.id}\n      style={{\n        background: \"black\",\n        color: \"white\",\n        padding: 10,\n        position: \"absolute\",\n        fontSize: 12,\n        left: `${geometry.x}%`,\n        top: `${geometry.y + geometry.height}%`,\n      }}\n    >\n      {annotation.data && annotation.data.text}\n    </div>\n  )\n}\nfunction renderEditor(props, labels) {\n  const { geometry } = props.annotation\n  if (!geometry) return null\n  return (\n    <div\n      className=\"holder\"\n      style={{\n        background: \"rgba(0, 0, 0, 0.15)\",\n        left: `${geometry.x > 80 ? 75 : geometry.x}%`,\n        top: `${geometry.y > 85 ? 85 : geometry.y}%`,\n      }}\n    >\n      <select\n        className=\"selectItem\"\n        onChange={(e) => {\n          props.onChange({\n            ...props.annotation,\n            data: {\n              ...props.annotation.data,\n              text: e.target.value,\n            },\n          })\n        }}\n      >\n        <option value=\"\">Select...</option>\n        {labels.map((label) => (\n          <option key={label} value={label}>\n            {label}\n          </option>\n        ))}\n      </select>\n      <button className=\"addLabelButton\" onClick={props.onSubmit}>\n        Add\n      </button>\n    </div>\n  )\n}\n\nclass MyComponent extends Component {\n  // state = {\n  //   annotations: [],\n  //   annotation: {},\n  // }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      annotations: [...this.props?.detectedAnotations],\n      annotation: {},\n    }\n  }\n  canvasRef = React.createRef()\n\n  renderImageToCanvas = () => {\n    return new Promise((resolve) => {\n      const canvas = this.canvasRef.current\n      const context = canvas.getContext(\"2d\")\n      const img = new Image()\n\n      img.onload = () => {\n        canvas.width = img.width\n        canvas.height = img.height\n        context.drawImage(img, 0, 0, img.width, img.height)\n\n        this.state.annotations.forEach((annotation) => {\n          const { geometry, data } = annotation\n          const { x, y, width, height } = geometry\n          const { text } = data\n\n          const [px, py, pwidth, pheight] = [\n            (x / 100) * img.width,\n            (y / 100) * img.height,\n            (width / 100) * img.width,\n            (height / 100) * img.height,\n          ]\n\n          context.beginPath()\n          context.rect(px, py, pwidth, pheight)\n          context.lineWidth = 3\n          context.strokeStyle = \"red\"\n          context.fillStyle = \"red\"\n          context.stroke()\n          context.font = \"40px Arial\" // Set the font size and font family\n          context.fillText(text, px, py > 15 ? py - 5 : py + 15)\n        })\n\n        // Resolve the Promise after the image has loaded and drawn\n        resolve()\n      }\n\n      img.src = \"data:image/jpeg;base64,\" + this.props.image\n    })\n  }\n\n  onChange = (annotation) => {\n    this.setState({ annotation })\n  }\n\n  onSubmit = (annotation) => {\n    const { geometry, data } = annotation\n\n    this.setState({\n      annotation: {},\n      annotations: this.state.annotations.concat({\n        geometry,\n        data: {\n          ...data,\n          id: Math.random(),\n        },\n      }),\n    })\n  }\n  onChangeType = (e) => {\n    this.setState({\n      annotation: {},\n      type: e.currentTarget.innerHTML,\n    })\n  }\n  deleteAnnotation = (id) => {\n    this.setState({\n      annotations: this.state.annotations.filter((annotation) => {\n        return annotation.data.id !== id\n      }),\n    })\n  }\n  downloadImage = async () => {\n    // First, render the image to the canvas\n    await this.renderImageToCanvas()\n\n    // Then, create a data URL of the canvas content\n    const dataUrl = this.canvasRef.current?.toDataURL()\n\n    // Create a new 'a' element\n    const link = document.createElement(\"a\")\n    link.href = dataUrl\n\n    // Set the download attribute with the desired file name\n    link.download = \"image.png\"\n\n    // Trigger a click on the link to start the download\n    link.click()\n  }\n  render() {\n    const imageSrc = \"data:image/jpeg;base64,\" + this.props.image\n\n    return (\n      <div>\n        <Annotation\n          src={imageSrc}\n          alt=\"pcb\"\n          annotations={this.state.annotations}\n          type={this.state.type}\n          value={this.state.annotation}\n          onChange={this.onChange}\n          onSubmit={this.onSubmit}\n          renderEditor={(props) => {\n            const labels = this.props.labels\n            return renderEditor(props, labels)\n          }}\n          renderContent={renderContent}\n          renderHighlight={({ annotation, active }) => {\n            return renderHighlight({\n              annotation,\n              active,\n              deleteAnnotation: this.deleteAnnotation,\n            })\n          }}\n        />\n        <button className=\"downloadButton\" onClick={this.downloadImage}>\n          Download\n        </button>\n\n        <canvas ref={this.canvasRef} style={{ display: \"none\" }} />\n      </div>\n    )\n  }\n}\n\nclass App extends StreamlitComponentBase {\n  render() {\n    const { image, labels, detectedAnotations } = this.props.args\n\n    return (\n      <MyComponent\n        image={image}\n        labels={labels}\n        detectedAnotations={detectedAnotations}\n      />\n    )\n  }\n}\n\nexport default withStreamlitConnection(App)\n\nfunction generateRandomHexCode() {\n  let hexCode = \"#\"\n\n  // Generate a random hex color code\n  for (let i = 0; i < 6; i++) {\n    // Generate a random number between 0 and 15, convert to hex\n    let hexSegment = Math.floor(Math.random() * 16).toString(16)\n\n    // Add the segment to the hex code\n    hexCode += hexSegment\n  }\n\n  return hexCode\n}\n\n// {\n//   \"annotations\": [\n//       {\n//           \"geometry\": {\n//               \"type\": \"RECTANGLE\",\n//               \"x\": 13.494318181818182,\n//               \"y\": 21.284080914687774,\n//               \"width\": 12.642045454545455,\n//               \"height\": 27.08883025505717\n//           },\n//           \"data\": {\n//               \"text\": \"new\",\n//               \"id\": 0.3982473149726953\n//           }\n//       }\n//   ],\n//   \"annotation\": {}\n// }\n\n// {\n//   \"annotations\": [],\n//   \"annotation\": {\n//       \"selection\": {\n//           \"mode\": \"EDITING\",\n//           \"anchorX\": 16.90340909090909,\n//           \"anchorY\": 29.37554969217238,\n//           \"showEditor\": true\n//       },\n//       \"geometry\": {\n//           \"type\": \"RECTANGLE\",\n//           \"x\": 16.90340909090909,\n//           \"y\": 29.37554969217238,\n//           \"width\": 9.65909090909091,\n//           \"height\": 5.980650835532106\n//       },\n//       \"data\": {\n//           \"text\": \"option1\"\n//       }\n//   }\n// }\n\n// {\n//   \"annotations\": [],\n//   \"annotation\": {\n//       \"selection\": {\n//           \"mode\": \"EDITING\",\n//           \"anchorX\": 17.1875,\n//           \"anchorY\": 29.551451187335093,\n//           \"showEditor\": true\n//       },\n//       \"geometry\": {\n//           \"type\": \"RECTANGLE\",\n//           \"x\": 17.1875,\n//           \"y\": 29.551451187335093,\n//           \"width\": 9.65909090909091,\n//           \"height\": 5.980650835532099\n//       },\n//       \"data\": {\n//           \"text\": \"option1\"\n//       }\n//   }\n// }\n\n// {\n//   \"annotations\": [\n//       {\n//           \"geometry\": {\n//               \"type\": \"RECTANGLE\",\n//               \"x\": 1.4204545454545454,\n//               \"y\": 1.58311345646438,\n//               \"width\": 49.85795454545455,\n//               \"height\": 50.131926121372025\n//           },\n//           \"data\": {\n//               \"text\": \"option1\",\n//               \"id\": 0.42675792821517256\n//           }\n//       },\n//       {\n//           \"geometry\": {\n//               \"type\": \"RECTANGLE\",\n//               \"x\": 51.42045454545454,\n//               \"y\": 49.780123131046615,\n//               \"width\": 48.295454545454554,\n//               \"height\": 49.42832014072119\n//           },\n//           \"data\": {\n//               \"text\": \"option2\",\n//               \"id\": 0.1293396936727722\n//           }\n//       }\n//   ],\n//   \"annotation\": {\n//       \"selection\": {\n//           \"mode\": \"EDITING\",\n//           \"anchorX\": 98.7215909090909,\n//           \"anchorY\": 1.2313104661389622,\n//           \"showEditor\": true\n//       },\n//       \"geometry\": {\n//           \"type\": \"RECTANGLE\",\n//           \"x\": 51.42045454545454,\n//           \"y\": 1.2313104661389622,\n//           \"width\": 47.30113636363637,\n//           \"height\": 48.37291116974494\n//       },\n//       \"data\": {\n//           \"text\": \"option3\"\n//       }\n//   }\n// }\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}