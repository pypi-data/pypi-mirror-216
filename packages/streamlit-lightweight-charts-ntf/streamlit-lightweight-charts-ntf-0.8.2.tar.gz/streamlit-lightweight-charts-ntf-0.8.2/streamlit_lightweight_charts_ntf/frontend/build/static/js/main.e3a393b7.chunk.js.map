{"version":3,"sources":["LightweightCharts.tsx","index.tsx"],"names":["LightweightChartsMultiplePanes","chartsData","useRenderData","args","chartsContainerRef","useRef","chartElRefs","Array","length","fill","chartRefs","useEffect","find","ref","current","forEach","i","_step","chart","createChart","_objectSpread","height","width","clientWidth","_iterator","_createForOfIteratorHelper","series","s","n","done","value","chartSeries","concat","type","options","priceScale","priceScaleId","applyOptions","setData","data","markers","setMarkers","err","e","f","subscribeClick","param","point","time","charts","el","prices","idx","values","_toConsumableArray","seriesData","push","title","Streamlit","setComponentValue","timeScale","fitContent","map","c","subscribeVisibleTimeRangeChange","filter","rightOffset","scrollPosition","subscribeVisibleLogicalRangeChange","range","setVisibleLogicalRange","from","to","remove","React","createElement","id","key","ReactDOM","render","StrictMode","StreamlitProvider","LightweightCharts","document","getElementById"],"mappings":"mRAmJeA,EAnImC,WAGhD,IACMC,EADaC,0BACWC,KAAa,OAErCC,EAAqBC,iBAAuB,MAC5CC,EAAcC,MAAMN,EAAWO,QAAQC,KAAKJ,iBAAuB,OACnEK,EAAYL,iBAAoB,IA6GpC,OA3GAM,qBAAU,WACR,IAAIL,EAAYM,MAAK,SAACC,GAAG,OAAMA,EAAIC,WAAnC,CAEAR,EAAYS,SAAQ,SAACF,EAAKG,GACxB,IAQyCC,EARnCC,EAAmBR,EAAUI,QAAQE,GAAKG,YAC9CN,EAAIC,QAAOM,YAAA,CACTC,OAAQ,IACRC,MAAOhB,EAAYU,GAAGF,QAAQS,aAC3BtB,EAAWe,GAAGE,QAEnBM,EAAAC,YAEmBxB,EAAWe,GAAGU,QAAM,IAAzC,IAAAF,EAAAG,MAAAV,EAAAO,EAAAI,KAAAC,MAA0C,CAAC,IAAhCH,EAAMT,EAAAa,MAGTC,EAAcb,EAAM,MAADc,OAAON,EAAOO,KAAI,WAAUP,EAAOQ,SAEzDR,EAAOS,YACRjB,EAAMiB,WAAWT,EAAOQ,QAAQE,cAAgB,IAAIC,aAAaX,EAAOS,YAE1EJ,EAAYO,QAAQZ,EAAOa,MAExBb,EAAOc,SACRT,EAAYU,WAAWf,EAAOc,UAIlC,MAAAE,GAAAlB,EAAAmB,EAAAD,GAAA,QAAAlB,EAAAoB,IACA1B,EAAM2B,gBAAe,SAACC,GACpB,GAAKA,EAAMC,OAAUD,EAAME,KAA3B,CAEA,IAAMC,EAAgB,GACtBhD,EAAWc,SAAQ,SAACmC,GAClB,IAAMC,EAAgB,GACtBD,EAAGxB,OAAOX,SAAQ,SAACW,EAAa0B,GAE9B,IAAMC,EAASC,YAAKR,EAAMS,WAAWF,UAAWD,GAChDD,EAAOK,KAAK,CACV,MAAS9B,EAAO+B,MAChB,KAAQ/B,EAAOO,KACfoB,cAGJJ,EAAOO,KAAK,CACV,KAAQV,EAAME,KACdG,cAIJO,YAAUC,kBAAkBV,OAa9B/B,EAAM0C,YAAYC,gBAIpB,IAAMZ,EAASvC,EAAUI,QAAQgD,KAAI,SAACC,GAAC,OAAKA,KAiC5C,OA/BG9D,EAAWO,OAAS,GAErByC,EAAOlC,SAAQ,SAACG,GACTA,IAELA,EAAM0C,YAAYI,iCAAgC,SAACrB,GACjDM,EACGgB,QAAO,SAACF,GAAC,OAAKA,IAAM7C,KACpBH,SAAQ,SAACgD,GACRA,EAAEH,YAAYvB,aAAa,CACzB6B,YAAahD,EAAM0C,YAAYO,yBAKvCjD,EAAM0C,YAAYQ,oCAAmC,SAACC,GAChDA,GACFpB,EACGgB,QAAO,SAACF,GAAC,OAAKA,IAAM7C,KACpBH,SAAQ,SAACgD,GACRA,EAAEH,YAAYU,uBAAuB,CACnCC,KAAW,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,KACbC,GAAS,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,eASlB,WACLvB,EAAOlC,SAAQ,SAACG,GACdA,EAAMuD,gBAIT,CAAExE,EAAYK,EAAaI,IAG5BgE,IAAAC,cAAA,OAAK9D,IAAKT,GACPE,EAAYwD,KAAI,SAACjD,EAAKG,GAAC,OACtB0D,IAAAC,cAAA,OACE9D,IAAKA,EACL+D,GAAE,sBAAA5C,OAAwBhB,GAC1B6D,IAAG,sBAAA7C,OAAwBhB,UCtIvC8D,IAASC,OACPL,IAAAC,cAACD,IAAMM,WAAU,KACfN,IAAAC,cAACM,oBAAiB,KAChBP,IAAAC,cAACO,EAAiB,QAGtBC,SAASC,eAAe,W","file":"static/js/main.e3a393b7.chunk.js","sourcesContent":["import { Streamlit } from \"streamlit-component-lib\"\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport {\n  ChartOptions,\n  createChart,\n  IChartApi,\n  MouseEventParams,\n} from \"lightweight-charts\"\n\nimport React, { useRef, useEffect } from \"react\"\n\ninterface ChartsDataItems {\n  chart: ChartOptions;\n  series: any;\n}\n\nconst LightweightChartsMultiplePanes: React.VFC = () => {\n\n  // { args: object, disabled: boolean, theme: object } from Streamlit\n  const renderData = useRenderData()\n  const chartsData = renderData.args[\"charts\"]\n\n  const chartsContainerRef = useRef<HTMLDivElement>(null)\n  const chartElRefs = Array(chartsData.length).fill(useRef<HTMLDivElement>(null))\n  const chartRefs = useRef<IChartApi[]>([])\n\n    useEffect(() => {\n      if (chartElRefs.find((ref) => !ref.current)) return;\n\n      chartElRefs.forEach((ref, i) => {\n        const chart: IChartApi = chartRefs.current[i] = createChart(\n          ref.current as HTMLDivElement,{\n            height: 300,\n            width: chartElRefs[i].current.clientWidth,\n            ...chartsData[i].chart,\n          }\n        );\n\n        for (const series of chartsData[i].series){\n\n          // @ts-ignore - dynamic access to IChartApi methods (e.g.: chart.addLineSeries() )\n          const chartSeries = chart[`add${series.type}Series`](series.options)\n\n          if(series.priceScale)\n            chart.priceScale(series.options.priceScaleId || '').applyOptions(series.priceScale)\n\n          chartSeries.setData(series.data)\n\n          if(series.markers)\n            chartSeries.setMarkers(series.markers)\n\n        }\n\n        // user clicked the 'pointer'\n        chart.subscribeClick((param: MouseEventParams) => {\n          if (!param.point || !param.time) { return }\n\n          const charts: any[] = []\n          chartsData.forEach((el: ChartsDataItems) => {\n            const prices: any[] = []\n            el.series.forEach((series: any, idx: number) => {\n              // @ts-ignore - get the whole set by idx \n              const values = [ ...param.seriesData.values() ][idx]\n              prices.push({\n                'title': series.title,\n                'type': series.type,\n                values\n              })\n            })\n            charts.push({\n              'time': param.time,\n              prices\n            })\n          })\n\n          Streamlit.setComponentValue(charts)\n\n        })\n\n        // user moved the 'pointer'\n        // chart.subscribeCrosshairMove(param => {\n        //   console.log('CrossHair',param)\n        // })\n\n        // chart.timeScale().subscribeVisibleTimeRangeChange(param => {\n        //   console.log('TimeRangeChange',param)\n        // });\n\n        chart.timeScale().fitContent();\n\n      })\n  \n      const charts = chartRefs.current.map((c) => c as IChartApi);\n      \n      if(chartsData.length > 1){ // sync charts\n\n        charts.forEach((chart) => {\n          if (!chart) return;\n\n          chart.timeScale().subscribeVisibleTimeRangeChange((e) => {\n            charts\n              .filter((c) => c !== chart)\n              .forEach((c) => {\n                c.timeScale().applyOptions({\n                  rightOffset: chart.timeScale().scrollPosition()\n                })\n              })\n          })\n\n          chart.timeScale().subscribeVisibleLogicalRangeChange((range) => {\n            if (range) {\n              charts\n                .filter((c) => c !== chart)\n                .forEach((c) => {\n                  c.timeScale().setVisibleLogicalRange({\n                    from: range?.from,\n                    to: range?.to\n\n      }) }) } }) }) }\n\n      // const handleResize = () => {\n      //   chart.applyOptions({ width: chartsContainerRef?.current?.clientWidth })\n      // }\n      // window.addEventListener('resize', handleResize)\n\n      return () => { // required because how useEffect() works\n        charts.forEach((chart) => {\n          chart.remove()\n        })\n      }\n\n    }, [ chartsData, chartElRefs, chartRefs])\n\n    return (\n      <div ref={chartsContainerRef}>\n        {chartElRefs.map((ref, i) => (\n          <div\n            ref={ref}\n            id={`lightweight-charts-${i}`}\n            key={`lightweight-charts-${i}`}\n          />\n        ))}\n      </div>\n    )\n\n}\n\nexport default LightweightChartsMultiplePanes\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport LightweightCharts from \"./LightweightCharts\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <LightweightCharts />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}