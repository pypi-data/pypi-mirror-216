# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_error import HttpError
from ...types.http_validation_error import HttpValidationError
from ...types.index_metadata import IndexMetadata


class SatelliteClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    def get_remote_sensing_indices(
        self,
        project_id: str,
        *,
        index: str,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
    ) -> IndexMetadata:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"projects/{project_id}/satellite/index"),
            params={"index": index, "start_date": start_date, "end_date": end_date},
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(IndexMetadata, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(HttpError, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSatelliteClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    async def get_remote_sensing_indices(
        self,
        project_id: str,
        *,
        index: str,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
    ) -> IndexMetadata:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"projects/{project_id}/satellite/index"),
                params={"index": index, "start_date": start_date, "end_date": end_date},
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(IndexMetadata, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(HttpError, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
