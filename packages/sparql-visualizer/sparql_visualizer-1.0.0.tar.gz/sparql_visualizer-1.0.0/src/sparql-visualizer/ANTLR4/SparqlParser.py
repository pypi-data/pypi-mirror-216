# Generated from Sparql.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO
allowsBlankNodes = True

def serializedATN():
    return [
        4,1,290,1528,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,1,0,1,0,3,
        0,275,8,0,1,1,1,1,1,1,1,1,1,1,3,1,282,8,1,1,1,1,1,1,2,1,2,5,2,288,
        8,2,10,2,12,2,291,9,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,5,5,302,
        8,5,10,5,12,5,305,9,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,3,
        7,317,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,326,8,7,11,7,12,7,327,
        1,7,3,7,331,8,7,1,8,1,8,1,8,5,8,336,8,8,10,8,12,8,339,9,8,1,8,1,
        8,1,8,1,8,5,8,345,8,8,10,8,12,8,348,9,8,1,8,1,8,1,8,3,8,353,8,8,
        1,8,1,8,3,8,357,8,8,1,9,1,9,4,9,361,8,9,11,9,12,9,362,1,9,3,9,366,
        8,9,1,9,5,9,369,8,9,10,9,12,9,372,9,9,1,9,3,9,375,8,9,1,9,1,9,1,
        10,1,10,5,10,381,8,10,10,10,12,10,384,9,10,1,10,1,10,1,10,1,11,1,
        11,1,11,3,11,392,8,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,3,
        15,402,8,15,1,15,1,15,1,16,3,16,407,8,16,1,16,3,16,410,8,16,1,16,
        3,16,413,8,16,1,16,3,16,416,8,16,1,17,1,17,1,17,4,17,421,8,17,11,
        17,12,17,422,1,18,1,18,1,18,1,18,1,18,1,18,3,18,431,8,18,1,18,1,
        18,1,18,3,18,436,8,18,1,19,1,19,4,19,440,8,19,11,19,12,19,441,1,
        20,1,20,1,21,1,21,1,21,4,21,449,8,21,11,21,12,21,450,1,22,1,22,1,
        22,1,22,3,22,457,8,22,3,22,459,8,22,1,23,1,23,3,23,463,8,23,1,23,
        1,23,3,23,467,8,23,3,23,469,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,
        26,1,26,3,26,479,8,26,1,27,1,27,1,27,1,27,3,27,485,8,27,3,27,487,
        8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
        500,8,28,1,29,1,29,3,29,504,8,29,1,29,1,29,1,29,3,29,509,8,29,1,
        30,1,30,3,30,513,8,30,1,30,1,30,1,31,1,31,3,31,519,8,31,1,31,1,31,
        1,32,1,32,3,32,525,8,32,1,32,1,32,1,33,1,33,3,33,531,8,33,1,33,1,
        33,1,33,1,33,1,34,1,34,3,34,539,8,34,1,34,1,34,1,34,1,34,1,35,1,
        35,3,35,547,8,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,
        37,1,38,1,38,1,38,1,39,1,39,3,39,564,8,39,1,39,1,39,3,39,568,8,39,
        1,39,3,39,571,8,39,1,39,5,39,574,8,39,10,39,12,39,577,9,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,
        592,8,42,1,43,1,43,3,43,596,8,43,1,43,3,43,599,8,43,1,44,1,44,1,
        44,1,45,1,45,1,45,1,45,3,45,608,8,45,1,46,1,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,48,3,48,619,8,48,1,48,1,48,3,48,623,8,48,1,48,3,48,
        626,8,48,5,48,628,8,48,10,48,12,48,631,9,48,1,49,1,49,1,49,1,49,
        1,50,1,50,1,50,3,50,640,8,50,3,50,642,8,50,1,51,1,51,1,51,3,51,647,
        8,51,1,51,1,51,1,52,3,52,652,8,52,1,52,1,52,3,52,656,8,52,1,52,3,
        52,659,8,52,5,52,661,8,52,10,52,12,52,664,9,52,1,53,1,53,1,53,3,
        53,669,8,53,3,53,671,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,681,8,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,3,57,
        692,8,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,
        1,59,1,59,1,60,1,60,3,60,709,8,60,1,61,1,61,1,61,5,61,714,8,61,10,
        61,12,61,717,9,61,1,61,1,61,1,62,1,62,1,62,5,62,724,8,62,10,62,12,
        62,727,9,62,1,62,3,62,730,8,62,1,62,1,62,1,62,5,62,735,8,62,10,62,
        12,62,738,9,62,1,62,1,62,5,62,742,8,62,10,62,12,62,745,9,62,1,62,
        1,62,1,63,1,63,1,63,1,63,1,63,3,63,754,8,63,1,64,1,64,1,64,1,65,
        1,65,1,65,5,65,762,8,65,10,65,12,65,765,9,65,1,66,1,66,1,66,1,67,
        1,67,1,67,3,67,773,8,67,1,68,1,68,1,68,1,69,1,69,1,69,3,69,781,8,
        69,1,69,1,69,1,69,5,69,786,8,69,10,69,12,69,789,9,69,1,69,1,69,3,
        69,793,8,69,1,70,1,70,1,70,1,70,1,70,5,70,800,8,70,10,70,12,70,803,
        9,70,1,70,1,70,3,70,807,8,70,1,71,1,71,3,71,811,8,71,1,71,1,71,1,
        72,1,72,1,72,3,72,818,8,72,3,72,820,8,72,1,73,1,73,1,73,1,73,1,73,
        1,73,3,73,828,8,73,1,74,3,74,831,8,74,1,75,1,75,1,75,1,75,1,75,1,
        75,3,75,839,8,75,5,75,841,8,75,10,75,12,75,844,9,75,1,76,1,76,1,
        76,3,76,849,8,76,1,77,1,77,1,77,5,77,854,8,77,10,77,12,77,857,9,
        77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,3,79,867,8,79,1,80,3,
        80,870,8,80,1,81,1,81,3,81,874,8,81,1,81,1,81,1,81,1,81,3,81,880,
        8,81,1,81,1,81,3,81,884,8,81,5,81,886,8,81,10,81,12,81,889,9,81,
        1,82,1,82,1,83,1,83,1,84,1,84,1,84,5,84,898,8,84,10,84,12,84,901,
        9,84,1,85,1,85,1,86,1,86,1,87,1,87,1,87,5,87,910,8,87,10,87,12,87,
        913,9,87,1,88,1,88,1,88,5,88,918,8,88,10,88,12,88,921,9,88,1,89,
        1,89,3,89,925,8,89,1,90,1,90,1,90,3,90,930,8,90,1,91,1,91,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,943,8,92,1,93,1,93,1,
        93,1,93,1,93,5,93,950,8,93,10,93,12,93,953,9,93,3,93,955,8,93,1,
        93,3,93,958,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,967,8,94,
        3,94,969,8,94,1,95,1,95,3,95,973,8,95,1,96,1,96,1,96,1,96,1,97,1,
        97,3,97,981,8,97,1,98,1,98,1,98,1,98,1,99,1,99,4,99,989,8,99,11,
        99,12,99,990,1,99,1,99,1,100,1,100,4,100,997,8,100,11,100,12,100,
        998,1,100,1,100,1,101,1,101,3,101,1005,8,101,1,102,1,102,3,102,1009,
        8,102,1,103,1,103,3,103,1013,8,103,1,104,1,104,3,104,1017,8,104,
        1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1028,
        8,106,1,107,1,107,1,108,1,108,1,108,5,108,1035,8,108,10,108,12,108,
        1038,9,108,1,109,1,109,1,109,5,109,1043,8,109,10,109,12,109,1046,
        9,109,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,
        1068,8,111,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        3,113,1079,8,113,1,113,1,113,1,113,1,113,5,113,1085,8,113,10,113,
        12,113,1088,9,113,5,113,1090,8,113,10,113,12,113,1093,9,113,1,114,
        1,114,1,114,1,114,1,114,5,114,1100,8,114,10,114,12,114,1103,9,114,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1112,8,115,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1121,8,116,1,117,1,117,
        1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,3,118,1171,8,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1385,8,118,
        1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,1394,8,119,1,119,
        1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1405,8,120,
        1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        3,121,1418,8,121,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,
        1,123,1,124,1,124,1,124,3,124,1432,8,124,1,124,1,124,3,124,1436,
        8,124,1,124,1,124,1,124,1,124,3,124,1442,8,124,1,124,1,124,1,124,
        1,124,1,124,1,124,3,124,1450,8,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,1458,8,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,
        1466,8,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1474,8,124,
        1,124,1,124,1,124,1,124,1,124,1,124,3,124,1482,8,124,1,124,1,124,
        1,124,1,124,1,124,3,124,1489,8,124,1,124,1,124,3,124,1493,8,124,
        1,125,1,125,3,125,1497,8,125,1,126,1,126,1,126,1,126,3,126,1503,
        8,126,1,127,1,127,1,127,3,127,1508,8,127,1,128,1,128,1,129,1,129,
        1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,3,133,1522,8,133,
        1,134,1,134,1,135,1,135,1,135,0,0,136,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,0,119,1,0,1,2,1,0,3,4,1,0,5,6,1,0,7,10,1,0,12,13,1,0,16,
        17,1,0,18,19,1,0,22,23,1,0,24,25,1,0,26,27,1,0,28,29,1,0,30,31,1,
        0,32,33,1,0,34,35,1,0,36,37,1,0,38,41,1,0,42,43,1,0,44,45,1,0,46,
        47,1,0,49,50,1,0,51,52,1,0,53,54,1,0,55,56,1,0,57,58,1,0,59,60,1,
        0,61,62,1,0,63,64,1,0,65,66,1,0,67,68,1,0,69,70,1,0,71,72,1,0,73,
        74,1,0,75,76,1,0,77,78,1,0,79,80,1,0,81,82,1,0,83,84,1,0,85,86,1,
        0,87,88,1,0,90,91,1,0,92,93,1,0,94,95,1,0,96,97,1,0,98,99,1,0,100,
        101,1,0,102,103,1,0,7,8,2,0,15,15,110,111,1,0,259,260,1,0,123,124,
        1,0,125,126,1,0,128,129,1,0,130,131,1,0,132,133,1,0,134,135,1,0,
        136,137,1,0,138,139,1,0,140,141,1,0,142,143,1,0,144,145,1,0,146,
        147,1,0,148,149,1,0,150,151,1,0,152,153,1,0,154,155,1,0,156,157,
        1,0,158,159,1,0,160,161,1,0,162,163,1,0,164,165,1,0,166,167,1,0,
        168,169,1,0,170,171,1,0,172,173,1,0,174,175,1,0,176,177,1,0,178,
        179,1,0,180,181,1,0,182,183,1,0,184,185,1,0,186,187,1,0,188,189,
        1,0,190,191,1,0,192,193,1,0,194,195,1,0,196,197,1,0,198,199,1,0,
        200,201,1,0,202,203,1,0,204,205,1,0,206,207,1,0,208,209,1,0,210,
        211,1,0,212,213,1,0,214,215,1,0,216,217,1,0,218,219,1,0,220,221,
        1,0,222,223,1,0,224,225,1,0,226,227,1,0,228,229,1,0,230,231,1,0,
        232,233,1,0,234,235,1,0,236,237,1,0,238,239,1,0,240,241,1,0,242,
        243,1,0,244,245,1,0,246,247,1,0,248,249,1,0,262,264,1,0,265,267,
        1,0,268,270,1,0,251,254,1,0,272,275,1,0,256,257,2,0,258,258,280,
        280,1652,0,274,1,0,0,0,2,276,1,0,0,0,4,289,1,0,0,0,6,292,1,0,0,0,
        8,295,1,0,0,0,10,299,1,0,0,0,12,309,1,0,0,0,14,314,1,0,0,0,16,332,
        1,0,0,0,18,358,1,0,0,0,20,378,1,0,0,0,22,388,1,0,0,0,24,393,1,0,
        0,0,26,395,1,0,0,0,28,398,1,0,0,0,30,401,1,0,0,0,32,406,1,0,0,0,
        34,417,1,0,0,0,36,435,1,0,0,0,38,437,1,0,0,0,40,443,1,0,0,0,42,445,
        1,0,0,0,44,458,1,0,0,0,46,468,1,0,0,0,48,470,1,0,0,0,50,473,1,0,
        0,0,52,478,1,0,0,0,54,480,1,0,0,0,56,499,1,0,0,0,58,501,1,0,0,0,
        60,510,1,0,0,0,62,516,1,0,0,0,64,522,1,0,0,0,66,528,1,0,0,0,68,536,
        1,0,0,0,70,544,1,0,0,0,72,552,1,0,0,0,74,555,1,0,0,0,76,558,1,0,
        0,0,78,563,1,0,0,0,80,581,1,0,0,0,82,584,1,0,0,0,84,587,1,0,0,0,
        86,598,1,0,0,0,88,600,1,0,0,0,90,607,1,0,0,0,92,609,1,0,0,0,94,613,
        1,0,0,0,96,618,1,0,0,0,98,632,1,0,0,0,100,636,1,0,0,0,102,643,1,
        0,0,0,104,651,1,0,0,0,106,665,1,0,0,0,108,680,1,0,0,0,110,682,1,
        0,0,0,112,685,1,0,0,0,114,689,1,0,0,0,116,696,1,0,0,0,118,703,1,
        0,0,0,120,708,1,0,0,0,122,710,1,0,0,0,124,729,1,0,0,0,126,753,1,
        0,0,0,128,755,1,0,0,0,130,758,1,0,0,0,132,766,1,0,0,0,134,772,1,
        0,0,0,136,774,1,0,0,0,138,792,1,0,0,0,140,806,1,0,0,0,142,808,1,
        0,0,0,144,814,1,0,0,0,146,827,1,0,0,0,148,830,1,0,0,0,150,832,1,
        0,0,0,152,848,1,0,0,0,154,850,1,0,0,0,156,858,1,0,0,0,158,866,1,
        0,0,0,160,869,1,0,0,0,162,873,1,0,0,0,164,890,1,0,0,0,166,892,1,
        0,0,0,168,894,1,0,0,0,170,902,1,0,0,0,172,904,1,0,0,0,174,906,1,
        0,0,0,176,914,1,0,0,0,178,922,1,0,0,0,180,929,1,0,0,0,182,931,1,
        0,0,0,184,942,1,0,0,0,186,957,1,0,0,0,188,968,1,0,0,0,190,972,1,
        0,0,0,192,974,1,0,0,0,194,980,1,0,0,0,196,982,1,0,0,0,198,986,1,
        0,0,0,200,994,1,0,0,0,202,1004,1,0,0,0,204,1008,1,0,0,0,206,1012,
        1,0,0,0,208,1016,1,0,0,0,210,1018,1,0,0,0,212,1027,1,0,0,0,214,1029,
        1,0,0,0,216,1031,1,0,0,0,218,1039,1,0,0,0,220,1047,1,0,0,0,222,1049,
        1,0,0,0,224,1069,1,0,0,0,226,1071,1,0,0,0,228,1094,1,0,0,0,230,1111,
        1,0,0,0,232,1120,1,0,0,0,234,1122,1,0,0,0,236,1384,1,0,0,0,238,1386,
        1,0,0,0,240,1397,1,0,0,0,242,1408,1,0,0,0,244,1421,1,0,0,0,246,1424,
        1,0,0,0,248,1492,1,0,0,0,250,1494,1,0,0,0,252,1498,1,0,0,0,254,1507,
        1,0,0,0,256,1509,1,0,0,0,258,1511,1,0,0,0,260,1513,1,0,0,0,262,1515,
        1,0,0,0,264,1517,1,0,0,0,266,1521,1,0,0,0,268,1523,1,0,0,0,270,1525,
        1,0,0,0,272,275,3,2,1,0,273,275,3,54,27,0,274,272,1,0,0,0,274,273,
        1,0,0,0,275,1,1,0,0,0,276,281,3,4,2,0,277,282,3,10,5,0,278,282,3,
        16,8,0,279,282,3,18,9,0,280,282,3,20,10,0,281,277,1,0,0,0,281,278,
        1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,284,
        3,52,26,0,284,3,1,0,0,0,285,288,3,6,3,0,286,288,3,8,4,0,287,285,
        1,0,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,
        1,0,0,0,290,5,1,0,0,0,291,289,1,0,0,0,292,293,7,0,0,0,293,294,5,
        255,0,0,294,7,1,0,0,0,295,296,7,1,0,0,296,297,5,256,0,0,297,298,
        5,255,0,0,298,9,1,0,0,0,299,303,3,14,7,0,300,302,3,22,11,0,301,300,
        1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,306,
        1,0,0,0,305,303,1,0,0,0,306,307,3,30,15,0,307,308,3,32,16,0,308,
        11,1,0,0,0,309,310,3,14,7,0,310,311,3,30,15,0,311,312,3,32,16,0,
        312,313,3,52,26,0,313,13,1,0,0,0,314,316,7,2,0,0,315,317,7,3,0,0,
        316,315,1,0,0,0,316,317,1,0,0,0,317,330,1,0,0,0,318,326,3,210,105,
        0,319,320,5,11,0,0,320,321,3,214,107,0,321,322,7,4,0,0,322,323,3,
        210,105,0,323,324,5,14,0,0,324,326,1,0,0,0,325,318,1,0,0,0,325,319,
        1,0,0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,331,
        1,0,0,0,329,331,5,15,0,0,330,325,1,0,0,0,330,329,1,0,0,0,331,15,
        1,0,0,0,332,356,7,5,0,0,333,337,3,142,71,0,334,336,3,22,11,0,335,
        334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,
        340,1,0,0,0,339,337,1,0,0,0,340,341,3,30,15,0,341,342,3,32,16,0,
        342,357,1,0,0,0,343,345,3,22,11,0,344,343,1,0,0,0,345,348,1,0,0,
        0,346,344,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,
        0,349,350,7,6,0,0,350,352,5,20,0,0,351,353,3,100,50,0,352,351,1,
        0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,5,21,0,0,355,357,3,
        32,16,0,356,333,1,0,0,0,356,346,1,0,0,0,357,17,1,0,0,0,358,365,7,
        7,0,0,359,361,3,208,104,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,
        1,0,0,0,362,363,1,0,0,0,363,366,1,0,0,0,364,366,5,15,0,0,365,360,
        1,0,0,0,365,364,1,0,0,0,366,370,1,0,0,0,367,369,3,22,11,0,368,367,
        1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,374,
        1,0,0,0,372,370,1,0,0,0,373,375,3,30,15,0,374,373,1,0,0,0,374,375,
        1,0,0,0,375,376,1,0,0,0,376,377,3,32,16,0,377,19,1,0,0,0,378,382,
        7,8,0,0,379,381,3,22,11,0,380,379,1,0,0,0,381,384,1,0,0,0,382,380,
        1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,0,0,385,386,
        3,30,15,0,386,387,3,32,16,0,387,21,1,0,0,0,388,391,7,9,0,0,389,392,
        3,24,12,0,390,392,3,26,13,0,391,389,1,0,0,0,391,390,1,0,0,0,392,
        23,1,0,0,0,393,394,3,28,14,0,394,25,1,0,0,0,395,396,7,10,0,0,396,
        397,3,28,14,0,397,27,1,0,0,0,398,399,3,266,133,0,399,29,1,0,0,0,
        400,402,7,6,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,
        403,404,3,102,51,0,404,31,1,0,0,0,405,407,3,34,17,0,406,405,1,0,
        0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,3,38,19,0,409,408,1,
        0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,413,3,42,21,0,412,411,
        1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,46,23,0,415,414,
        1,0,0,0,415,416,1,0,0,0,416,33,1,0,0,0,417,418,7,11,0,0,418,420,
        7,12,0,0,419,421,3,36,18,0,420,419,1,0,0,0,421,422,1,0,0,0,422,420,
        1,0,0,0,422,423,1,0,0,0,423,35,1,0,0,0,424,436,3,236,118,0,425,436,
        3,136,68,0,426,427,5,11,0,0,427,430,3,214,107,0,428,429,7,4,0,0,
        429,431,3,210,105,0,430,428,1,0,0,0,430,431,1,0,0,0,431,432,1,0,
        0,0,432,433,5,14,0,0,433,436,1,0,0,0,434,436,3,210,105,0,435,424,
        1,0,0,0,435,425,1,0,0,0,435,426,1,0,0,0,435,434,1,0,0,0,436,37,1,
        0,0,0,437,439,7,13,0,0,438,440,3,40,20,0,439,438,1,0,0,0,440,441,
        1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,39,1,0,0,0,443,444,3,
        134,67,0,444,41,1,0,0,0,445,446,7,14,0,0,446,448,7,12,0,0,447,449,
        3,44,22,0,448,447,1,0,0,0,449,450,1,0,0,0,450,448,1,0,0,0,450,451,
        1,0,0,0,451,43,1,0,0,0,452,453,7,15,0,0,453,459,3,234,117,0,454,
        457,3,134,67,0,455,457,3,210,105,0,456,454,1,0,0,0,456,455,1,0,0,
        0,457,459,1,0,0,0,458,452,1,0,0,0,458,456,1,0,0,0,459,45,1,0,0,0,
        460,462,3,48,24,0,461,463,3,50,25,0,462,461,1,0,0,0,462,463,1,0,
        0,0,463,469,1,0,0,0,464,466,3,50,25,0,465,467,3,48,24,0,466,465,
        1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,460,1,0,0,0,468,464,
        1,0,0,0,469,47,1,0,0,0,470,471,7,16,0,0,471,472,5,262,0,0,472,49,
        1,0,0,0,473,474,7,17,0,0,474,475,5,262,0,0,475,51,1,0,0,0,476,477,
        7,18,0,0,477,479,3,120,60,0,478,476,1,0,0,0,478,479,1,0,0,0,479,
        53,1,0,0,0,480,486,3,4,2,0,481,484,3,56,28,0,482,483,5,48,0,0,483,
        485,3,54,27,0,484,482,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,486,
        481,1,0,0,0,486,487,1,0,0,0,487,55,1,0,0,0,488,500,3,58,29,0,489,
        500,3,60,30,0,490,500,3,62,31,0,491,500,3,66,33,0,492,500,3,68,34,
        0,493,500,3,70,35,0,494,500,3,64,32,0,495,500,3,72,36,0,496,500,
        3,74,37,0,497,500,3,76,38,0,498,500,3,78,39,0,499,488,1,0,0,0,499,
        489,1,0,0,0,499,490,1,0,0,0,499,491,1,0,0,0,499,492,1,0,0,0,499,
        493,1,0,0,0,499,494,1,0,0,0,499,495,1,0,0,0,499,496,1,0,0,0,499,
        497,1,0,0,0,499,498,1,0,0,0,500,57,1,0,0,0,501,503,7,19,0,0,502,
        504,7,20,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,
        508,3,266,133,0,506,507,7,21,0,0,507,509,3,88,44,0,508,506,1,0,0,
        0,508,509,1,0,0,0,509,59,1,0,0,0,510,512,7,22,0,0,511,513,7,20,0,
        0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,3,90,45,
        0,515,61,1,0,0,0,516,518,7,23,0,0,517,519,7,20,0,0,518,517,1,0,0,
        0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,3,90,45,0,521,63,1,0,0,
        0,522,524,7,24,0,0,523,525,7,20,0,0,524,523,1,0,0,0,524,525,1,0,
        0,0,525,526,1,0,0,0,526,527,3,88,44,0,527,65,1,0,0,0,528,530,7,25,
        0,0,529,531,7,20,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,
        0,0,532,533,3,86,43,0,533,534,7,26,0,0,534,535,3,86,43,0,535,67,
        1,0,0,0,536,538,7,27,0,0,537,539,7,20,0,0,538,537,1,0,0,0,538,539,
        1,0,0,0,539,540,1,0,0,0,540,541,3,86,43,0,541,542,7,26,0,0,542,543,
        3,86,43,0,543,69,1,0,0,0,544,546,7,28,0,0,545,547,7,20,0,0,546,545,
        1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,3,86,43,0,549,550,
        7,26,0,0,550,551,3,86,43,0,551,71,1,0,0,0,552,553,7,29,0,0,553,554,
        3,94,47,0,554,73,1,0,0,0,555,556,7,30,0,0,556,557,3,94,47,0,557,
        75,1,0,0,0,558,559,7,31,0,0,559,560,3,92,46,0,560,77,1,0,0,0,561,
        562,7,32,0,0,562,564,3,266,133,0,563,561,1,0,0,0,563,564,1,0,0,0,
        564,570,1,0,0,0,565,567,3,80,40,0,566,568,3,82,41,0,567,566,1,0,
        0,0,567,568,1,0,0,0,568,571,1,0,0,0,569,571,3,82,41,0,570,565,1,
        0,0,0,570,569,1,0,0,0,571,575,1,0,0,0,572,574,3,84,42,0,573,572,
        1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,
        1,0,0,0,577,575,1,0,0,0,578,579,7,6,0,0,579,580,3,102,51,0,580,79,
        1,0,0,0,581,582,7,33,0,0,582,583,3,92,46,0,583,81,1,0,0,0,584,585,
        7,34,0,0,585,586,3,92,46,0,586,83,1,0,0,0,587,591,7,35,0,0,588,592,
        3,266,133,0,589,590,7,10,0,0,590,592,3,266,133,0,591,588,1,0,0,0,
        591,589,1,0,0,0,592,85,1,0,0,0,593,599,7,36,0,0,594,596,7,37,0,0,
        595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,599,3,266,133,
        0,598,593,1,0,0,0,598,595,1,0,0,0,599,87,1,0,0,0,600,601,7,37,0,
        0,601,602,3,266,133,0,602,89,1,0,0,0,603,608,3,88,44,0,604,608,7,
        36,0,0,605,608,7,10,0,0,606,608,7,38,0,0,607,603,1,0,0,0,607,604,
        1,0,0,0,607,605,1,0,0,0,607,606,1,0,0,0,608,91,1,0,0,0,609,610,5,
        20,0,0,610,611,3,96,48,0,611,612,5,21,0,0,612,93,1,0,0,0,613,614,
        5,20,0,0,614,615,3,96,48,0,615,616,5,21,0,0,616,95,1,0,0,0,617,619,
        3,100,50,0,618,617,1,0,0,0,618,619,1,0,0,0,619,629,1,0,0,0,620,622,
        3,98,49,0,621,623,5,89,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,
        1,0,0,0,624,626,3,100,50,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,
        1,0,0,0,627,620,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,
        1,0,0,0,630,97,1,0,0,0,631,629,1,0,0,0,632,633,7,37,0,0,633,634,
        3,208,104,0,634,635,3,102,51,0,635,99,1,0,0,0,636,641,3,146,73,0,
        637,639,5,89,0,0,638,640,3,100,50,0,639,638,1,0,0,0,639,640,1,0,
        0,0,640,642,1,0,0,0,641,637,1,0,0,0,641,642,1,0,0,0,642,101,1,0,
        0,0,643,646,5,20,0,0,644,647,3,12,6,0,645,647,3,104,52,0,646,644,
        1,0,0,0,646,645,1,0,0,0,647,648,1,0,0,0,648,649,5,21,0,0,649,103,
        1,0,0,0,650,652,3,106,53,0,651,650,1,0,0,0,651,652,1,0,0,0,652,662,
        1,0,0,0,653,655,3,108,54,0,654,656,5,89,0,0,655,654,1,0,0,0,655,
        656,1,0,0,0,656,658,1,0,0,0,657,659,3,106,53,0,658,657,1,0,0,0,658,
        659,1,0,0,0,659,661,1,0,0,0,660,653,1,0,0,0,661,664,1,0,0,0,662,
        660,1,0,0,0,662,663,1,0,0,0,663,105,1,0,0,0,664,662,1,0,0,0,665,
        670,3,158,79,0,666,668,5,89,0,0,667,669,3,106,53,0,668,667,1,0,0,
        0,668,669,1,0,0,0,669,671,1,0,0,0,670,666,1,0,0,0,670,671,1,0,0,
        0,671,107,1,0,0,0,672,681,3,130,65,0,673,681,3,110,55,0,674,681,
        3,128,64,0,675,681,3,112,56,0,676,681,3,114,57,0,677,681,3,132,66,
        0,678,681,3,116,58,0,679,681,3,118,59,0,680,672,1,0,0,0,680,673,
        1,0,0,0,680,674,1,0,0,0,680,675,1,0,0,0,680,676,1,0,0,0,680,677,
        1,0,0,0,680,678,1,0,0,0,680,679,1,0,0,0,681,109,1,0,0,0,682,683,
        7,39,0,0,683,684,3,102,51,0,684,111,1,0,0,0,685,686,7,37,0,0,686,
        687,3,208,104,0,687,688,3,102,51,0,688,113,1,0,0,0,689,691,7,40,
        0,0,690,692,7,20,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,
        0,0,693,694,3,208,104,0,694,695,3,102,51,0,695,115,1,0,0,0,696,697,
        7,41,0,0,697,698,5,11,0,0,698,699,3,214,107,0,699,700,7,4,0,0,700,
        701,3,210,105,0,701,702,5,14,0,0,702,117,1,0,0,0,703,704,7,18,0,
        0,704,705,3,120,60,0,705,119,1,0,0,0,706,709,3,122,61,0,707,709,
        3,124,62,0,708,706,1,0,0,0,708,707,1,0,0,0,709,121,1,0,0,0,710,711,
        3,210,105,0,711,715,5,20,0,0,712,714,3,126,63,0,713,712,1,0,0,0,
        714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,
        717,715,1,0,0,0,718,719,5,21,0,0,719,123,1,0,0,0,720,730,5,277,0,
        0,721,725,5,11,0,0,722,724,3,210,105,0,723,722,1,0,0,0,724,727,1,
        0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,725,1,
        0,0,0,728,730,5,14,0,0,729,720,1,0,0,0,729,721,1,0,0,0,730,731,1,
        0,0,0,731,743,5,20,0,0,732,736,5,11,0,0,733,735,3,126,63,0,734,733,
        1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,739,
        1,0,0,0,738,736,1,0,0,0,739,742,5,14,0,0,740,742,5,277,0,0,741,732,
        1,0,0,0,741,740,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,
        1,0,0,0,744,746,1,0,0,0,745,743,1,0,0,0,746,747,5,21,0,0,747,125,
        1,0,0,0,748,754,3,266,133,0,749,754,3,252,126,0,750,754,3,254,127,
        0,751,754,3,262,131,0,752,754,7,42,0,0,753,748,1,0,0,0,753,749,1,
        0,0,0,753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,127,1,
        0,0,0,755,756,7,43,0,0,756,757,3,102,51,0,757,129,1,0,0,0,758,763,
        3,102,51,0,759,760,7,44,0,0,760,762,3,102,51,0,761,759,1,0,0,0,762,
        765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,131,1,0,0,0,765,
        763,1,0,0,0,766,767,7,45,0,0,767,768,3,134,67,0,768,133,1,0,0,0,
        769,773,3,234,117,0,770,773,3,236,118,0,771,773,3,136,68,0,772,769,
        1,0,0,0,772,770,1,0,0,0,772,771,1,0,0,0,773,135,1,0,0,0,774,775,
        3,266,133,0,775,776,3,138,69,0,776,137,1,0,0,0,777,793,5,277,0,0,
        778,780,5,11,0,0,779,781,7,46,0,0,780,779,1,0,0,0,780,781,1,0,0,
        0,781,782,1,0,0,0,782,787,3,214,107,0,783,784,5,104,0,0,784,786,
        3,214,107,0,785,783,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,
        788,1,0,0,0,788,790,1,0,0,0,789,787,1,0,0,0,790,791,5,14,0,0,791,
        793,1,0,0,0,792,777,1,0,0,0,792,778,1,0,0,0,793,139,1,0,0,0,794,
        807,5,277,0,0,795,796,5,11,0,0,796,801,3,214,107,0,797,798,5,104,
        0,0,798,800,3,214,107,0,799,797,1,0,0,0,800,803,1,0,0,0,801,799,
        1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,0,804,805,
        5,14,0,0,805,807,1,0,0,0,806,794,1,0,0,0,806,795,1,0,0,0,807,141,
        1,0,0,0,808,810,5,20,0,0,809,811,3,144,72,0,810,809,1,0,0,0,810,
        811,1,0,0,0,811,812,1,0,0,0,812,813,5,21,0,0,813,143,1,0,0,0,814,
        819,3,146,73,0,815,817,5,89,0,0,816,818,3,144,72,0,817,816,1,0,0,
        0,817,818,1,0,0,0,818,820,1,0,0,0,819,815,1,0,0,0,819,820,1,0,0,
        0,820,145,1,0,0,0,821,822,3,206,103,0,822,823,3,150,75,0,823,828,
        1,0,0,0,824,825,3,190,95,0,825,826,3,148,74,0,826,828,1,0,0,0,827,
        821,1,0,0,0,827,824,1,0,0,0,828,147,1,0,0,0,829,831,3,150,75,0,830,
        829,1,0,0,0,830,831,1,0,0,0,831,149,1,0,0,0,832,833,3,152,76,0,833,
        842,3,154,77,0,834,838,5,48,0,0,835,836,3,152,76,0,836,837,3,154,
        77,0,837,839,1,0,0,0,838,835,1,0,0,0,838,839,1,0,0,0,839,841,1,0,
        0,0,840,834,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,
        0,0,843,151,1,0,0,0,844,842,1,0,0,0,845,849,3,208,104,0,846,849,
        5,105,0,0,847,849,5,106,0,0,848,845,1,0,0,0,848,846,1,0,0,0,848,
        847,1,0,0,0,849,153,1,0,0,0,850,855,3,156,78,0,851,852,5,104,0,0,
        852,854,3,156,78,0,853,851,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,
        0,855,856,1,0,0,0,856,155,1,0,0,0,857,855,1,0,0,0,858,859,3,202,
        101,0,859,157,1,0,0,0,860,861,3,206,103,0,861,862,3,162,81,0,862,
        867,1,0,0,0,863,864,3,194,97,0,864,865,3,160,80,0,865,867,1,0,0,
        0,866,860,1,0,0,0,866,863,1,0,0,0,867,159,1,0,0,0,868,870,3,162,
        81,0,869,868,1,0,0,0,869,870,1,0,0,0,870,161,1,0,0,0,871,874,3,164,
        82,0,872,874,3,166,83,0,873,871,1,0,0,0,873,872,1,0,0,0,874,875,
        1,0,0,0,875,887,3,168,84,0,876,883,5,48,0,0,877,880,3,164,82,0,878,
        880,3,166,83,0,879,877,1,0,0,0,879,878,1,0,0,0,880,881,1,0,0,0,881,
        882,3,154,77,0,882,884,1,0,0,0,883,879,1,0,0,0,883,884,1,0,0,0,884,
        886,1,0,0,0,885,876,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,
        888,1,0,0,0,888,163,1,0,0,0,889,887,1,0,0,0,890,891,3,172,86,0,891,
        165,1,0,0,0,892,893,3,210,105,0,893,167,1,0,0,0,894,899,3,170,85,
        0,895,896,5,104,0,0,896,898,3,170,85,0,897,895,1,0,0,0,898,901,1,
        0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,169,1,0,0,0,901,899,1,
        0,0,0,902,903,3,204,102,0,903,171,1,0,0,0,904,905,3,174,87,0,905,
        173,1,0,0,0,906,911,3,176,88,0,907,908,5,107,0,0,908,910,3,176,88,
        0,909,907,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,
        0,912,175,1,0,0,0,913,911,1,0,0,0,914,919,3,180,90,0,915,916,5,108,
        0,0,916,918,3,180,90,0,917,915,1,0,0,0,918,921,1,0,0,0,919,917,1,
        0,0,0,919,920,1,0,0,0,920,177,1,0,0,0,921,919,1,0,0,0,922,924,3,
        184,92,0,923,925,3,182,91,0,924,923,1,0,0,0,924,925,1,0,0,0,925,
        179,1,0,0,0,926,930,3,178,89,0,927,928,5,109,0,0,928,930,3,178,89,
        0,929,926,1,0,0,0,929,927,1,0,0,0,930,181,1,0,0,0,931,932,7,47,0,
        0,932,183,1,0,0,0,933,943,3,266,133,0,934,943,5,105,0,0,935,943,
        5,106,0,0,936,937,5,112,0,0,937,943,3,186,93,0,938,939,5,11,0,0,
        939,940,3,172,86,0,940,941,5,14,0,0,941,943,1,0,0,0,942,933,1,0,
        0,0,942,934,1,0,0,0,942,935,1,0,0,0,942,936,1,0,0,0,942,938,1,0,
        0,0,943,185,1,0,0,0,944,958,3,188,94,0,945,954,5,11,0,0,946,951,
        3,188,94,0,947,948,5,107,0,0,948,950,3,188,94,0,949,947,1,0,0,0,
        950,953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,955,1,0,0,0,
        953,951,1,0,0,0,954,946,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,
        956,958,5,14,0,0,957,944,1,0,0,0,957,945,1,0,0,0,958,187,1,0,0,0,
        959,969,3,266,133,0,960,969,5,105,0,0,961,969,5,106,0,0,962,966,
        5,109,0,0,963,967,3,266,133,0,964,967,5,105,0,0,965,967,5,106,0,
        0,966,963,1,0,0,0,966,964,1,0,0,0,966,965,1,0,0,0,967,969,1,0,0,
        0,968,959,1,0,0,0,968,960,1,0,0,0,968,961,1,0,0,0,968,962,1,0,0,
        0,969,189,1,0,0,0,970,973,3,198,99,0,971,973,3,192,96,0,972,970,
        1,0,0,0,972,971,1,0,0,0,973,191,1,0,0,0,974,975,5,113,0,0,975,976,
        3,150,75,0,976,977,5,114,0,0,977,193,1,0,0,0,978,981,3,200,100,0,
        979,981,3,196,98,0,980,978,1,0,0,0,980,979,1,0,0,0,981,195,1,0,0,
        0,982,983,5,113,0,0,983,984,3,162,81,0,984,985,5,114,0,0,985,197,
        1,0,0,0,986,988,5,11,0,0,987,989,3,202,101,0,988,987,1,0,0,0,989,
        990,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,
        993,5,14,0,0,993,199,1,0,0,0,994,996,5,11,0,0,995,997,3,204,102,
        0,996,995,1,0,0,0,997,998,1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,
        0,999,1000,1,0,0,0,1000,1001,5,14,0,0,1001,201,1,0,0,0,1002,1005,
        3,206,103,0,1003,1005,3,190,95,0,1004,1002,1,0,0,0,1004,1003,1,0,
        0,0,1005,203,1,0,0,0,1006,1009,3,206,103,0,1007,1009,3,194,97,0,
        1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,205,1,0,0,0,1010,1013,3,
        210,105,0,1011,1013,3,212,106,0,1012,1010,1,0,0,0,1012,1011,1,0,
        0,0,1013,207,1,0,0,0,1014,1017,3,210,105,0,1015,1017,3,266,133,0,
        1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,209,1,0,0,0,1018,1019,7,
        48,0,0,1019,211,1,0,0,0,1020,1028,3,266,133,0,1021,1028,3,252,126,
        0,1022,1028,3,254,127,0,1023,1028,3,262,131,0,1024,1025,4,106,0,
        0,1025,1028,3,270,135,0,1026,1028,5,277,0,0,1027,1020,1,0,0,0,1027,
        1021,1,0,0,0,1027,1022,1,0,0,0,1027,1023,1,0,0,0,1027,1024,1,0,0,
        0,1027,1026,1,0,0,0,1028,213,1,0,0,0,1029,1030,3,216,108,0,1030,
        215,1,0,0,0,1031,1036,3,218,109,0,1032,1033,5,115,0,0,1033,1035,
        3,218,109,0,1034,1032,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,
        0,1036,1037,1,0,0,0,1037,217,1,0,0,0,1038,1036,1,0,0,0,1039,1044,
        3,220,110,0,1040,1041,5,116,0,0,1041,1043,3,220,110,0,1042,1040,
        1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,
        219,1,0,0,0,1046,1044,1,0,0,0,1047,1048,3,222,111,0,1048,221,1,0,
        0,0,1049,1067,3,224,112,0,1050,1051,5,117,0,0,1051,1068,3,224,112,
        0,1052,1053,5,118,0,0,1053,1068,3,224,112,0,1054,1055,5,119,0,0,
        1055,1068,3,224,112,0,1056,1057,5,120,0,0,1057,1068,3,224,112,0,
        1058,1059,5,121,0,0,1059,1068,3,224,112,0,1060,1061,5,122,0,0,1061,
        1068,3,224,112,0,1062,1063,7,49,0,0,1063,1068,3,140,70,0,1064,1065,
        7,50,0,0,1065,1066,7,49,0,0,1066,1068,3,140,70,0,1067,1050,1,0,0,
        0,1067,1052,1,0,0,0,1067,1054,1,0,0,0,1067,1056,1,0,0,0,1067,1058,
        1,0,0,0,1067,1060,1,0,0,0,1067,1062,1,0,0,0,1067,1064,1,0,0,0,1067,
        1068,1,0,0,0,1068,223,1,0,0,0,1069,1070,3,226,113,0,1070,225,1,0,
        0,0,1071,1091,3,228,114,0,1072,1073,5,111,0,0,1073,1090,3,228,114,
        0,1074,1075,5,127,0,0,1075,1090,3,228,114,0,1076,1079,3,258,129,
        0,1077,1079,3,260,130,0,1078,1076,1,0,0,0,1078,1077,1,0,0,0,1079,
        1086,1,0,0,0,1080,1081,5,15,0,0,1081,1085,3,230,115,0,1082,1083,
        5,108,0,0,1083,1085,3,230,115,0,1084,1080,1,0,0,0,1084,1082,1,0,
        0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1090,
        1,0,0,0,1088,1086,1,0,0,0,1089,1072,1,0,0,0,1089,1074,1,0,0,0,1089,
        1078,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,
        0,1092,227,1,0,0,0,1093,1091,1,0,0,0,1094,1101,3,230,115,0,1095,
        1096,5,15,0,0,1096,1100,3,230,115,0,1097,1098,5,108,0,0,1098,1100,
        3,230,115,0,1099,1095,1,0,0,0,1099,1097,1,0,0,0,1100,1103,1,0,0,
        0,1101,1099,1,0,0,0,1101,1102,1,0,0,0,1102,229,1,0,0,0,1103,1101,
        1,0,0,0,1104,1105,5,112,0,0,1105,1112,3,232,116,0,1106,1107,5,111,
        0,0,1107,1112,3,232,116,0,1108,1109,5,127,0,0,1109,1112,3,232,116,
        0,1110,1112,3,232,116,0,1111,1104,1,0,0,0,1111,1106,1,0,0,0,1111,
        1108,1,0,0,0,1111,1110,1,0,0,0,1112,231,1,0,0,0,1113,1121,3,234,
        117,0,1114,1121,3,236,118,0,1115,1121,3,250,125,0,1116,1121,3,252,
        126,0,1117,1121,3,254,127,0,1118,1121,3,262,131,0,1119,1121,3,210,
        105,0,1120,1113,1,0,0,0,1120,1114,1,0,0,0,1120,1115,1,0,0,0,1120,
        1116,1,0,0,0,1120,1117,1,0,0,0,1120,1118,1,0,0,0,1120,1119,1,0,0,
        0,1121,233,1,0,0,0,1122,1123,5,11,0,0,1123,1124,3,214,107,0,1124,
        1125,5,14,0,0,1125,235,1,0,0,0,1126,1385,3,248,124,0,1127,1128,7,
        51,0,0,1128,1129,5,11,0,0,1129,1130,3,214,107,0,1130,1131,5,14,0,
        0,1131,1385,1,0,0,0,1132,1133,7,52,0,0,1133,1134,5,11,0,0,1134,1135,
        3,214,107,0,1135,1136,5,14,0,0,1136,1385,1,0,0,0,1137,1138,7,53,
        0,0,1138,1139,5,11,0,0,1139,1140,3,214,107,0,1140,1141,5,104,0,0,
        1141,1142,3,214,107,0,1142,1143,5,14,0,0,1143,1385,1,0,0,0,1144,
        1145,7,54,0,0,1145,1146,5,11,0,0,1146,1147,3,214,107,0,1147,1148,
        5,14,0,0,1148,1385,1,0,0,0,1149,1150,7,55,0,0,1150,1151,5,11,0,0,
        1151,1152,3,210,105,0,1152,1153,5,14,0,0,1153,1385,1,0,0,0,1154,
        1155,7,56,0,0,1155,1156,5,11,0,0,1156,1157,3,214,107,0,1157,1158,
        5,14,0,0,1158,1385,1,0,0,0,1159,1160,7,57,0,0,1160,1161,5,11,0,0,
        1161,1162,3,214,107,0,1162,1163,5,14,0,0,1163,1385,1,0,0,0,1164,
        1170,7,58,0,0,1165,1166,5,11,0,0,1166,1167,3,214,107,0,1167,1168,
        5,14,0,0,1168,1171,1,0,0,0,1169,1171,5,277,0,0,1170,1165,1,0,0,0,
        1170,1169,1,0,0,0,1171,1385,1,0,0,0,1172,1173,7,59,0,0,1173,1385,
        5,277,0,0,1174,1175,7,60,0,0,1175,1176,5,11,0,0,1176,1177,3,214,
        107,0,1177,1178,5,14,0,0,1178,1385,1,0,0,0,1179,1180,7,61,0,0,1180,
        1181,5,11,0,0,1181,1182,3,214,107,0,1182,1183,5,14,0,0,1183,1385,
        1,0,0,0,1184,1185,7,62,0,0,1185,1186,5,11,0,0,1186,1187,3,214,107,
        0,1187,1188,5,14,0,0,1188,1385,1,0,0,0,1189,1190,7,63,0,0,1190,1191,
        5,11,0,0,1191,1192,3,214,107,0,1192,1193,5,14,0,0,1193,1385,1,0,
        0,0,1194,1195,7,64,0,0,1195,1385,3,140,70,0,1196,1385,3,240,120,
        0,1197,1198,7,65,0,0,1198,1199,5,11,0,0,1199,1200,3,214,107,0,1200,
        1201,5,14,0,0,1201,1385,1,0,0,0,1202,1385,3,242,121,0,1203,1204,
        7,66,0,0,1204,1205,5,11,0,0,1205,1206,3,214,107,0,1206,1207,5,14,
        0,0,1207,1385,1,0,0,0,1208,1209,7,67,0,0,1209,1210,5,11,0,0,1210,
        1211,3,214,107,0,1211,1212,5,14,0,0,1212,1385,1,0,0,0,1213,1214,
        7,68,0,0,1214,1215,5,11,0,0,1215,1216,3,214,107,0,1216,1217,5,14,
        0,0,1217,1385,1,0,0,0,1218,1219,7,69,0,0,1219,1220,5,11,0,0,1220,
        1221,3,214,107,0,1221,1222,5,104,0,0,1222,1223,3,214,107,0,1223,
        1224,5,14,0,0,1224,1385,1,0,0,0,1225,1226,7,70,0,0,1226,1227,5,11,
        0,0,1227,1228,3,214,107,0,1228,1229,5,104,0,0,1229,1230,3,214,107,
        0,1230,1231,5,14,0,0,1231,1385,1,0,0,0,1232,1233,7,71,0,0,1233,1234,
        5,11,0,0,1234,1235,3,214,107,0,1235,1236,5,104,0,0,1236,1237,3,214,
        107,0,1237,1238,5,14,0,0,1238,1385,1,0,0,0,1239,1240,7,72,0,0,1240,
        1241,5,11,0,0,1241,1242,3,214,107,0,1242,1243,5,104,0,0,1243,1244,
        3,214,107,0,1244,1245,5,14,0,0,1245,1385,1,0,0,0,1246,1247,7,73,
        0,0,1247,1248,5,11,0,0,1248,1249,3,214,107,0,1249,1250,5,104,0,0,
        1250,1251,3,214,107,0,1251,1252,5,14,0,0,1252,1385,1,0,0,0,1253,
        1254,7,74,0,0,1254,1255,5,11,0,0,1255,1256,3,214,107,0,1256,1257,
        5,14,0,0,1257,1385,1,0,0,0,1258,1259,7,75,0,0,1259,1260,5,11,0,0,
        1260,1261,3,214,107,0,1261,1262,5,14,0,0,1262,1385,1,0,0,0,1263,
        1264,7,76,0,0,1264,1265,5,11,0,0,1265,1266,3,214,107,0,1266,1267,
        5,14,0,0,1267,1385,1,0,0,0,1268,1269,7,77,0,0,1269,1270,5,11,0,0,
        1270,1271,3,214,107,0,1271,1272,5,14,0,0,1272,1385,1,0,0,0,1273,
        1274,7,78,0,0,1274,1275,5,11,0,0,1275,1276,3,214,107,0,1276,1277,
        5,14,0,0,1277,1385,1,0,0,0,1278,1279,7,79,0,0,1279,1280,5,11,0,0,
        1280,1281,3,214,107,0,1281,1282,5,14,0,0,1282,1385,1,0,0,0,1283,
        1284,7,80,0,0,1284,1285,5,11,0,0,1285,1286,3,214,107,0,1286,1287,
        5,14,0,0,1287,1385,1,0,0,0,1288,1289,7,81,0,0,1289,1290,5,11,0,0,
        1290,1291,3,214,107,0,1291,1292,5,14,0,0,1292,1385,1,0,0,0,1293,
        1294,7,82,0,0,1294,1385,5,277,0,0,1295,1296,7,83,0,0,1296,1385,5,
        277,0,0,1297,1298,7,84,0,0,1298,1385,5,277,0,0,1299,1300,7,85,0,
        0,1300,1301,5,11,0,0,1301,1302,3,214,107,0,1302,1303,5,14,0,0,1303,
        1385,1,0,0,0,1304,1305,7,86,0,0,1305,1306,5,11,0,0,1306,1307,3,214,
        107,0,1307,1308,5,14,0,0,1308,1385,1,0,0,0,1309,1310,7,87,0,0,1310,
        1311,5,11,0,0,1311,1312,3,214,107,0,1312,1313,5,14,0,0,1313,1385,
        1,0,0,0,1314,1315,7,88,0,0,1315,1316,5,11,0,0,1316,1317,3,214,107,
        0,1317,1318,5,14,0,0,1318,1385,1,0,0,0,1319,1320,7,89,0,0,1320,1321,
        5,11,0,0,1321,1322,3,214,107,0,1322,1323,5,14,0,0,1323,1385,1,0,
        0,0,1324,1325,7,90,0,0,1325,1385,3,140,70,0,1326,1327,7,91,0,0,1327,
        1328,5,11,0,0,1328,1329,3,214,107,0,1329,1330,5,104,0,0,1330,1331,
        3,214,107,0,1331,1332,5,104,0,0,1332,1333,3,214,107,0,1333,1334,
        5,14,0,0,1334,1385,1,0,0,0,1335,1336,7,92,0,0,1336,1337,5,11,0,0,
        1337,1338,3,214,107,0,1338,1339,5,104,0,0,1339,1340,3,214,107,0,
        1340,1341,5,14,0,0,1341,1385,1,0,0,0,1342,1343,7,93,0,0,1343,1344,
        5,11,0,0,1344,1345,3,214,107,0,1345,1346,5,104,0,0,1346,1347,3,214,
        107,0,1347,1348,5,14,0,0,1348,1385,1,0,0,0,1349,1350,7,94,0,0,1350,
        1351,5,11,0,0,1351,1352,3,214,107,0,1352,1353,5,104,0,0,1353,1354,
        3,214,107,0,1354,1355,5,14,0,0,1355,1385,1,0,0,0,1356,1357,7,95,
        0,0,1357,1358,5,11,0,0,1358,1359,3,214,107,0,1359,1360,5,14,0,0,
        1360,1385,1,0,0,0,1361,1362,7,96,0,0,1362,1363,5,11,0,0,1363,1364,
        3,214,107,0,1364,1365,5,14,0,0,1365,1385,1,0,0,0,1366,1367,7,97,
        0,0,1367,1368,5,11,0,0,1368,1369,3,214,107,0,1369,1370,5,14,0,0,
        1370,1385,1,0,0,0,1371,1372,7,98,0,0,1372,1373,5,11,0,0,1373,1374,
        3,214,107,0,1374,1375,5,14,0,0,1375,1385,1,0,0,0,1376,1377,7,99,
        0,0,1377,1378,5,11,0,0,1378,1379,3,214,107,0,1379,1380,5,14,0,0,
        1380,1385,1,0,0,0,1381,1385,3,238,119,0,1382,1385,3,244,122,0,1383,
        1385,3,246,123,0,1384,1126,1,0,0,0,1384,1127,1,0,0,0,1384,1132,1,
        0,0,0,1384,1137,1,0,0,0,1384,1144,1,0,0,0,1384,1149,1,0,0,0,1384,
        1154,1,0,0,0,1384,1159,1,0,0,0,1384,1164,1,0,0,0,1384,1172,1,0,0,
        0,1384,1174,1,0,0,0,1384,1179,1,0,0,0,1384,1184,1,0,0,0,1384,1189,
        1,0,0,0,1384,1194,1,0,0,0,1384,1196,1,0,0,0,1384,1197,1,0,0,0,1384,
        1202,1,0,0,0,1384,1203,1,0,0,0,1384,1208,1,0,0,0,1384,1213,1,0,0,
        0,1384,1218,1,0,0,0,1384,1225,1,0,0,0,1384,1232,1,0,0,0,1384,1239,
        1,0,0,0,1384,1246,1,0,0,0,1384,1253,1,0,0,0,1384,1258,1,0,0,0,1384,
        1263,1,0,0,0,1384,1268,1,0,0,0,1384,1273,1,0,0,0,1384,1278,1,0,0,
        0,1384,1283,1,0,0,0,1384,1288,1,0,0,0,1384,1293,1,0,0,0,1384,1295,
        1,0,0,0,1384,1297,1,0,0,0,1384,1299,1,0,0,0,1384,1304,1,0,0,0,1384,
        1309,1,0,0,0,1384,1314,1,0,0,0,1384,1319,1,0,0,0,1384,1324,1,0,0,
        0,1384,1326,1,0,0,0,1384,1335,1,0,0,0,1384,1342,1,0,0,0,1384,1349,
        1,0,0,0,1384,1356,1,0,0,0,1384,1361,1,0,0,0,1384,1366,1,0,0,0,1384,
        1371,1,0,0,0,1384,1376,1,0,0,0,1384,1381,1,0,0,0,1384,1382,1,0,0,
        0,1384,1383,1,0,0,0,1385,237,1,0,0,0,1386,1387,7,100,0,0,1387,1388,
        5,11,0,0,1388,1389,3,214,107,0,1389,1390,5,104,0,0,1390,1393,3,214,
        107,0,1391,1392,5,104,0,0,1392,1394,3,214,107,0,1393,1391,1,0,0,
        0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,5,14,0,0,1396,239,
        1,0,0,0,1397,1398,7,101,0,0,1398,1399,5,11,0,0,1399,1400,3,214,107,
        0,1400,1401,5,104,0,0,1401,1404,3,214,107,0,1402,1403,5,104,0,0,
        1403,1405,3,214,107,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1406,
        1,0,0,0,1406,1407,5,14,0,0,1407,241,1,0,0,0,1408,1409,7,102,0,0,
        1409,1410,5,11,0,0,1410,1411,3,214,107,0,1411,1412,5,104,0,0,1412,
        1413,3,214,107,0,1413,1414,5,104,0,0,1414,1417,3,214,107,0,1415,
        1416,5,104,0,0,1416,1418,3,214,107,0,1417,1415,1,0,0,0,1417,1418,
        1,0,0,0,1418,1419,1,0,0,0,1419,1420,5,14,0,0,1420,243,1,0,0,0,1421,
        1422,7,103,0,0,1422,1423,3,102,51,0,1423,245,1,0,0,0,1424,1425,7,
        50,0,0,1425,1426,7,103,0,0,1426,1427,3,102,51,0,1427,247,1,0,0,0,
        1428,1429,7,104,0,0,1429,1431,5,11,0,0,1430,1432,7,46,0,0,1431,1430,
        1,0,0,0,1431,1432,1,0,0,0,1432,1435,1,0,0,0,1433,1436,5,15,0,0,1434,
        1436,3,214,107,0,1435,1433,1,0,0,0,1435,1434,1,0,0,0,1436,1437,1,
        0,0,0,1437,1493,5,14,0,0,1438,1439,7,105,0,0,1439,1441,5,11,0,0,
        1440,1442,7,46,0,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,1443,
        1,0,0,0,1443,1444,3,214,107,0,1444,1445,5,14,0,0,1445,1493,1,0,0,
        0,1446,1447,7,106,0,0,1447,1449,5,11,0,0,1448,1450,7,46,0,0,1449,
        1448,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1452,3,214,
        107,0,1452,1453,5,14,0,0,1453,1493,1,0,0,0,1454,1455,7,107,0,0,1455,
        1457,5,11,0,0,1456,1458,7,46,0,0,1457,1456,1,0,0,0,1457,1458,1,0,
        0,0,1458,1459,1,0,0,0,1459,1460,3,214,107,0,1460,1461,5,14,0,0,1461,
        1493,1,0,0,0,1462,1463,7,108,0,0,1463,1465,5,11,0,0,1464,1466,7,
        46,0,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,1,0,0,0,1467,
        1468,3,214,107,0,1468,1469,5,14,0,0,1469,1493,1,0,0,0,1470,1471,
        7,109,0,0,1471,1473,5,11,0,0,1472,1474,7,46,0,0,1473,1472,1,0,0,
        0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1476,3,214,107,0,1476,
        1477,5,14,0,0,1477,1493,1,0,0,0,1478,1479,7,110,0,0,1479,1481,5,
        11,0,0,1480,1482,7,46,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,
        1483,1,0,0,0,1483,1488,3,214,107,0,1484,1485,5,48,0,0,1485,1486,
        7,111,0,0,1486,1487,5,117,0,0,1487,1489,3,264,132,0,1488,1484,1,
        0,0,0,1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1491,5,14,0,0,1491,
        1493,1,0,0,0,1492,1428,1,0,0,0,1492,1438,1,0,0,0,1492,1446,1,0,0,
        0,1492,1454,1,0,0,0,1492,1462,1,0,0,0,1492,1470,1,0,0,0,1492,1478,
        1,0,0,0,1493,249,1,0,0,0,1494,1496,3,266,133,0,1495,1497,3,138,69,
        0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,251,1,0,0,0,1498,1502,
        3,264,132,0,1499,1503,5,261,0,0,1500,1501,5,250,0,0,1501,1503,3,
        266,133,0,1502,1499,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,
        1503,253,1,0,0,0,1504,1508,3,256,128,0,1505,1508,3,258,129,0,1506,
        1508,3,260,130,0,1507,1504,1,0,0,0,1507,1505,1,0,0,0,1507,1506,1,
        0,0,0,1508,255,1,0,0,0,1509,1510,7,112,0,0,1510,257,1,0,0,0,1511,
        1512,7,113,0,0,1512,259,1,0,0,0,1513,1514,7,114,0,0,1514,261,1,0,
        0,0,1515,1516,7,115,0,0,1516,263,1,0,0,0,1517,1518,7,116,0,0,1518,
        265,1,0,0,0,1519,1522,5,255,0,0,1520,1522,3,268,134,0,1521,1519,
        1,0,0,0,1521,1520,1,0,0,0,1522,267,1,0,0,0,1523,1524,7,117,0,0,1524,
        269,1,0,0,0,1525,1526,7,118,0,0,1526,271,1,0,0,0,150,274,281,287,
        289,303,316,325,327,330,337,346,352,356,362,365,370,374,382,391,
        401,406,409,412,415,422,430,435,441,450,456,458,462,466,468,478,
        484,486,499,503,508,512,518,524,530,538,546,563,567,570,575,591,
        595,598,607,618,622,625,629,639,641,646,651,655,658,662,668,670,
        680,691,708,715,725,729,736,741,743,753,763,772,780,787,792,801,
        806,810,817,819,827,830,838,842,848,855,866,869,873,879,883,887,
        899,911,919,924,929,942,951,954,957,966,968,972,980,990,998,1004,
        1008,1012,1016,1027,1036,1044,1067,1078,1084,1086,1089,1091,1099,
        1101,1111,1120,1170,1384,1393,1404,1417,1431,1435,1441,1449,1457,
        1465,1473,1481,1488,1492,1496,1502,1507,1521
    ]

class SparqlParser ( Parser ):

    grammarFileName = "Sparql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'base'", "'BASE'", "'prefix'", "'PREFIX'", 
                     "'select'", "'SELECT'", "'distinct'", "'DISTINCT'", 
                     "'reduced'", "'REDUCED'", "'('", "'as'", "'AS'", "')'", 
                     "'*'", "'construct'", "'CONSTRUCT'", "'where'", "'WHERE'", 
                     "'{'", "'}'", "'describe'", "'DESCRIBE'", "'ask'", 
                     "'ASK'", "'from'", "'FROM'", "'named'", "'NAMED'", 
                     "'group'", "'GROUP'", "'by'", "'BY'", "'having'", "'HAVING'", 
                     "'order'", "'ORDER'", "'ASC'", "'asc'", "'DESC'", "'desc'", 
                     "'limit'", "'LIMIT'", "'offset'", "'OFFSET'", "'values'", 
                     "'VALUES'", "';'", "'load'", "'LOAD'", "'silent'", 
                     "'SILENT'", "'into'", "'INTO'", "'clear'", "'CLEAR'", 
                     "'drop'", "'DROP'", "'create'", "'CREATE'", "'add'", 
                     "'ADD'", "'to'", "'TO'", "'move'", "'MOVE'", "'copy'", 
                     "'COPY'", "'INSERT DATA'", "'insert data'", "'DELETE DATA'", 
                     "'delete data'", "'DELETE WHERE'", "'delete where'", 
                     "'with'", "'WITH'", "'delete'", "'DELETE'", "'insert'", 
                     "'INSERT'", "'using'", "'USING'", "'default'", "'DEFAULT'", 
                     "'graph'", "'GRAPH'", "'all'", "'ALL'", "'.'", "'optional'", 
                     "'OPTIONAL'", "'service'", "'SERVICE'", "'bind'", "'BIND'", 
                     "'undef'", "'UNDEF'", "'minus'", "'MINUS'", "'union'", 
                     "'UNION'", "'filter'", "'FILTER'", "','", "'a'", "'A'", 
                     "'|'", "'/'", "'^'", "'?'", "'+'", "'!'", "'['", "']'", 
                     "'||'", "'&&'", "'='", "'!='", "'<'", "'>'", "'<='", 
                     "'>='", "'in'", "'IN'", "'not'", "'NOT'", "'-'", "'str'", 
                     "'STR'", "'lang'", "'LANG'", "'langmatches'", "'LANGMATCHES'", 
                     "'datatype'", "'DATATYPE'", "'bound'", "'BOUND'", "'iri'", 
                     "'IRI'", "'uri'", "'URI'", "'bnode'", "'BNODE'", "'rand'", 
                     "'RAND'", "'abs'", "'ABS'", "'ceil'", "'CEIL'", "'floor'", 
                     "'FLOOR'", "'round'", "'ROUND'", "'concat'", "'CONCAT'", 
                     "'strlen'", "'STRLEN'", "'ucase'", "'UCASE'", "'lcase'", 
                     "'LCASE'", "'ENCODE_FOR_URI'", "'encode_for_uri'", 
                     "'contains'", "'CONTAINS'", "'strstarts'", "'STRSTARTS'", 
                     "'strends'", "'STRENDS'", "'strbefore'", "'STRBEFORE'", 
                     "'strafter'", "'STRAFTER'", "'year'", "'YEAR'", "'month'", 
                     "'MONTH'", "'day'", "'DAY'", "'hours'", "'HOURS'", 
                     "'minutes'", "'MINUTES'", "'seconds'", "'SECONDS'", 
                     "'timezone'", "'TIMEZONE'", "'tz'", "'TZ'", "'now'", 
                     "'NOW'", "'uuid'", "'UUID'", "'struuid'", "'STRUUID'", 
                     "'md5'", "'MD5'", "'sha1'", "'SHA1'", "'sha256'", "'SHA256'", 
                     "'sha384'", "'SHA384'", "'sha512'", "'SHA512'", "'coalesce'", 
                     "'COALESCE'", "'if'", "'IF'", "'strlang'", "'STRLANG'", 
                     "'strdt'", "'STRDT'", "'sameterm'", "'SAMETERM'", "'isiri'", 
                     "'ISIRI'", "'isuri'", "'ISURI'", "'isblank'", "'ISBLANK'", 
                     "'isliteral'", "'ISLITERAL'", "'isnumeric'", "'ISNUMERIC'", 
                     "'regex'", "'REGEX'", "'substr'", "'SUBSTR'", "'replace'", 
                     "'REPLACE'", "'exists'", "'EXISTS'", "'count'", "'COUNT'", 
                     "'sum'", "'SUM'", "'min'", "'MIN'", "'max'", "'MAX'", 
                     "'avg'", "'AVG'", "'sample'", "'SAMPLE'", "'group_concat'", 
                     "'GROUP_CONCAT'", "'separator'", "'SEPARATOR'", "'^^'", 
                     "'true'", "'false'", "'TRUE'", "'FALSE'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "IRIREF", "PNAME_NS", 
                      "PNAME_LN", "BLANK_NODE_LABEL", "VAR1", "VAR2", "LANGTAG", 
                      "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", 
                      "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", 
                      "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "EXPONENT", 
                      "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
                      "STRING_LITERAL_LONG2", "ECHAR", "NIL", "WS", "COMMENT", 
                      "ANON", "PN_CHARS_BASE", "PN_CHARS_U", "VARNAME", 
                      "PN_CHARS", "PN_PREFIX", "PN_LOCAL", "PLX", "PERCENT", 
                      "HEX", "PN_LOCAL_ESC" ]

    RULE_statement = 0
    RULE_query = 1
    RULE_prologue = 2
    RULE_baseDecl = 3
    RULE_prefixDecl = 4
    RULE_selectQuery = 5
    RULE_subSelect = 6
    RULE_selectClause = 7
    RULE_constructQuery = 8
    RULE_describeQuery = 9
    RULE_askQuery = 10
    RULE_datasetClause = 11
    RULE_defaultGraphClause = 12
    RULE_namedGraphClause = 13
    RULE_sourceSelector = 14
    RULE_whereClause = 15
    RULE_solutionModifier = 16
    RULE_groupClause = 17
    RULE_groupCondition = 18
    RULE_havingClause = 19
    RULE_havingCondition = 20
    RULE_orderClause = 21
    RULE_orderCondition = 22
    RULE_limitOffsetClauses = 23
    RULE_limitClause = 24
    RULE_offsetClause = 25
    RULE_valuesClause = 26
    RULE_update = 27
    RULE_update1 = 28
    RULE_load = 29
    RULE_clear = 30
    RULE_drop = 31
    RULE_create = 32
    RULE_add = 33
    RULE_move = 34
    RULE_copy = 35
    RULE_insertData = 36
    RULE_deleteData = 37
    RULE_deleteWhere = 38
    RULE_modify = 39
    RULE_deleteClause = 40
    RULE_insertClause = 41
    RULE_usingClause = 42
    RULE_graphOrDefault = 43
    RULE_graphRef = 44
    RULE_graphRefAll = 45
    RULE_quadPattern = 46
    RULE_quadData = 47
    RULE_quads = 48
    RULE_quadsNotTriples = 49
    RULE_triplesTemplate = 50
    RULE_groupGraphPattern = 51
    RULE_groupGraphPatternSub = 52
    RULE_triplesBlock = 53
    RULE_graphPatternNotTriples = 54
    RULE_optionalGraphPattern = 55
    RULE_graphGraphPattern = 56
    RULE_serviceGraphPattern = 57
    RULE_bind = 58
    RULE_inlineData = 59
    RULE_dataBlock = 60
    RULE_inlineDataOneVar = 61
    RULE_inlineDataFull = 62
    RULE_dataBlockValue = 63
    RULE_minusGraphPattern = 64
    RULE_groupOrUnionGraphPattern = 65
    RULE_filterClause = 66
    RULE_constraint = 67
    RULE_functionCall = 68
    RULE_argList = 69
    RULE_expressionList = 70
    RULE_constructTemplate = 71
    RULE_constructTriples = 72
    RULE_triplesSameSubject = 73
    RULE_propertyList = 74
    RULE_propertyListNotEmpty = 75
    RULE_verb = 76
    RULE_objectList = 77
    RULE_objectClause = 78
    RULE_triplesSameSubjectPath = 79
    RULE_propertyListPath = 80
    RULE_propertyListPathNotEmpty = 81
    RULE_verbPath = 82
    RULE_verbSimple = 83
    RULE_objectListPath = 84
    RULE_objectPath = 85
    RULE_path = 86
    RULE_pathAlternative = 87
    RULE_pathSequence = 88
    RULE_pathElt = 89
    RULE_pathEltOrInverse = 90
    RULE_pathMod = 91
    RULE_pathPrimary = 92
    RULE_pathNegatedPropertySet = 93
    RULE_pathOneInPropertySet = 94
    RULE_triplesNode = 95
    RULE_blankNodePropertyList = 96
    RULE_triplesNodePath = 97
    RULE_blankNodePropertyListPath = 98
    RULE_collection = 99
    RULE_collectionPath = 100
    RULE_graphNode = 101
    RULE_graphNodePath = 102
    RULE_varOrTerm = 103
    RULE_varOrIri = 104
    RULE_var = 105
    RULE_graphTerm = 106
    RULE_expression = 107
    RULE_conditionalOrExpression = 108
    RULE_conditionalAndExpression = 109
    RULE_valueLogical = 110
    RULE_relationalExpression = 111
    RULE_numericExpression = 112
    RULE_additiveExpression = 113
    RULE_multiplicativeExpression = 114
    RULE_unaryExpression = 115
    RULE_primaryExpression = 116
    RULE_brackettedExpression = 117
    RULE_builtInCall = 118
    RULE_regexExpression = 119
    RULE_substringExpression = 120
    RULE_strReplaceExpression = 121
    RULE_existsFunc = 122
    RULE_notExistsFunc = 123
    RULE_aggregate = 124
    RULE_iriOrFunction = 125
    RULE_rdfLiteral = 126
    RULE_numericLiteral = 127
    RULE_numericLiteralUnsigned = 128
    RULE_numericLiteralPositive = 129
    RULE_numericLiteralNegative = 130
    RULE_booleanLiteral = 131
    RULE_string = 132
    RULE_iri = 133
    RULE_prefixedName = 134
    RULE_blankNode = 135

    ruleNames =  [ "statement", "query", "prologue", "baseDecl", "prefixDecl", 
                   "selectQuery", "subSelect", "selectClause", "constructQuery", 
                   "describeQuery", "askQuery", "datasetClause", "defaultGraphClause", 
                   "namedGraphClause", "sourceSelector", "whereClause", 
                   "solutionModifier", "groupClause", "groupCondition", 
                   "havingClause", "havingCondition", "orderClause", "orderCondition", 
                   "limitOffsetClauses", "limitClause", "offsetClause", 
                   "valuesClause", "update", "update1", "load", "clear", 
                   "drop", "create", "add", "move", "copy", "insertData", 
                   "deleteData", "deleteWhere", "modify", "deleteClause", 
                   "insertClause", "usingClause", "graphOrDefault", "graphRef", 
                   "graphRefAll", "quadPattern", "quadData", "quads", "quadsNotTriples", 
                   "triplesTemplate", "groupGraphPattern", "groupGraphPatternSub", 
                   "triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", 
                   "graphGraphPattern", "serviceGraphPattern", "bind", "inlineData", 
                   "dataBlock", "inlineDataOneVar", "inlineDataFull", "dataBlockValue", 
                   "minusGraphPattern", "groupOrUnionGraphPattern", "filterClause", 
                   "constraint", "functionCall", "argList", "expressionList", 
                   "constructTemplate", "constructTriples", "triplesSameSubject", 
                   "propertyList", "propertyListNotEmpty", "verb", "objectList", 
                   "objectClause", "triplesSameSubjectPath", "propertyListPath", 
                   "propertyListPathNotEmpty", "verbPath", "verbSimple", 
                   "objectListPath", "objectPath", "path", "pathAlternative", 
                   "pathSequence", "pathElt", "pathEltOrInverse", "pathMod", 
                   "pathPrimary", "pathNegatedPropertySet", "pathOneInPropertySet", 
                   "triplesNode", "blankNodePropertyList", "triplesNodePath", 
                   "blankNodePropertyListPath", "collection", "collectionPath", 
                   "graphNode", "graphNodePath", "varOrTerm", "varOrIri", 
                   "var", "graphTerm", "expression", "conditionalOrExpression", 
                   "conditionalAndExpression", "valueLogical", "relationalExpression", 
                   "numericExpression", "additiveExpression", "multiplicativeExpression", 
                   "unaryExpression", "primaryExpression", "brackettedExpression", 
                   "builtInCall", "regexExpression", "substringExpression", 
                   "strReplaceExpression", "existsFunc", "notExistsFunc", 
                   "aggregate", "iriOrFunction", "rdfLiteral", "numericLiteral", 
                   "numericLiteralUnsigned", "numericLiteralPositive", "numericLiteralNegative", 
                   "booleanLiteral", "string", "iri", "prefixedName", "blankNode" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    T__216=217
    T__217=218
    T__218=219
    T__219=220
    T__220=221
    T__221=222
    T__222=223
    T__223=224
    T__224=225
    T__225=226
    T__226=227
    T__227=228
    T__228=229
    T__229=230
    T__230=231
    T__231=232
    T__232=233
    T__233=234
    T__234=235
    T__235=236
    T__236=237
    T__237=238
    T__238=239
    T__239=240
    T__240=241
    T__241=242
    T__242=243
    T__243=244
    T__244=245
    T__245=246
    T__246=247
    T__247=248
    T__248=249
    T__249=250
    T__250=251
    T__251=252
    T__252=253
    T__253=254
    IRIREF=255
    PNAME_NS=256
    PNAME_LN=257
    BLANK_NODE_LABEL=258
    VAR1=259
    VAR2=260
    LANGTAG=261
    INTEGER=262
    DECIMAL=263
    DOUBLE=264
    INTEGER_POSITIVE=265
    DECIMAL_POSITIVE=266
    DOUBLE_POSITIVE=267
    INTEGER_NEGATIVE=268
    DECIMAL_NEGATIVE=269
    DOUBLE_NEGATIVE=270
    EXPONENT=271
    STRING_LITERAL1=272
    STRING_LITERAL2=273
    STRING_LITERAL_LONG1=274
    STRING_LITERAL_LONG2=275
    ECHAR=276
    NIL=277
    WS=278
    COMMENT=279
    ANON=280
    PN_CHARS_BASE=281
    PN_CHARS_U=282
    VARNAME=283
    PN_CHARS=284
    PN_PREFIX=285
    PN_LOCAL=286
    PLX=287
    PERCENT=288
    HEX=289
    PN_LOCAL_ESC=290

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(SparqlParser.QueryContext,0)


        def update(self):
            return self.getTypedRuleContext(SparqlParser.UpdateContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SparqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statement)
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.query()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.update()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prologue(self):
            return self.getTypedRuleContext(SparqlParser.PrologueContext,0)


        def valuesClause(self):
            return self.getTypedRuleContext(SparqlParser.ValuesClauseContext,0)


        def selectQuery(self):
            return self.getTypedRuleContext(SparqlParser.SelectQueryContext,0)


        def constructQuery(self):
            return self.getTypedRuleContext(SparqlParser.ConstructQueryContext,0)


        def describeQuery(self):
            return self.getTypedRuleContext(SparqlParser.DescribeQueryContext,0)


        def askQuery(self):
            return self.getTypedRuleContext(SparqlParser.AskQueryContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SparqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.prologue()
            self.state = 281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__4, SparqlParser.T__5]:
                self.state = 277
                self.selectQuery()
                pass
            elif token in [SparqlParser.T__15, SparqlParser.T__16]:
                self.state = 278
                self.constructQuery()
                pass
            elif token in [SparqlParser.T__21, SparqlParser.T__22]:
                self.state = 279
                self.describeQuery()
                pass
            elif token in [SparqlParser.T__23, SparqlParser.T__24]:
                self.state = 280
                self.askQuery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 283
            self.valuesClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrologueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.BaseDeclContext)
            else:
                return self.getTypedRuleContext(SparqlParser.BaseDeclContext,i)


        def prefixDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.PrefixDeclContext)
            else:
                return self.getTypedRuleContext(SparqlParser.PrefixDeclContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_prologue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrologue" ):
                listener.enterPrologue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrologue" ):
                listener.exitPrologue(self)




    def prologue(self):

        localctx = SparqlParser.PrologueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_prologue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__0) | (1 << SparqlParser.T__1) | (1 << SparqlParser.T__2) | (1 << SparqlParser.T__3))) != 0):
                self.state = 287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__0, SparqlParser.T__1]:
                    self.state = 285
                    self.baseDecl()
                    pass
                elif token in [SparqlParser.T__2, SparqlParser.T__3]:
                    self.state = 286
                    self.prefixDecl()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IRIREF(self):
            return self.getToken(SparqlParser.IRIREF, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_baseDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseDecl" ):
                listener.enterBaseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseDecl" ):
                listener.exitBaseDecl(self)




    def baseDecl(self):

        localctx = SparqlParser.BaseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_baseDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__0 or _la==SparqlParser.T__1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 293
            self.match(SparqlParser.IRIREF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PNAME_NS(self):
            return self.getToken(SparqlParser.PNAME_NS, 0)

        def IRIREF(self):
            return self.getToken(SparqlParser.IRIREF, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_prefixDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixDecl" ):
                listener.enterPrefixDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixDecl" ):
                listener.exitPrefixDecl(self)




    def prefixDecl(self):

        localctx = SparqlParser.PrefixDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_prefixDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__2 or _la==SparqlParser.T__3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 296
            self.match(SparqlParser.PNAME_NS)
            self.state = 297
            self.match(SparqlParser.IRIREF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(SparqlParser.SelectClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SparqlParser.WhereClauseContext,0)


        def solutionModifier(self):
            return self.getTypedRuleContext(SparqlParser.SolutionModifierContext,0)


        def datasetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.DatasetClauseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.DatasetClauseContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_selectQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectQuery" ):
                listener.enterSelectQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectQuery" ):
                listener.exitSelectQuery(self)




    def selectQuery(self):

        localctx = SparqlParser.SelectQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_selectQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.selectClause()
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__25 or _la==SparqlParser.T__26:
                self.state = 300
                self.datasetClause()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self.whereClause()
            self.state = 307
            self.solutionModifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(SparqlParser.SelectClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SparqlParser.WhereClauseContext,0)


        def solutionModifier(self):
            return self.getTypedRuleContext(SparqlParser.SolutionModifierContext,0)


        def valuesClause(self):
            return self.getTypedRuleContext(SparqlParser.ValuesClauseContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_subSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubSelect" ):
                listener.enterSubSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubSelect" ):
                listener.exitSubSelect(self)




    def subSelect(self):

        localctx = SparqlParser.SubSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_subSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.selectClause()
            self.state = 310
            self.whereClause()
            self.state = 311
            self.solutionModifier()
            self.state = 312
            self.valuesClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.VarContext)
            else:
                return self.getTypedRuleContext(SparqlParser.VarContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)




    def selectClause(self):

        localctx = SparqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__4 or _la==SparqlParser.T__5):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__6) | (1 << SparqlParser.T__7) | (1 << SparqlParser.T__8) | (1 << SparqlParser.T__9))) != 0):
                self.state = 315
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__6) | (1 << SparqlParser.T__7) | (1 << SparqlParser.T__8) | (1 << SparqlParser.T__9))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10, SparqlParser.VAR1, SparqlParser.VAR2]:
                self.state = 325 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 325
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                        self.state = 318
                        self.var()
                        pass
                    elif token in [SparqlParser.T__10]:
                        self.state = 319
                        self.match(SparqlParser.T__10)
                        self.state = 320
                        self.expression()
                        self.state = 321
                        _la = self._input.LA(1)
                        if not(_la==SparqlParser.T__11 or _la==SparqlParser.T__12):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 322
                        self.var()
                        self.state = 323
                        self.match(SparqlParser.T__13)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 327 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SparqlParser.T__10 or _la==SparqlParser.VAR1 or _la==SparqlParser.VAR2):
                        break

                pass
            elif token in [SparqlParser.T__14]:
                self.state = 329
                self.match(SparqlParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructTemplate(self):
            return self.getTypedRuleContext(SparqlParser.ConstructTemplateContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SparqlParser.WhereClauseContext,0)


        def solutionModifier(self):
            return self.getTypedRuleContext(SparqlParser.SolutionModifierContext,0)


        def datasetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.DatasetClauseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.DatasetClauseContext,i)


        def triplesTemplate(self):
            return self.getTypedRuleContext(SparqlParser.TriplesTemplateContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_constructQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructQuery" ):
                listener.enterConstructQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructQuery" ):
                listener.exitConstructQuery(self)




    def constructQuery(self):

        localctx = SparqlParser.ConstructQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_constructQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__15 or _la==SparqlParser.T__16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__19]:
                self.state = 333
                self.constructTemplate()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SparqlParser.T__25 or _la==SparqlParser.T__26:
                    self.state = 334
                    self.datasetClause()
                    self.state = 339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 340
                self.whereClause()
                self.state = 341
                self.solutionModifier()
                pass
            elif token in [SparqlParser.T__17, SparqlParser.T__18, SparqlParser.T__25, SparqlParser.T__26]:
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SparqlParser.T__25 or _la==SparqlParser.T__26:
                    self.state = 343
                    self.datasetClause()
                    self.state = 348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 349
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__17 or _la==SparqlParser.T__18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 350
                self.match(SparqlParser.T__19)
                self.state = 352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 351
                    self.triplesTemplate()


                self.state = 354
                self.match(SparqlParser.T__20)
                self.state = 355
                self.solutionModifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def solutionModifier(self):
            return self.getTypedRuleContext(SparqlParser.SolutionModifierContext,0)


        def datasetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.DatasetClauseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.DatasetClauseContext,i)


        def whereClause(self):
            return self.getTypedRuleContext(SparqlParser.WhereClauseContext,0)


        def varOrIri(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.VarOrIriContext)
            else:
                return self.getTypedRuleContext(SparqlParser.VarOrIriContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_describeQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)




    def describeQuery(self):

        localctx = SparqlParser.DescribeQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_describeQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__21 or _la==SparqlParser.T__22):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN, SparqlParser.VAR1, SparqlParser.VAR2]:
                self.state = 360 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 359
                    self.varOrIri()
                    self.state = 362 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0)):
                        break

                pass
            elif token in [SparqlParser.T__14]:
                self.state = 364
                self.match(SparqlParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__25 or _la==SparqlParser.T__26:
                self.state = 367
                self.datasetClause()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__17) | (1 << SparqlParser.T__18) | (1 << SparqlParser.T__19))) != 0):
                self.state = 373
                self.whereClause()


            self.state = 376
            self.solutionModifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AskQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whereClause(self):
            return self.getTypedRuleContext(SparqlParser.WhereClauseContext,0)


        def solutionModifier(self):
            return self.getTypedRuleContext(SparqlParser.SolutionModifierContext,0)


        def datasetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.DatasetClauseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.DatasetClauseContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_askQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAskQuery" ):
                listener.enterAskQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAskQuery" ):
                listener.exitAskQuery(self)




    def askQuery(self):

        localctx = SparqlParser.AskQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_askQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__23 or _la==SparqlParser.T__24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__25 or _la==SparqlParser.T__26:
                self.state = 379
                self.datasetClause()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 385
            self.whereClause()
            self.state = 386
            self.solutionModifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatasetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultGraphClause(self):
            return self.getTypedRuleContext(SparqlParser.DefaultGraphClauseContext,0)


        def namedGraphClause(self):
            return self.getTypedRuleContext(SparqlParser.NamedGraphClauseContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_datasetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatasetClause" ):
                listener.enterDatasetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatasetClause" ):
                listener.exitDatasetClause(self)




    def datasetClause(self):

        localctx = SparqlParser.DatasetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_datasetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__25 or _la==SparqlParser.T__26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.state = 389
                self.defaultGraphClause()
                pass
            elif token in [SparqlParser.T__27, SparqlParser.T__28]:
                self.state = 390
                self.namedGraphClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultGraphClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceSelector(self):
            return self.getTypedRuleContext(SparqlParser.SourceSelectorContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_defaultGraphClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultGraphClause" ):
                listener.enterDefaultGraphClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultGraphClause" ):
                listener.exitDefaultGraphClause(self)




    def defaultGraphClause(self):

        localctx = SparqlParser.DefaultGraphClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_defaultGraphClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.sourceSelector()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedGraphClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceSelector(self):
            return self.getTypedRuleContext(SparqlParser.SourceSelectorContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_namedGraphClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedGraphClause" ):
                listener.enterNamedGraphClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedGraphClause" ):
                listener.exitNamedGraphClause(self)




    def namedGraphClause(self):

        localctx = SparqlParser.NamedGraphClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_namedGraphClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__27 or _la==SparqlParser.T__28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 396
            self.sourceSelector()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_sourceSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceSelector" ):
                listener.enterSourceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceSelector" ):
                listener.exitSourceSelector(self)




    def sourceSelector(self):

        localctx = SparqlParser.SourceSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_sourceSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.iri()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = SparqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_whereClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__17 or _la==SparqlParser.T__18:
                self.state = 400
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__17 or _la==SparqlParser.T__18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 403
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SolutionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupClause(self):
            return self.getTypedRuleContext(SparqlParser.GroupClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SparqlParser.HavingClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(SparqlParser.OrderClauseContext,0)


        def limitOffsetClauses(self):
            return self.getTypedRuleContext(SparqlParser.LimitOffsetClausesContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_solutionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolutionModifier" ):
                listener.enterSolutionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolutionModifier" ):
                listener.exitSolutionModifier(self)




    def solutionModifier(self):

        localctx = SparqlParser.SolutionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_solutionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__29 or _la==SparqlParser.T__30:
                self.state = 405
                self.groupClause()


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__33 or _la==SparqlParser.T__34:
                self.state = 408
                self.havingClause()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__35 or _la==SparqlParser.T__36:
                self.state = 411
                self.orderClause()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__41) | (1 << SparqlParser.T__42) | (1 << SparqlParser.T__43) | (1 << SparqlParser.T__44))) != 0):
                self.state = 414
                self.limitOffsetClauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GroupConditionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GroupConditionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_groupClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupClause" ):
                listener.enterGroupClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupClause" ):
                listener.exitGroupClause(self)




    def groupClause(self):

        localctx = SparqlParser.GroupClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_groupClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__29 or _la==SparqlParser.T__30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 418
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__31 or _la==SparqlParser.T__32):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 420 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 419
                self.groupCondition()
                self.state = 422 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SparqlParser.T__10 or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (SparqlParser.T__124 - 125)) | (1 << (SparqlParser.T__125 - 125)) | (1 << (SparqlParser.T__127 - 125)) | (1 << (SparqlParser.T__128 - 125)) | (1 << (SparqlParser.T__129 - 125)) | (1 << (SparqlParser.T__130 - 125)) | (1 << (SparqlParser.T__131 - 125)) | (1 << (SparqlParser.T__132 - 125)) | (1 << (SparqlParser.T__133 - 125)) | (1 << (SparqlParser.T__134 - 125)) | (1 << (SparqlParser.T__135 - 125)) | (1 << (SparqlParser.T__136 - 125)) | (1 << (SparqlParser.T__137 - 125)) | (1 << (SparqlParser.T__138 - 125)) | (1 << (SparqlParser.T__139 - 125)) | (1 << (SparqlParser.T__140 - 125)) | (1 << (SparqlParser.T__141 - 125)) | (1 << (SparqlParser.T__142 - 125)) | (1 << (SparqlParser.T__143 - 125)) | (1 << (SparqlParser.T__144 - 125)) | (1 << (SparqlParser.T__145 - 125)) | (1 << (SparqlParser.T__146 - 125)) | (1 << (SparqlParser.T__147 - 125)) | (1 << (SparqlParser.T__148 - 125)) | (1 << (SparqlParser.T__149 - 125)) | (1 << (SparqlParser.T__150 - 125)) | (1 << (SparqlParser.T__151 - 125)) | (1 << (SparqlParser.T__152 - 125)) | (1 << (SparqlParser.T__153 - 125)) | (1 << (SparqlParser.T__154 - 125)) | (1 << (SparqlParser.T__155 - 125)) | (1 << (SparqlParser.T__156 - 125)) | (1 << (SparqlParser.T__157 - 125)) | (1 << (SparqlParser.T__158 - 125)) | (1 << (SparqlParser.T__159 - 125)) | (1 << (SparqlParser.T__160 - 125)) | (1 << (SparqlParser.T__161 - 125)) | (1 << (SparqlParser.T__162 - 125)) | (1 << (SparqlParser.T__163 - 125)) | (1 << (SparqlParser.T__164 - 125)) | (1 << (SparqlParser.T__165 - 125)) | (1 << (SparqlParser.T__166 - 125)) | (1 << (SparqlParser.T__167 - 125)) | (1 << (SparqlParser.T__168 - 125)) | (1 << (SparqlParser.T__169 - 125)) | (1 << (SparqlParser.T__170 - 125)) | (1 << (SparqlParser.T__171 - 125)) | (1 << (SparqlParser.T__172 - 125)) | (1 << (SparqlParser.T__173 - 125)) | (1 << (SparqlParser.T__174 - 125)) | (1 << (SparqlParser.T__175 - 125)) | (1 << (SparqlParser.T__176 - 125)) | (1 << (SparqlParser.T__177 - 125)) | (1 << (SparqlParser.T__178 - 125)) | (1 << (SparqlParser.T__179 - 125)) | (1 << (SparqlParser.T__180 - 125)) | (1 << (SparqlParser.T__181 - 125)) | (1 << (SparqlParser.T__182 - 125)) | (1 << (SparqlParser.T__183 - 125)) | (1 << (SparqlParser.T__184 - 125)) | (1 << (SparqlParser.T__185 - 125)) | (1 << (SparqlParser.T__186 - 125)) | (1 << (SparqlParser.T__187 - 125)))) != 0) or ((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (SparqlParser.T__188 - 189)) | (1 << (SparqlParser.T__189 - 189)) | (1 << (SparqlParser.T__190 - 189)) | (1 << (SparqlParser.T__191 - 189)) | (1 << (SparqlParser.T__192 - 189)) | (1 << (SparqlParser.T__193 - 189)) | (1 << (SparqlParser.T__194 - 189)) | (1 << (SparqlParser.T__195 - 189)) | (1 << (SparqlParser.T__196 - 189)) | (1 << (SparqlParser.T__197 - 189)) | (1 << (SparqlParser.T__198 - 189)) | (1 << (SparqlParser.T__199 - 189)) | (1 << (SparqlParser.T__200 - 189)) | (1 << (SparqlParser.T__201 - 189)) | (1 << (SparqlParser.T__202 - 189)) | (1 << (SparqlParser.T__203 - 189)) | (1 << (SparqlParser.T__204 - 189)) | (1 << (SparqlParser.T__205 - 189)) | (1 << (SparqlParser.T__206 - 189)) | (1 << (SparqlParser.T__207 - 189)) | (1 << (SparqlParser.T__208 - 189)) | (1 << (SparqlParser.T__209 - 189)) | (1 << (SparqlParser.T__210 - 189)) | (1 << (SparqlParser.T__211 - 189)) | (1 << (SparqlParser.T__212 - 189)) | (1 << (SparqlParser.T__213 - 189)) | (1 << (SparqlParser.T__214 - 189)) | (1 << (SparqlParser.T__215 - 189)) | (1 << (SparqlParser.T__216 - 189)) | (1 << (SparqlParser.T__217 - 189)) | (1 << (SparqlParser.T__218 - 189)) | (1 << (SparqlParser.T__219 - 189)) | (1 << (SparqlParser.T__220 - 189)) | (1 << (SparqlParser.T__221 - 189)) | (1 << (SparqlParser.T__222 - 189)) | (1 << (SparqlParser.T__223 - 189)) | (1 << (SparqlParser.T__224 - 189)) | (1 << (SparqlParser.T__225 - 189)) | (1 << (SparqlParser.T__226 - 189)) | (1 << (SparqlParser.T__227 - 189)) | (1 << (SparqlParser.T__228 - 189)) | (1 << (SparqlParser.T__229 - 189)) | (1 << (SparqlParser.T__230 - 189)) | (1 << (SparqlParser.T__231 - 189)) | (1 << (SparqlParser.T__232 - 189)) | (1 << (SparqlParser.T__233 - 189)) | (1 << (SparqlParser.T__234 - 189)) | (1 << (SparqlParser.T__235 - 189)) | (1 << (SparqlParser.T__236 - 189)) | (1 << (SparqlParser.T__237 - 189)) | (1 << (SparqlParser.T__238 - 189)) | (1 << (SparqlParser.T__239 - 189)) | (1 << (SparqlParser.T__240 - 189)) | (1 << (SparqlParser.T__241 - 189)) | (1 << (SparqlParser.T__242 - 189)) | (1 << (SparqlParser.T__243 - 189)) | (1 << (SparqlParser.T__244 - 189)) | (1 << (SparqlParser.T__245 - 189)) | (1 << (SparqlParser.T__246 - 189)))) != 0) or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtInCall(self):
            return self.getTypedRuleContext(SparqlParser.BuiltInCallContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SparqlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(SparqlParser.ExpressionContext,0)


        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_groupCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupCondition" ):
                listener.enterGroupCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupCondition" ):
                listener.exitGroupCondition(self)




    def groupCondition(self):

        localctx = SparqlParser.GroupConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_groupCondition)
        self._la = 0 # Token type
        try:
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.builtInCall()
                pass
            elif token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.functionCall()
                pass
            elif token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.match(SparqlParser.T__10)
                self.state = 427
                self.expression()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__11 or _la==SparqlParser.T__12:
                    self.state = 428
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__11 or _la==SparqlParser.T__12):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 429
                    self.var()


                self.state = 432
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 434
                self.var()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def havingCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.HavingConditionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.HavingConditionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = SparqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_havingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__33 or _la==SparqlParser.T__34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 439 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 438
                self.havingCondition()
                self.state = 441 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SparqlParser.T__10 or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (SparqlParser.T__124 - 125)) | (1 << (SparqlParser.T__125 - 125)) | (1 << (SparqlParser.T__127 - 125)) | (1 << (SparqlParser.T__128 - 125)) | (1 << (SparqlParser.T__129 - 125)) | (1 << (SparqlParser.T__130 - 125)) | (1 << (SparqlParser.T__131 - 125)) | (1 << (SparqlParser.T__132 - 125)) | (1 << (SparqlParser.T__133 - 125)) | (1 << (SparqlParser.T__134 - 125)) | (1 << (SparqlParser.T__135 - 125)) | (1 << (SparqlParser.T__136 - 125)) | (1 << (SparqlParser.T__137 - 125)) | (1 << (SparqlParser.T__138 - 125)) | (1 << (SparqlParser.T__139 - 125)) | (1 << (SparqlParser.T__140 - 125)) | (1 << (SparqlParser.T__141 - 125)) | (1 << (SparqlParser.T__142 - 125)) | (1 << (SparqlParser.T__143 - 125)) | (1 << (SparqlParser.T__144 - 125)) | (1 << (SparqlParser.T__145 - 125)) | (1 << (SparqlParser.T__146 - 125)) | (1 << (SparqlParser.T__147 - 125)) | (1 << (SparqlParser.T__148 - 125)) | (1 << (SparqlParser.T__149 - 125)) | (1 << (SparqlParser.T__150 - 125)) | (1 << (SparqlParser.T__151 - 125)) | (1 << (SparqlParser.T__152 - 125)) | (1 << (SparqlParser.T__153 - 125)) | (1 << (SparqlParser.T__154 - 125)) | (1 << (SparqlParser.T__155 - 125)) | (1 << (SparqlParser.T__156 - 125)) | (1 << (SparqlParser.T__157 - 125)) | (1 << (SparqlParser.T__158 - 125)) | (1 << (SparqlParser.T__159 - 125)) | (1 << (SparqlParser.T__160 - 125)) | (1 << (SparqlParser.T__161 - 125)) | (1 << (SparqlParser.T__162 - 125)) | (1 << (SparqlParser.T__163 - 125)) | (1 << (SparqlParser.T__164 - 125)) | (1 << (SparqlParser.T__165 - 125)) | (1 << (SparqlParser.T__166 - 125)) | (1 << (SparqlParser.T__167 - 125)) | (1 << (SparqlParser.T__168 - 125)) | (1 << (SparqlParser.T__169 - 125)) | (1 << (SparqlParser.T__170 - 125)) | (1 << (SparqlParser.T__171 - 125)) | (1 << (SparqlParser.T__172 - 125)) | (1 << (SparqlParser.T__173 - 125)) | (1 << (SparqlParser.T__174 - 125)) | (1 << (SparqlParser.T__175 - 125)) | (1 << (SparqlParser.T__176 - 125)) | (1 << (SparqlParser.T__177 - 125)) | (1 << (SparqlParser.T__178 - 125)) | (1 << (SparqlParser.T__179 - 125)) | (1 << (SparqlParser.T__180 - 125)) | (1 << (SparqlParser.T__181 - 125)) | (1 << (SparqlParser.T__182 - 125)) | (1 << (SparqlParser.T__183 - 125)) | (1 << (SparqlParser.T__184 - 125)) | (1 << (SparqlParser.T__185 - 125)) | (1 << (SparqlParser.T__186 - 125)) | (1 << (SparqlParser.T__187 - 125)))) != 0) or ((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (SparqlParser.T__188 - 189)) | (1 << (SparqlParser.T__189 - 189)) | (1 << (SparqlParser.T__190 - 189)) | (1 << (SparqlParser.T__191 - 189)) | (1 << (SparqlParser.T__192 - 189)) | (1 << (SparqlParser.T__193 - 189)) | (1 << (SparqlParser.T__194 - 189)) | (1 << (SparqlParser.T__195 - 189)) | (1 << (SparqlParser.T__196 - 189)) | (1 << (SparqlParser.T__197 - 189)) | (1 << (SparqlParser.T__198 - 189)) | (1 << (SparqlParser.T__199 - 189)) | (1 << (SparqlParser.T__200 - 189)) | (1 << (SparqlParser.T__201 - 189)) | (1 << (SparqlParser.T__202 - 189)) | (1 << (SparqlParser.T__203 - 189)) | (1 << (SparqlParser.T__204 - 189)) | (1 << (SparqlParser.T__205 - 189)) | (1 << (SparqlParser.T__206 - 189)) | (1 << (SparqlParser.T__207 - 189)) | (1 << (SparqlParser.T__208 - 189)) | (1 << (SparqlParser.T__209 - 189)) | (1 << (SparqlParser.T__210 - 189)) | (1 << (SparqlParser.T__211 - 189)) | (1 << (SparqlParser.T__212 - 189)) | (1 << (SparqlParser.T__213 - 189)) | (1 << (SparqlParser.T__214 - 189)) | (1 << (SparqlParser.T__215 - 189)) | (1 << (SparqlParser.T__216 - 189)) | (1 << (SparqlParser.T__217 - 189)) | (1 << (SparqlParser.T__218 - 189)) | (1 << (SparqlParser.T__219 - 189)) | (1 << (SparqlParser.T__220 - 189)) | (1 << (SparqlParser.T__221 - 189)) | (1 << (SparqlParser.T__222 - 189)) | (1 << (SparqlParser.T__223 - 189)) | (1 << (SparqlParser.T__224 - 189)) | (1 << (SparqlParser.T__225 - 189)) | (1 << (SparqlParser.T__226 - 189)) | (1 << (SparqlParser.T__227 - 189)) | (1 << (SparqlParser.T__228 - 189)) | (1 << (SparqlParser.T__229 - 189)) | (1 << (SparqlParser.T__230 - 189)) | (1 << (SparqlParser.T__231 - 189)) | (1 << (SparqlParser.T__232 - 189)) | (1 << (SparqlParser.T__233 - 189)) | (1 << (SparqlParser.T__234 - 189)) | (1 << (SparqlParser.T__235 - 189)) | (1 << (SparqlParser.T__236 - 189)) | (1 << (SparqlParser.T__237 - 189)) | (1 << (SparqlParser.T__238 - 189)) | (1 << (SparqlParser.T__239 - 189)) | (1 << (SparqlParser.T__240 - 189)) | (1 << (SparqlParser.T__241 - 189)) | (1 << (SparqlParser.T__242 - 189)) | (1 << (SparqlParser.T__243 - 189)) | (1 << (SparqlParser.T__244 - 189)) | (1 << (SparqlParser.T__245 - 189)) | (1 << (SparqlParser.T__246 - 189)))) != 0) or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint(self):
            return self.getTypedRuleContext(SparqlParser.ConstraintContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_havingCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingCondition" ):
                listener.enterHavingCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingCondition" ):
                listener.exitHavingCondition(self)




    def havingCondition(self):

        localctx = SparqlParser.HavingConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_havingCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.OrderConditionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.OrderConditionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_orderClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderClause" ):
                listener.enterOrderClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderClause" ):
                listener.exitOrderClause(self)




    def orderClause(self):

        localctx = SparqlParser.OrderClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_orderClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__35 or _la==SparqlParser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 446
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__31 or _la==SparqlParser.T__32):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 448 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 447
                self.orderCondition()
                self.state = 450 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__10) | (1 << SparqlParser.T__37) | (1 << SparqlParser.T__38) | (1 << SparqlParser.T__39) | (1 << SparqlParser.T__40))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (SparqlParser.T__124 - 125)) | (1 << (SparqlParser.T__125 - 125)) | (1 << (SparqlParser.T__127 - 125)) | (1 << (SparqlParser.T__128 - 125)) | (1 << (SparqlParser.T__129 - 125)) | (1 << (SparqlParser.T__130 - 125)) | (1 << (SparqlParser.T__131 - 125)) | (1 << (SparqlParser.T__132 - 125)) | (1 << (SparqlParser.T__133 - 125)) | (1 << (SparqlParser.T__134 - 125)) | (1 << (SparqlParser.T__135 - 125)) | (1 << (SparqlParser.T__136 - 125)) | (1 << (SparqlParser.T__137 - 125)) | (1 << (SparqlParser.T__138 - 125)) | (1 << (SparqlParser.T__139 - 125)) | (1 << (SparqlParser.T__140 - 125)) | (1 << (SparqlParser.T__141 - 125)) | (1 << (SparqlParser.T__142 - 125)) | (1 << (SparqlParser.T__143 - 125)) | (1 << (SparqlParser.T__144 - 125)) | (1 << (SparqlParser.T__145 - 125)) | (1 << (SparqlParser.T__146 - 125)) | (1 << (SparqlParser.T__147 - 125)) | (1 << (SparqlParser.T__148 - 125)) | (1 << (SparqlParser.T__149 - 125)) | (1 << (SparqlParser.T__150 - 125)) | (1 << (SparqlParser.T__151 - 125)) | (1 << (SparqlParser.T__152 - 125)) | (1 << (SparqlParser.T__153 - 125)) | (1 << (SparqlParser.T__154 - 125)) | (1 << (SparqlParser.T__155 - 125)) | (1 << (SparqlParser.T__156 - 125)) | (1 << (SparqlParser.T__157 - 125)) | (1 << (SparqlParser.T__158 - 125)) | (1 << (SparqlParser.T__159 - 125)) | (1 << (SparqlParser.T__160 - 125)) | (1 << (SparqlParser.T__161 - 125)) | (1 << (SparqlParser.T__162 - 125)) | (1 << (SparqlParser.T__163 - 125)) | (1 << (SparqlParser.T__164 - 125)) | (1 << (SparqlParser.T__165 - 125)) | (1 << (SparqlParser.T__166 - 125)) | (1 << (SparqlParser.T__167 - 125)) | (1 << (SparqlParser.T__168 - 125)) | (1 << (SparqlParser.T__169 - 125)) | (1 << (SparqlParser.T__170 - 125)) | (1 << (SparqlParser.T__171 - 125)) | (1 << (SparqlParser.T__172 - 125)) | (1 << (SparqlParser.T__173 - 125)) | (1 << (SparqlParser.T__174 - 125)) | (1 << (SparqlParser.T__175 - 125)) | (1 << (SparqlParser.T__176 - 125)) | (1 << (SparqlParser.T__177 - 125)) | (1 << (SparqlParser.T__178 - 125)) | (1 << (SparqlParser.T__179 - 125)) | (1 << (SparqlParser.T__180 - 125)) | (1 << (SparqlParser.T__181 - 125)) | (1 << (SparqlParser.T__182 - 125)) | (1 << (SparqlParser.T__183 - 125)) | (1 << (SparqlParser.T__184 - 125)) | (1 << (SparqlParser.T__185 - 125)) | (1 << (SparqlParser.T__186 - 125)) | (1 << (SparqlParser.T__187 - 125)))) != 0) or ((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (SparqlParser.T__188 - 189)) | (1 << (SparqlParser.T__189 - 189)) | (1 << (SparqlParser.T__190 - 189)) | (1 << (SparqlParser.T__191 - 189)) | (1 << (SparqlParser.T__192 - 189)) | (1 << (SparqlParser.T__193 - 189)) | (1 << (SparqlParser.T__194 - 189)) | (1 << (SparqlParser.T__195 - 189)) | (1 << (SparqlParser.T__196 - 189)) | (1 << (SparqlParser.T__197 - 189)) | (1 << (SparqlParser.T__198 - 189)) | (1 << (SparqlParser.T__199 - 189)) | (1 << (SparqlParser.T__200 - 189)) | (1 << (SparqlParser.T__201 - 189)) | (1 << (SparqlParser.T__202 - 189)) | (1 << (SparqlParser.T__203 - 189)) | (1 << (SparqlParser.T__204 - 189)) | (1 << (SparqlParser.T__205 - 189)) | (1 << (SparqlParser.T__206 - 189)) | (1 << (SparqlParser.T__207 - 189)) | (1 << (SparqlParser.T__208 - 189)) | (1 << (SparqlParser.T__209 - 189)) | (1 << (SparqlParser.T__210 - 189)) | (1 << (SparqlParser.T__211 - 189)) | (1 << (SparqlParser.T__212 - 189)) | (1 << (SparqlParser.T__213 - 189)) | (1 << (SparqlParser.T__214 - 189)) | (1 << (SparqlParser.T__215 - 189)) | (1 << (SparqlParser.T__216 - 189)) | (1 << (SparqlParser.T__217 - 189)) | (1 << (SparqlParser.T__218 - 189)) | (1 << (SparqlParser.T__219 - 189)) | (1 << (SparqlParser.T__220 - 189)) | (1 << (SparqlParser.T__221 - 189)) | (1 << (SparqlParser.T__222 - 189)) | (1 << (SparqlParser.T__223 - 189)) | (1 << (SparqlParser.T__224 - 189)) | (1 << (SparqlParser.T__225 - 189)) | (1 << (SparqlParser.T__226 - 189)) | (1 << (SparqlParser.T__227 - 189)) | (1 << (SparqlParser.T__228 - 189)) | (1 << (SparqlParser.T__229 - 189)) | (1 << (SparqlParser.T__230 - 189)) | (1 << (SparqlParser.T__231 - 189)) | (1 << (SparqlParser.T__232 - 189)) | (1 << (SparqlParser.T__233 - 189)) | (1 << (SparqlParser.T__234 - 189)) | (1 << (SparqlParser.T__235 - 189)) | (1 << (SparqlParser.T__236 - 189)) | (1 << (SparqlParser.T__237 - 189)) | (1 << (SparqlParser.T__238 - 189)) | (1 << (SparqlParser.T__239 - 189)) | (1 << (SparqlParser.T__240 - 189)) | (1 << (SparqlParser.T__241 - 189)) | (1 << (SparqlParser.T__242 - 189)) | (1 << (SparqlParser.T__243 - 189)) | (1 << (SparqlParser.T__244 - 189)) | (1 << (SparqlParser.T__245 - 189)) | (1 << (SparqlParser.T__246 - 189)))) != 0) or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def brackettedExpression(self):
            return self.getTypedRuleContext(SparqlParser.BrackettedExpressionContext,0)


        def constraint(self):
            return self.getTypedRuleContext(SparqlParser.ConstraintContext,0)


        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_orderCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderCondition" ):
                listener.enterOrderCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderCondition" ):
                listener.exitOrderCondition(self)




    def orderCondition(self):

        localctx = SparqlParser.OrderConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_orderCondition)
        self._la = 0 # Token type
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__37, SparqlParser.T__38, SparqlParser.T__39, SparqlParser.T__40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__37) | (1 << SparqlParser.T__38) | (1 << SparqlParser.T__39) | (1 << SparqlParser.T__40))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 453
                self.brackettedExpression()
                pass
            elif token in [SparqlParser.T__10, SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN, SparqlParser.VAR1, SparqlParser.VAR2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__10, SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                    self.state = 454
                    self.constraint()
                    pass
                elif token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                    self.state = 455
                    self.var()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOffsetClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limitClause(self):
            return self.getTypedRuleContext(SparqlParser.LimitClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(SparqlParser.OffsetClauseContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_limitOffsetClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOffsetClauses" ):
                listener.enterLimitOffsetClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOffsetClauses" ):
                listener.exitLimitOffsetClauses(self)




    def limitOffsetClauses(self):

        localctx = SparqlParser.LimitOffsetClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_limitOffsetClauses)
        self._la = 0 # Token type
        try:
            self.state = 468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__41, SparqlParser.T__42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.limitClause()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__43 or _la==SparqlParser.T__44:
                    self.state = 461
                    self.offsetClause()


                pass
            elif token in [SparqlParser.T__43, SparqlParser.T__44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.offsetClause()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__41 or _la==SparqlParser.T__42:
                    self.state = 465
                    self.limitClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(SparqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = SparqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_limitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__41 or _la==SparqlParser.T__42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 471
            self.match(SparqlParser.INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(SparqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_offsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetClause" ):
                listener.enterOffsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetClause" ):
                listener.exitOffsetClause(self)




    def offsetClause(self):

        localctx = SparqlParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_offsetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__43 or _la==SparqlParser.T__44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 474
            self.match(SparqlParser.INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataBlock(self):
            return self.getTypedRuleContext(SparqlParser.DataBlockContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_valuesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesClause" ):
                listener.enterValuesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesClause" ):
                listener.exitValuesClause(self)




    def valuesClause(self):

        localctx = SparqlParser.ValuesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_valuesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__45 or _la==SparqlParser.T__46:
                self.state = 476
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__45 or _la==SparqlParser.T__46):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 477
                self.dataBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prologue(self):
            return self.getTypedRuleContext(SparqlParser.PrologueContext,0)


        def update1(self):
            return self.getTypedRuleContext(SparqlParser.Update1Context,0)


        def update(self):
            return self.getTypedRuleContext(SparqlParser.UpdateContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)




    def update(self):

        localctx = SparqlParser.UpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_update)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.prologue()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (SparqlParser.T__48 - 49)) | (1 << (SparqlParser.T__49 - 49)) | (1 << (SparqlParser.T__54 - 49)) | (1 << (SparqlParser.T__55 - 49)) | (1 << (SparqlParser.T__56 - 49)) | (1 << (SparqlParser.T__57 - 49)) | (1 << (SparqlParser.T__58 - 49)) | (1 << (SparqlParser.T__59 - 49)) | (1 << (SparqlParser.T__60 - 49)) | (1 << (SparqlParser.T__61 - 49)) | (1 << (SparqlParser.T__64 - 49)) | (1 << (SparqlParser.T__65 - 49)) | (1 << (SparqlParser.T__66 - 49)) | (1 << (SparqlParser.T__67 - 49)) | (1 << (SparqlParser.T__68 - 49)) | (1 << (SparqlParser.T__69 - 49)) | (1 << (SparqlParser.T__70 - 49)) | (1 << (SparqlParser.T__71 - 49)) | (1 << (SparqlParser.T__72 - 49)) | (1 << (SparqlParser.T__73 - 49)) | (1 << (SparqlParser.T__74 - 49)) | (1 << (SparqlParser.T__75 - 49)) | (1 << (SparqlParser.T__76 - 49)) | (1 << (SparqlParser.T__77 - 49)) | (1 << (SparqlParser.T__78 - 49)) | (1 << (SparqlParser.T__79 - 49)))) != 0):
                self.state = 481
                self.update1()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__47:
                    self.state = 482
                    self.match(SparqlParser.T__47)
                    self.state = 483
                    self.update()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def load(self):
            return self.getTypedRuleContext(SparqlParser.LoadContext,0)


        def clear(self):
            return self.getTypedRuleContext(SparqlParser.ClearContext,0)


        def drop(self):
            return self.getTypedRuleContext(SparqlParser.DropContext,0)


        def add(self):
            return self.getTypedRuleContext(SparqlParser.AddContext,0)


        def move(self):
            return self.getTypedRuleContext(SparqlParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(SparqlParser.CopyContext,0)


        def create(self):
            return self.getTypedRuleContext(SparqlParser.CreateContext,0)


        def insertData(self):
            return self.getTypedRuleContext(SparqlParser.InsertDataContext,0)


        def deleteData(self):
            return self.getTypedRuleContext(SparqlParser.DeleteDataContext,0)


        def deleteWhere(self):
            return self.getTypedRuleContext(SparqlParser.DeleteWhereContext,0)


        def modify(self):
            return self.getTypedRuleContext(SparqlParser.ModifyContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_update1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate1" ):
                listener.enterUpdate1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate1" ):
                listener.exitUpdate1(self)




    def update1(self):

        localctx = SparqlParser.Update1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_update1)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__48, SparqlParser.T__49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.load()
                pass
            elif token in [SparqlParser.T__54, SparqlParser.T__55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self.clear()
                pass
            elif token in [SparqlParser.T__56, SparqlParser.T__57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 490
                self.drop()
                pass
            elif token in [SparqlParser.T__60, SparqlParser.T__61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 491
                self.add()
                pass
            elif token in [SparqlParser.T__64, SparqlParser.T__65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 492
                self.move()
                pass
            elif token in [SparqlParser.T__66, SparqlParser.T__67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 493
                self.copy()
                pass
            elif token in [SparqlParser.T__58, SparqlParser.T__59]:
                self.enterOuterAlt(localctx, 7)
                self.state = 494
                self.create()
                pass
            elif token in [SparqlParser.T__68, SparqlParser.T__69]:
                self.enterOuterAlt(localctx, 8)
                self.state = 495
                self.insertData()
                pass
            elif token in [SparqlParser.T__70, SparqlParser.T__71]:
                self.enterOuterAlt(localctx, 9)
                self.state = 496
                self.deleteData()
                pass
            elif token in [SparqlParser.T__72, SparqlParser.T__73]:
                self.enterOuterAlt(localctx, 10)
                self.state = 497
                self.deleteWhere()
                pass
            elif token in [SparqlParser.T__74, SparqlParser.T__75, SparqlParser.T__76, SparqlParser.T__77, SparqlParser.T__78, SparqlParser.T__79]:
                self.enterOuterAlt(localctx, 11)
                self.state = 498
                self.modify()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def graphRef(self):
            return self.getTypedRuleContext(SparqlParser.GraphRefContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_load

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoad" ):
                listener.enterLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoad" ):
                listener.exitLoad(self)




    def load(self):

        localctx = SparqlParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_load)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__48 or _la==SparqlParser.T__49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 502
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 505
            self.iri()
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__52 or _la==SparqlParser.T__53:
                self.state = 506
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__52 or _la==SparqlParser.T__53):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 507
                self.graphRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClearContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphRefAll(self):
            return self.getTypedRuleContext(SparqlParser.GraphRefAllContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_clear

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClear" ):
                listener.enterClear(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClear" ):
                listener.exitClear(self)




    def clear(self):

        localctx = SparqlParser.ClearContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_clear)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__54 or _la==SparqlParser.T__55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 511
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 514
            self.graphRefAll()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphRefAll(self):
            return self.getTypedRuleContext(SparqlParser.GraphRefAllContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop" ):
                listener.enterDrop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop" ):
                listener.exitDrop(self)




    def drop(self):

        localctx = SparqlParser.DropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__56 or _la==SparqlParser.T__57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 517
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 520
            self.graphRefAll()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphRef(self):
            return self.getTypedRuleContext(SparqlParser.GraphRefContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = SparqlParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__58 or _la==SparqlParser.T__59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 523
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 526
            self.graphRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GraphOrDefaultContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GraphOrDefaultContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd" ):
                listener.enterAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd" ):
                listener.exitAdd(self)




    def add(self):

        localctx = SparqlParser.AddContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__60 or _la==SparqlParser.T__61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 529
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 532
            self.graphOrDefault()
            self.state = 533
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__62 or _la==SparqlParser.T__63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 534
            self.graphOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GraphOrDefaultContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GraphOrDefaultContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = SparqlParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__64 or _la==SparqlParser.T__65):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 537
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 540
            self.graphOrDefault()
            self.state = 541
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__62 or _la==SparqlParser.T__63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 542
            self.graphOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GraphOrDefaultContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GraphOrDefaultContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = SparqlParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__66 or _la==SparqlParser.T__67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 545
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 548
            self.graphOrDefault()
            self.state = 549
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__62 or _la==SparqlParser.T__63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 550
            self.graphOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quadData(self):
            return self.getTypedRuleContext(SparqlParser.QuadDataContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_insertData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertData" ):
                listener.enterInsertData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertData" ):
                listener.exitInsertData(self)




    def insertData(self):

        localctx = SparqlParser.InsertDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_insertData)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__68 or _la==SparqlParser.T__69):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 553
            self.quadData()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quadData(self):
            return self.getTypedRuleContext(SparqlParser.QuadDataContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_deleteData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteData" ):
                listener.enterDeleteData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteData" ):
                listener.exitDeleteData(self)




    def deleteData(self):

        localctx = SparqlParser.DeleteDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_deleteData)

        allowsBlankNodes = False

        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__70 or _la==SparqlParser.T__71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            self.quadData()
            self._ctx.stop = self._input.LT(-1)

            allowsBlankNodes = True

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quadPattern(self):
            return self.getTypedRuleContext(SparqlParser.QuadPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_deleteWhere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteWhere" ):
                listener.enterDeleteWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteWhere" ):
                listener.exitDeleteWhere(self)




    def deleteWhere(self):

        localctx = SparqlParser.DeleteWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_deleteWhere)

        allowsBlankNodes = False

        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__72 or _la==SparqlParser.T__73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 559
            self.quadPattern()
            self._ctx.stop = self._input.LT(-1)

            allowsBlankNodes = True

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def deleteClause(self):
            return self.getTypedRuleContext(SparqlParser.DeleteClauseContext,0)


        def insertClause(self):
            return self.getTypedRuleContext(SparqlParser.InsertClauseContext,0)


        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def usingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.UsingClauseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.UsingClauseContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_modify

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify" ):
                listener.enterModify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify" ):
                listener.exitModify(self)




    def modify(self):

        localctx = SparqlParser.ModifyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_modify)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__74 or _la==SparqlParser.T__75:
                self.state = 561
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__74 or _la==SparqlParser.T__75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 562
                self.iri()


            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__76, SparqlParser.T__77]:
                self.state = 565
                self.deleteClause()
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__78 or _la==SparqlParser.T__79:
                    self.state = 566
                    self.insertClause()


                pass
            elif token in [SparqlParser.T__78, SparqlParser.T__79]:
                self.state = 569
                self.insertClause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__80 or _la==SparqlParser.T__81:
                self.state = 572
                self.usingClause()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 578
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__17 or _la==SparqlParser.T__18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 579
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quadPattern(self):
            return self.getTypedRuleContext(SparqlParser.QuadPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_deleteClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteClause" ):
                listener.enterDeleteClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteClause" ):
                listener.exitDeleteClause(self)




    def deleteClause(self):

        localctx = SparqlParser.DeleteClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_deleteClause)

        allowsBlankNodes = False

        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__76 or _la==SparqlParser.T__77):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 582
            self.quadPattern()
            self._ctx.stop = self._input.LT(-1)

            allowsBlankNodes = True

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quadPattern(self):
            return self.getTypedRuleContext(SparqlParser.QuadPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_insertClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertClause" ):
                listener.enterInsertClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertClause" ):
                listener.exitInsertClause(self)




    def insertClause(self):

        localctx = SparqlParser.InsertClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_insertClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__78 or _la==SparqlParser.T__79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 585
            self.quadPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_usingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingClause" ):
                listener.enterUsingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingClause" ):
                listener.exitUsingClause(self)




    def usingClause(self):

        localctx = SparqlParser.UsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_usingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__80 or _la==SparqlParser.T__81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.state = 588
                self.iri()
                pass
            elif token in [SparqlParser.T__27, SparqlParser.T__28]:
                self.state = 589
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__27 or _la==SparqlParser.T__28):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 590
                self.iri()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphOrDefault" ):
                listener.enterGraphOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphOrDefault" ):
                listener.exitGraphOrDefault(self)




    def graphOrDefault(self):

        localctx = SparqlParser.GraphOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_graphOrDefault)
        self._la = 0 # Token type
        try:
            self.state = 598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__82, SparqlParser.T__83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 593
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__82 or _la==SparqlParser.T__83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SparqlParser.T__84, SparqlParser.T__85, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__84 or _la==SparqlParser.T__85:
                    self.state = 594
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__84 or _la==SparqlParser.T__85):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 597
                self.iri()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphRef" ):
                listener.enterGraphRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphRef" ):
                listener.exitGraphRef(self)




    def graphRef(self):

        localctx = SparqlParser.GraphRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_graphRef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__84 or _la==SparqlParser.T__85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 601
            self.iri()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphRefAllContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphRef(self):
            return self.getTypedRuleContext(SparqlParser.GraphRefContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphRefAll

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphRefAll" ):
                listener.enterGraphRefAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphRefAll" ):
                listener.exitGraphRefAll(self)




    def graphRefAll(self):

        localctx = SparqlParser.GraphRefAllContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_graphRefAll)
        self._la = 0 # Token type
        try:
            self.state = 607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__84, SparqlParser.T__85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.graphRef()
                pass
            elif token in [SparqlParser.T__82, SparqlParser.T__83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__82 or _la==SparqlParser.T__83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SparqlParser.T__27, SparqlParser.T__28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__27 or _la==SparqlParser.T__28):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SparqlParser.T__86, SparqlParser.T__87]:
                self.enterOuterAlt(localctx, 4)
                self.state = 606
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__86 or _la==SparqlParser.T__87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuadPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quads(self):
            return self.getTypedRuleContext(SparqlParser.QuadsContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_quadPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuadPattern" ):
                listener.enterQuadPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuadPattern" ):
                listener.exitQuadPattern(self)




    def quadPattern(self):

        localctx = SparqlParser.QuadPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_quadPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(SparqlParser.T__19)
            self.state = 610
            self.quads()
            self.state = 611
            self.match(SparqlParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuadDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quads(self):
            return self.getTypedRuleContext(SparqlParser.QuadsContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_quadData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuadData" ):
                listener.enterQuadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuadData" ):
                listener.exitQuadData(self)




    def quadData(self):

        localctx = SparqlParser.QuadDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_quadData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(SparqlParser.T__19)
            self.state = 614
            self.quads()
            self.state = 615
            self.match(SparqlParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuadsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesTemplate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.TriplesTemplateContext)
            else:
                return self.getTypedRuleContext(SparqlParser.TriplesTemplateContext,i)


        def quadsNotTriples(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.QuadsNotTriplesContext)
            else:
                return self.getTypedRuleContext(SparqlParser.QuadsNotTriplesContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_quads

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuads" ):
                listener.enterQuads(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuads" ):
                listener.exitQuads(self)




    def quads(self):

        localctx = SparqlParser.QuadsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_quads)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 617
                self.triplesTemplate()


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__84 or _la==SparqlParser.T__85:
                self.state = 620
                self.quadsNotTriples()
                self.state = 622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 621
                    self.match(SparqlParser.T__88)


                self.state = 625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 624
                    self.triplesTemplate()


                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuadsNotTriplesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrIri(self):
            return self.getTypedRuleContext(SparqlParser.VarOrIriContext,0)


        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_quadsNotTriples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuadsNotTriples" ):
                listener.enterQuadsNotTriples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuadsNotTriples" ):
                listener.exitQuadsNotTriples(self)




    def quadsNotTriples(self):

        localctx = SparqlParser.QuadsNotTriplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_quadsNotTriples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__84 or _la==SparqlParser.T__85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 633
            self.varOrIri()
            self.state = 634
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplesTemplateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesSameSubject(self):
            return self.getTypedRuleContext(SparqlParser.TriplesSameSubjectContext,0)


        def triplesTemplate(self):
            return self.getTypedRuleContext(SparqlParser.TriplesTemplateContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_triplesTemplate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplesTemplate" ):
                listener.enterTriplesTemplate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplesTemplate" ):
                listener.exitTriplesTemplate(self)




    def triplesTemplate(self):

        localctx = SparqlParser.TriplesTemplateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_triplesTemplate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.triplesSameSubject()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__88:
                self.state = 637
                self.match(SparqlParser.T__88)
                self.state = 639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self.triplesTemplate()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subSelect(self):
            return self.getTypedRuleContext(SparqlParser.SubSelectContext,0)


        def groupGraphPatternSub(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternSubContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_groupGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupGraphPattern" ):
                listener.enterGroupGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupGraphPattern" ):
                listener.exitGroupGraphPattern(self)




    def groupGraphPattern(self):

        localctx = SparqlParser.GroupGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_groupGraphPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(SparqlParser.T__19)
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 644
                self.subSelect()
                pass

            elif la_ == 2:
                self.state = 645
                self.groupGraphPatternSub()
                pass


            self.state = 648
            self.match(SparqlParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupGraphPatternSubContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.TriplesBlockContext)
            else:
                return self.getTypedRuleContext(SparqlParser.TriplesBlockContext,i)


        def graphPatternNotTriples(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GraphPatternNotTriplesContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GraphPatternNotTriplesContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_groupGraphPatternSub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupGraphPatternSub" ):
                listener.enterGroupGraphPatternSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupGraphPatternSub" ):
                listener.exitGroupGraphPatternSub(self)




    def groupGraphPatternSub(self):

        localctx = SparqlParser.GroupGraphPatternSubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_groupGraphPatternSub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 650
                self.triplesBlock()


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SparqlParser.T__19) | (1 << SparqlParser.T__45) | (1 << SparqlParser.T__46))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (SparqlParser.T__84 - 85)) | (1 << (SparqlParser.T__85 - 85)) | (1 << (SparqlParser.T__89 - 85)) | (1 << (SparqlParser.T__90 - 85)) | (1 << (SparqlParser.T__91 - 85)) | (1 << (SparqlParser.T__92 - 85)) | (1 << (SparqlParser.T__93 - 85)) | (1 << (SparqlParser.T__94 - 85)) | (1 << (SparqlParser.T__97 - 85)) | (1 << (SparqlParser.T__98 - 85)) | (1 << (SparqlParser.T__101 - 85)) | (1 << (SparqlParser.T__102 - 85)))) != 0):
                self.state = 653
                self.graphPatternNotTriples()
                self.state = 655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 654
                    self.match(SparqlParser.T__88)


                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 657
                    self.triplesBlock()


                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesSameSubjectPath(self):
            return self.getTypedRuleContext(SparqlParser.TriplesSameSubjectPathContext,0)


        def triplesBlock(self):
            return self.getTypedRuleContext(SparqlParser.TriplesBlockContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_triplesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplesBlock" ):
                listener.enterTriplesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplesBlock" ):
                listener.exitTriplesBlock(self)




    def triplesBlock(self):

        localctx = SparqlParser.TriplesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_triplesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.triplesSameSubjectPath()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__88:
                self.state = 666
                self.match(SparqlParser.T__88)
                self.state = 668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 667
                    self.triplesBlock()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternNotTriplesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupOrUnionGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupOrUnionGraphPatternContext,0)


        def optionalGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.OptionalGraphPatternContext,0)


        def minusGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.MinusGraphPatternContext,0)


        def graphGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GraphGraphPatternContext,0)


        def serviceGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.ServiceGraphPatternContext,0)


        def filterClause(self):
            return self.getTypedRuleContext(SparqlParser.FilterClauseContext,0)


        def bind(self):
            return self.getTypedRuleContext(SparqlParser.BindContext,0)


        def inlineData(self):
            return self.getTypedRuleContext(SparqlParser.InlineDataContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphPatternNotTriples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPatternNotTriples" ):
                listener.enterGraphPatternNotTriples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPatternNotTriples" ):
                listener.exitGraphPatternNotTriples(self)




    def graphPatternNotTriples(self):

        localctx = SparqlParser.GraphPatternNotTriplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_graphPatternNotTriples)
        try:
            self.state = 680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.groupOrUnionGraphPattern()
                pass
            elif token in [SparqlParser.T__89, SparqlParser.T__90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.optionalGraphPattern()
                pass
            elif token in [SparqlParser.T__97, SparqlParser.T__98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 674
                self.minusGraphPattern()
                pass
            elif token in [SparqlParser.T__84, SparqlParser.T__85]:
                self.enterOuterAlt(localctx, 4)
                self.state = 675
                self.graphGraphPattern()
                pass
            elif token in [SparqlParser.T__91, SparqlParser.T__92]:
                self.enterOuterAlt(localctx, 5)
                self.state = 676
                self.serviceGraphPattern()
                pass
            elif token in [SparqlParser.T__101, SparqlParser.T__102]:
                self.enterOuterAlt(localctx, 6)
                self.state = 677
                self.filterClause()
                pass
            elif token in [SparqlParser.T__93, SparqlParser.T__94]:
                self.enterOuterAlt(localctx, 7)
                self.state = 678
                self.bind()
                pass
            elif token in [SparqlParser.T__45, SparqlParser.T__46]:
                self.enterOuterAlt(localctx, 8)
                self.state = 679
                self.inlineData()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_optionalGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalGraphPattern" ):
                listener.enterOptionalGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalGraphPattern" ):
                listener.exitOptionalGraphPattern(self)




    def optionalGraphPattern(self):

        localctx = SparqlParser.OptionalGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_optionalGraphPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__89 or _la==SparqlParser.T__90):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 683
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrIri(self):
            return self.getTypedRuleContext(SparqlParser.VarOrIriContext,0)


        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGraphPattern" ):
                listener.enterGraphGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGraphPattern" ):
                listener.exitGraphGraphPattern(self)




    def graphGraphPattern(self):

        localctx = SparqlParser.GraphGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_graphGraphPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__84 or _la==SparqlParser.T__85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 686
            self.varOrIri()
            self.state = 687
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrIri(self):
            return self.getTypedRuleContext(SparqlParser.VarOrIriContext,0)


        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_serviceGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceGraphPattern" ):
                listener.enterServiceGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceGraphPattern" ):
                listener.exitServiceGraphPattern(self)




    def serviceGraphPattern(self):

        localctx = SparqlParser.ServiceGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_serviceGraphPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__91 or _la==SparqlParser.T__92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__50 or _la==SparqlParser.T__51:
                self.state = 690
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__50 or _la==SparqlParser.T__51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 693
            self.varOrIri()
            self.state = 694
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SparqlParser.ExpressionContext,0)


        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_bind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind" ):
                listener.enterBind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind" ):
                listener.exitBind(self)




    def bind(self):

        localctx = SparqlParser.BindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_bind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__93 or _la==SparqlParser.T__94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 697
            self.match(SparqlParser.T__10)
            self.state = 698
            self.expression()
            self.state = 699
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__11 or _la==SparqlParser.T__12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 700
            self.var()
            self.state = 701
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataBlock(self):
            return self.getTypedRuleContext(SparqlParser.DataBlockContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_inlineData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineData" ):
                listener.enterInlineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineData" ):
                listener.exitInlineData(self)




    def inlineData(self):

        localctx = SparqlParser.InlineDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inlineData)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__45 or _la==SparqlParser.T__46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 704
            self.dataBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineDataOneVar(self):
            return self.getTypedRuleContext(SparqlParser.InlineDataOneVarContext,0)


        def inlineDataFull(self):
            return self.getTypedRuleContext(SparqlParser.InlineDataFullContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_dataBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataBlock" ):
                listener.enterDataBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataBlock" ):
                listener.exitDataBlock(self)




    def dataBlock(self):

        localctx = SparqlParser.DataBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_dataBlock)
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.inlineDataOneVar()
                pass
            elif token in [SparqlParser.T__10, SparqlParser.NIL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.inlineDataFull()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineDataOneVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def dataBlockValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.DataBlockValueContext)
            else:
                return self.getTypedRuleContext(SparqlParser.DataBlockValueContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_inlineDataOneVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineDataOneVar" ):
                listener.enterInlineDataOneVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineDataOneVar" ):
                listener.exitInlineDataOneVar(self)




    def inlineDataOneVar(self):

        localctx = SparqlParser.InlineDataOneVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_inlineDataOneVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.var()
            self.state = 711
            self.match(SparqlParser.T__19)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__95 or _la==SparqlParser.T__96 or ((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & ((1 << (SparqlParser.T__250 - 251)) | (1 << (SparqlParser.T__251 - 251)) | (1 << (SparqlParser.T__252 - 251)) | (1 << (SparqlParser.T__253 - 251)) | (1 << (SparqlParser.IRIREF - 251)) | (1 << (SparqlParser.PNAME_NS - 251)) | (1 << (SparqlParser.PNAME_LN - 251)) | (1 << (SparqlParser.INTEGER - 251)) | (1 << (SparqlParser.DECIMAL - 251)) | (1 << (SparqlParser.DOUBLE - 251)) | (1 << (SparqlParser.INTEGER_POSITIVE - 251)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 251)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 251)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 251)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 251)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 251)) | (1 << (SparqlParser.STRING_LITERAL1 - 251)) | (1 << (SparqlParser.STRING_LITERAL2 - 251)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 251)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 251)))) != 0):
                self.state = 712
                self.dataBlockValue()
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 718
            self.match(SparqlParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineDataFullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self, i:int=None):
            if i is None:
                return self.getTokens(SparqlParser.NIL)
            else:
                return self.getToken(SparqlParser.NIL, i)

        def var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.VarContext)
            else:
                return self.getTypedRuleContext(SparqlParser.VarContext,i)


        def dataBlockValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.DataBlockValueContext)
            else:
                return self.getTypedRuleContext(SparqlParser.DataBlockValueContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_inlineDataFull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineDataFull" ):
                listener.enterInlineDataFull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineDataFull" ):
                listener.exitInlineDataFull(self)




    def inlineDataFull(self):

        localctx = SparqlParser.InlineDataFullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_inlineDataFull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.NIL]:
                self.state = 720
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__10]:
                self.state = 721
                self.match(SparqlParser.T__10)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SparqlParser.VAR1 or _la==SparqlParser.VAR2:
                    self.state = 722
                    self.var()
                    self.state = 727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 728
                self.match(SparqlParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 731
            self.match(SparqlParser.T__19)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__10 or _la==SparqlParser.NIL:
                self.state = 741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__10]:
                    self.state = 732
                    self.match(SparqlParser.T__10)
                    self.state = 736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SparqlParser.T__95 or _la==SparqlParser.T__96 or ((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & ((1 << (SparqlParser.T__250 - 251)) | (1 << (SparqlParser.T__251 - 251)) | (1 << (SparqlParser.T__252 - 251)) | (1 << (SparqlParser.T__253 - 251)) | (1 << (SparqlParser.IRIREF - 251)) | (1 << (SparqlParser.PNAME_NS - 251)) | (1 << (SparqlParser.PNAME_LN - 251)) | (1 << (SparqlParser.INTEGER - 251)) | (1 << (SparqlParser.DECIMAL - 251)) | (1 << (SparqlParser.DOUBLE - 251)) | (1 << (SparqlParser.INTEGER_POSITIVE - 251)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 251)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 251)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 251)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 251)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 251)) | (1 << (SparqlParser.STRING_LITERAL1 - 251)) | (1 << (SparqlParser.STRING_LITERAL2 - 251)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 251)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 251)))) != 0):
                        self.state = 733
                        self.dataBlockValue()
                        self.state = 738
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 739
                    self.match(SparqlParser.T__13)
                    pass
                elif token in [SparqlParser.NIL]:
                    self.state = 740
                    self.match(SparqlParser.NIL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 746
            self.match(SparqlParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataBlockValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def rdfLiteral(self):
            return self.getTypedRuleContext(SparqlParser.RdfLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SparqlParser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SparqlParser.BooleanLiteralContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_dataBlockValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataBlockValue" ):
                listener.enterDataBlockValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataBlockValue" ):
                listener.exitDataBlockValue(self)




    def dataBlockValue(self):

        localctx = SparqlParser.DataBlockValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_dataBlockValue)
        self._la = 0 # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.iri()
                pass
            elif token in [SparqlParser.STRING_LITERAL1, SparqlParser.STRING_LITERAL2, SparqlParser.STRING_LITERAL_LONG1, SparqlParser.STRING_LITERAL_LONG2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.rdfLiteral()
                pass
            elif token in [SparqlParser.INTEGER, SparqlParser.DECIMAL, SparqlParser.DOUBLE, SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE, SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 750
                self.numericLiteral()
                pass
            elif token in [SparqlParser.T__250, SparqlParser.T__251, SparqlParser.T__252, SparqlParser.T__253]:
                self.enterOuterAlt(localctx, 4)
                self.state = 751
                self.booleanLiteral()
                pass
            elif token in [SparqlParser.T__95, SparqlParser.T__96]:
                self.enterOuterAlt(localctx, 5)
                self.state = 752
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__95 or _la==SparqlParser.T__96):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinusGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_minusGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusGraphPattern" ):
                listener.enterMinusGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusGraphPattern" ):
                listener.exitMinusGraphPattern(self)




    def minusGraphPattern(self):

        localctx = SparqlParser.MinusGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_minusGraphPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__97 or _la==SparqlParser.T__98):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 756
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupOrUnionGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GroupGraphPatternContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_groupOrUnionGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupOrUnionGraphPattern" ):
                listener.enterGroupOrUnionGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupOrUnionGraphPattern" ):
                listener.exitGroupOrUnionGraphPattern(self)




    def groupOrUnionGraphPattern(self):

        localctx = SparqlParser.GroupOrUnionGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_groupOrUnionGraphPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.groupGraphPattern()
            self.state = 763
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 759
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__99 or _la==SparqlParser.T__100):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 760
                    self.groupGraphPattern() 
                self.state = 765
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint(self):
            return self.getTypedRuleContext(SparqlParser.ConstraintContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_filterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterClause" ):
                listener.enterFilterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterClause" ):
                listener.exitFilterClause(self)




    def filterClause(self):

        localctx = SparqlParser.FilterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_filterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__101 or _la==SparqlParser.T__102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 767
            self.constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def brackettedExpression(self):
            return self.getTypedRuleContext(SparqlParser.BrackettedExpressionContext,0)


        def builtInCall(self):
            return self.getTypedRuleContext(SparqlParser.BuiltInCallContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SparqlParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint" ):
                listener.enterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint" ):
                listener.exitConstraint(self)




    def constraint(self):

        localctx = SparqlParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constraint)
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.brackettedExpression()
                pass
            elif token in [SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.builtInCall()
                pass
            elif token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.functionCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def argList(self):
            return self.getTypedRuleContext(SparqlParser.ArgListContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SparqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.iri()
            self.state = 775
            self.argList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self):
            return self.getToken(SparqlParser.NIL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)




    def argList(self):

        localctx = SparqlParser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.state = 792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.NIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.match(SparqlParser.T__10)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 779
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 782
                self.expression()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SparqlParser.T__103:
                    self.state = 783
                    self.match(SparqlParser.T__103)
                    self.state = 784
                    self.expression()
                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 790
                self.match(SparqlParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self):
            return self.getToken(SparqlParser.NIL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SparqlParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.NIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 795
                self.match(SparqlParser.T__10)
                self.state = 796
                self.expression()
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SparqlParser.T__103:
                    self.state = 797
                    self.match(SparqlParser.T__103)
                    self.state = 798
                    self.expression()
                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 804
                self.match(SparqlParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructTemplateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructTriples(self):
            return self.getTypedRuleContext(SparqlParser.ConstructTriplesContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_constructTemplate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructTemplate" ):
                listener.enterConstructTemplate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructTemplate" ):
                listener.exitConstructTemplate(self)




    def constructTemplate(self):

        localctx = SparqlParser.ConstructTemplateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_constructTemplate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(SparqlParser.T__19)
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 809
                self.constructTriples()


            self.state = 812
            self.match(SparqlParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructTriplesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesSameSubject(self):
            return self.getTypedRuleContext(SparqlParser.TriplesSameSubjectContext,0)


        def constructTriples(self):
            return self.getTypedRuleContext(SparqlParser.ConstructTriplesContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_constructTriples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructTriples" ):
                listener.enterConstructTriples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructTriples" ):
                listener.exitConstructTriples(self)




    def constructTriples(self):

        localctx = SparqlParser.ConstructTriplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_constructTriples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.triplesSameSubject()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__88:
                self.state = 815
                self.match(SparqlParser.T__88)
                self.state = 817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 816
                    self.constructTriples()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplesSameSubjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrTerm(self):
            return self.getTypedRuleContext(SparqlParser.VarOrTermContext,0)


        def propertyListNotEmpty(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListNotEmptyContext,0)


        def triplesNode(self):
            return self.getTypedRuleContext(SparqlParser.TriplesNodeContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_triplesSameSubject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplesSameSubject" ):
                listener.enterTriplesSameSubject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplesSameSubject" ):
                listener.exitTriplesSameSubject(self)




    def triplesSameSubject(self):

        localctx = SparqlParser.TriplesSameSubjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_triplesSameSubject)
        try:
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.varOrTerm()
                self.state = 822
                self.propertyListNotEmpty()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 824
                self.triplesNode()
                self.state = 825
                self.propertyList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyListNotEmpty(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListNotEmptyContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)




    def propertyList(self):

        localctx = SparqlParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__104 or _la==SparqlParser.T__105 or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0):
                self.state = 829
                self.propertyListNotEmpty()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListNotEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def verb(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.VerbContext)
            else:
                return self.getTypedRuleContext(SparqlParser.VerbContext,i)


        def objectList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ObjectListContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ObjectListContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_propertyListNotEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyListNotEmpty" ):
                listener.enterPropertyListNotEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyListNotEmpty" ):
                listener.exitPropertyListNotEmpty(self)




    def propertyListNotEmpty(self):

        localctx = SparqlParser.PropertyListNotEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_propertyListNotEmpty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.verb()
            self.state = 833
            self.objectList()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__47:
                self.state = 834
                self.match(SparqlParser.T__47)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__104 or _la==SparqlParser.T__105 or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0):
                    self.state = 835
                    self.verb()
                    self.state = 836
                    self.objectList()


                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VerbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrIri(self):
            return self.getTypedRuleContext(SparqlParser.VarOrIriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_verb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerb" ):
                listener.enterVerb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerb" ):
                listener.exitVerb(self)




    def verb(self):

        localctx = SparqlParser.VerbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_verb)
        try:
            self.state = 848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN, SparqlParser.VAR1, SparqlParser.VAR2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.varOrIri()
                pass
            elif token in [SparqlParser.T__104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(SparqlParser.T__104)
                pass
            elif token in [SparqlParser.T__105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                self.match(SparqlParser.T__105)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ObjectClauseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ObjectClauseContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_objectList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectList" ):
                listener.enterObjectList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectList" ):
                listener.exitObjectList(self)




    def objectList(self):

        localctx = SparqlParser.ObjectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_objectList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.objectClause()
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__103:
                self.state = 851
                self.match(SparqlParser.T__103)
                self.state = 852
                self.objectClause()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphNode(self):
            return self.getTypedRuleContext(SparqlParser.GraphNodeContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_objectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectClause" ):
                listener.enterObjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectClause" ):
                listener.exitObjectClause(self)




    def objectClause(self):

        localctx = SparqlParser.ObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_objectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.graphNode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplesSameSubjectPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrTerm(self):
            return self.getTypedRuleContext(SparqlParser.VarOrTermContext,0)


        def propertyListPathNotEmpty(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListPathNotEmptyContext,0)


        def triplesNodePath(self):
            return self.getTypedRuleContext(SparqlParser.TriplesNodePathContext,0)


        def propertyListPath(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListPathContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_triplesSameSubjectPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplesSameSubjectPath" ):
                listener.enterTriplesSameSubjectPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplesSameSubjectPath" ):
                listener.exitTriplesSameSubjectPath(self)




    def triplesSameSubjectPath(self):

        localctx = SparqlParser.TriplesSameSubjectPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_triplesSameSubjectPath)
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.varOrTerm()
                self.state = 861
                self.propertyListPathNotEmpty()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self.triplesNodePath()
                self.state = 864
                self.propertyListPath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyListPathNotEmpty(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListPathNotEmptyContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_propertyListPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyListPath" ):
                listener.enterPropertyListPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyListPath" ):
                listener.exitPropertyListPath(self)




    def propertyListPath(self):

        localctx = SparqlParser.PropertyListPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_propertyListPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__10 or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (SparqlParser.T__104 - 105)) | (1 << (SparqlParser.T__105 - 105)) | (1 << (SparqlParser.T__108 - 105)) | (1 << (SparqlParser.T__111 - 105)))) != 0) or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0):
                self.state = 868
                self.propertyListPathNotEmpty()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListPathNotEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectListPath(self):
            return self.getTypedRuleContext(SparqlParser.ObjectListPathContext,0)


        def verbPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.VerbPathContext)
            else:
                return self.getTypedRuleContext(SparqlParser.VerbPathContext,i)


        def verbSimple(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.VerbSimpleContext)
            else:
                return self.getTypedRuleContext(SparqlParser.VerbSimpleContext,i)


        def objectList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ObjectListContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ObjectListContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_propertyListPathNotEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyListPathNotEmpty" ):
                listener.enterPropertyListPathNotEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyListPathNotEmpty" ):
                listener.exitPropertyListPathNotEmpty(self)




    def propertyListPathNotEmpty(self):

        localctx = SparqlParser.PropertyListPathNotEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_propertyListPathNotEmpty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10, SparqlParser.T__104, SparqlParser.T__105, SparqlParser.T__108, SparqlParser.T__111, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.state = 871
                self.verbPath()
                pass
            elif token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                self.state = 872
                self.verbSimple()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 875
            self.objectListPath()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__47:
                self.state = 876
                self.match(SparqlParser.T__47)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__10 or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (SparqlParser.T__104 - 105)) | (1 << (SparqlParser.T__105 - 105)) | (1 << (SparqlParser.T__108 - 105)) | (1 << (SparqlParser.T__111 - 105)))) != 0) or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)) | (1 << (SparqlParser.VAR1 - 255)) | (1 << (SparqlParser.VAR2 - 255)))) != 0):
                    self.state = 879
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SparqlParser.T__10, SparqlParser.T__104, SparqlParser.T__105, SparqlParser.T__108, SparqlParser.T__111, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                        self.state = 877
                        self.verbPath()
                        pass
                    elif token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                        self.state = 878
                        self.verbSimple()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 881
                    self.objectList()


                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VerbPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def path(self):
            return self.getTypedRuleContext(SparqlParser.PathContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_verbPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerbPath" ):
                listener.enterVerbPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerbPath" ):
                listener.exitVerbPath(self)




    def verbPath(self):

        localctx = SparqlParser.VerbPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_verbPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VerbSimpleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_verbSimple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerbSimple" ):
                listener.enterVerbSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerbSimple" ):
                listener.exitVerbSimple(self)




    def verbSimple(self):

        localctx = SparqlParser.VerbSimpleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_verbSimple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectListPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ObjectPathContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ObjectPathContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_objectListPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectListPath" ):
                listener.enterObjectListPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectListPath" ):
                listener.exitObjectListPath(self)




    def objectListPath(self):

        localctx = SparqlParser.ObjectListPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_objectListPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.objectPath()
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__103:
                self.state = 895
                self.match(SparqlParser.T__103)
                self.state = 896
                self.objectPath()
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphNodePath(self):
            return self.getTypedRuleContext(SparqlParser.GraphNodePathContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_objectPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPath" ):
                listener.enterObjectPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPath" ):
                listener.exitObjectPath(self)




    def objectPath(self):

        localctx = SparqlParser.ObjectPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_objectPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.graphNodePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathAlternative(self):
            return self.getTypedRuleContext(SparqlParser.PathAlternativeContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = SparqlParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.pathAlternative()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.PathSequenceContext)
            else:
                return self.getTypedRuleContext(SparqlParser.PathSequenceContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathAlternative" ):
                listener.enterPathAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathAlternative" ):
                listener.exitPathAlternative(self)




    def pathAlternative(self):

        localctx = SparqlParser.PathAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pathAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.pathSequence()
            self.state = 911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 907
                    self.match(SparqlParser.T__106)
                    self.state = 908
                    self.pathSequence() 
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathEltOrInverse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.PathEltOrInverseContext)
            else:
                return self.getTypedRuleContext(SparqlParser.PathEltOrInverseContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSequence" ):
                listener.enterPathSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSequence" ):
                listener.exitPathSequence(self)




    def pathSequence(self):

        localctx = SparqlParser.PathSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_pathSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.pathEltOrInverse()
            self.state = 919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 915
                    self.match(SparqlParser.T__107)
                    self.state = 916
                    self.pathEltOrInverse() 
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathEltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPrimary(self):
            return self.getTypedRuleContext(SparqlParser.PathPrimaryContext,0)


        def pathMod(self):
            return self.getTypedRuleContext(SparqlParser.PathModContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathElt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathElt" ):
                listener.enterPathElt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathElt" ):
                listener.exitPathElt(self)




    def pathElt(self):

        localctx = SparqlParser.PathEltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_pathElt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.pathPrimary()
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 923
                self.pathMod()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathEltOrInverseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElt(self):
            return self.getTypedRuleContext(SparqlParser.PathEltContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathEltOrInverse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathEltOrInverse" ):
                listener.enterPathEltOrInverse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathEltOrInverse" ):
                listener.exitPathEltOrInverse(self)




    def pathEltOrInverse(self):

        localctx = SparqlParser.PathEltOrInverseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_pathEltOrInverse)
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10, SparqlParser.T__104, SparqlParser.T__105, SparqlParser.T__111, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.pathElt()
                pass
            elif token in [SparqlParser.T__108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(SparqlParser.T__108)
                self.state = 928
                self.pathElt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathModContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SparqlParser.RULE_pathMod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathMod" ):
                listener.enterPathMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathMod" ):
                listener.exitPathMod(self)




    def pathMod(self):

        localctx = SparqlParser.PathModContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_pathMod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__14 or _la==SparqlParser.T__109 or _la==SparqlParser.T__110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def pathNegatedPropertySet(self):
            return self.getTypedRuleContext(SparqlParser.PathNegatedPropertySetContext,0)


        def path(self):
            return self.getTypedRuleContext(SparqlParser.PathContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPrimary" ):
                listener.enterPathPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPrimary" ):
                listener.exitPathPrimary(self)




    def pathPrimary(self):

        localctx = SparqlParser.PathPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_pathPrimary)
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.iri()
                pass
            elif token in [SparqlParser.T__104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.match(SparqlParser.T__104)
                pass
            elif token in [SparqlParser.T__105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                self.match(SparqlParser.T__105)
                pass
            elif token in [SparqlParser.T__111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 936
                self.match(SparqlParser.T__111)
                self.state = 937
                self.pathNegatedPropertySet()
                pass
            elif token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 938
                self.match(SparqlParser.T__10)
                self.state = 939
                self.path()
                self.state = 940
                self.match(SparqlParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathNegatedPropertySetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathOneInPropertySet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.PathOneInPropertySetContext)
            else:
                return self.getTypedRuleContext(SparqlParser.PathOneInPropertySetContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathNegatedPropertySet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathNegatedPropertySet" ):
                listener.enterPathNegatedPropertySet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathNegatedPropertySet" ):
                listener.exitPathNegatedPropertySet(self)




    def pathNegatedPropertySet(self):

        localctx = SparqlParser.PathNegatedPropertySetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_pathNegatedPropertySet)
        self._la = 0 # Token type
        try:
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__104, SparqlParser.T__105, SparqlParser.T__108, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.pathOneInPropertySet()
                pass
            elif token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(SparqlParser.T__10)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (SparqlParser.T__104 - 105)) | (1 << (SparqlParser.T__105 - 105)) | (1 << (SparqlParser.T__108 - 105)))) != 0) or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & ((1 << (SparqlParser.IRIREF - 255)) | (1 << (SparqlParser.PNAME_NS - 255)) | (1 << (SparqlParser.PNAME_LN - 255)))) != 0):
                    self.state = 946
                    self.pathOneInPropertySet()
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SparqlParser.T__106:
                        self.state = 947
                        self.match(SparqlParser.T__106)
                        self.state = 948
                        self.pathOneInPropertySet()
                        self.state = 953
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 956
                self.match(SparqlParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathOneInPropertySetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_pathOneInPropertySet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathOneInPropertySet" ):
                listener.enterPathOneInPropertySet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathOneInPropertySet" ):
                listener.exitPathOneInPropertySet(self)




    def pathOneInPropertySet(self):

        localctx = SparqlParser.PathOneInPropertySetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_pathOneInPropertySet)
        try:
            self.state = 968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.iri()
                pass
            elif token in [SparqlParser.T__104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.match(SparqlParser.T__104)
                pass
            elif token in [SparqlParser.T__105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 961
                self.match(SparqlParser.T__105)
                pass
            elif token in [SparqlParser.T__108]:
                self.enterOuterAlt(localctx, 4)
                self.state = 962
                self.match(SparqlParser.T__108)
                self.state = 966
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                    self.state = 963
                    self.iri()
                    pass
                elif token in [SparqlParser.T__104]:
                    self.state = 964
                    self.match(SparqlParser.T__104)
                    pass
                elif token in [SparqlParser.T__105]:
                    self.state = 965
                    self.match(SparqlParser.T__105)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplesNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collection(self):
            return self.getTypedRuleContext(SparqlParser.CollectionContext,0)


        def blankNodePropertyList(self):
            return self.getTypedRuleContext(SparqlParser.BlankNodePropertyListContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_triplesNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplesNode" ):
                listener.enterTriplesNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplesNode" ):
                listener.exitTriplesNode(self)




    def triplesNode(self):

        localctx = SparqlParser.TriplesNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_triplesNode)
        try:
            self.state = 972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.collection()
                pass
            elif token in [SparqlParser.T__112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.blankNodePropertyList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlankNodePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyListNotEmpty(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListNotEmptyContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_blankNodePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlankNodePropertyList" ):
                listener.enterBlankNodePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlankNodePropertyList" ):
                listener.exitBlankNodePropertyList(self)




    def blankNodePropertyList(self):

        localctx = SparqlParser.BlankNodePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_blankNodePropertyList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(SparqlParser.T__112)
            self.state = 975
            self.propertyListNotEmpty()
            self.state = 976
            self.match(SparqlParser.T__113)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplesNodePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionPath(self):
            return self.getTypedRuleContext(SparqlParser.CollectionPathContext,0)


        def blankNodePropertyListPath(self):
            return self.getTypedRuleContext(SparqlParser.BlankNodePropertyListPathContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_triplesNodePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplesNodePath" ):
                listener.enterTriplesNodePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplesNodePath" ):
                listener.exitTriplesNodePath(self)




    def triplesNodePath(self):

        localctx = SparqlParser.TriplesNodePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_triplesNodePath)
        try:
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 978
                self.collectionPath()
                pass
            elif token in [SparqlParser.T__112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 979
                self.blankNodePropertyListPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlankNodePropertyListPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyListPathNotEmpty(self):
            return self.getTypedRuleContext(SparqlParser.PropertyListPathNotEmptyContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_blankNodePropertyListPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlankNodePropertyListPath" ):
                listener.enterBlankNodePropertyListPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlankNodePropertyListPath" ):
                listener.exitBlankNodePropertyListPath(self)




    def blankNodePropertyListPath(self):

        localctx = SparqlParser.BlankNodePropertyListPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_blankNodePropertyListPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(SparqlParser.T__112)
            self.state = 983
            self.propertyListPathNotEmpty()
            self.state = 984
            self.match(SparqlParser.T__113)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GraphNodeContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GraphNodeContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection" ):
                listener.enterCollection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection" ):
                listener.exitCollection(self)




    def collection(self):

        localctx = SparqlParser.CollectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(SparqlParser.T__10)
            self.state = 988 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 987
                    self.graphNode()

                else:
                    raise NoViableAltException(self)
                self.state = 990 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 992
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphNodePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.GraphNodePathContext)
            else:
                return self.getTypedRuleContext(SparqlParser.GraphNodePathContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_collectionPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionPath" ):
                listener.enterCollectionPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionPath" ):
                listener.exitCollectionPath(self)




    def collectionPath(self):

        localctx = SparqlParser.CollectionPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_collectionPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(SparqlParser.T__10)
            self.state = 996 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 995
                    self.graphNodePath()

                else:
                    raise NoViableAltException(self)
                self.state = 998 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 1000
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrTerm(self):
            return self.getTypedRuleContext(SparqlParser.VarOrTermContext,0)


        def triplesNode(self):
            return self.getTypedRuleContext(SparqlParser.TriplesNodeContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphNode" ):
                listener.enterGraphNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphNode" ):
                listener.exitGraphNode(self)




    def graphNode(self):

        localctx = SparqlParser.GraphNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_graphNode)
        try:
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.varOrTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.triplesNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphNodePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrTerm(self):
            return self.getTypedRuleContext(SparqlParser.VarOrTermContext,0)


        def triplesNodePath(self):
            return self.getTypedRuleContext(SparqlParser.TriplesNodePathContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_graphNodePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphNodePath" ):
                listener.enterGraphNodePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphNodePath" ):
                listener.exitGraphNodePath(self)




    def graphNodePath(self):

        localctx = SparqlParser.GraphNodePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_graphNodePath)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.varOrTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.triplesNodePath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarOrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def graphTerm(self):
            return self.getTypedRuleContext(SparqlParser.GraphTermContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_varOrTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarOrTerm" ):
                listener.enterVarOrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarOrTerm" ):
                listener.exitVarOrTerm(self)




    def varOrTerm(self):

        localctx = SparqlParser.VarOrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_varOrTerm)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.var()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.graphTerm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarOrIriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_varOrIri

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarOrIri" ):
                listener.enterVarOrIri(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarOrIri" ):
                listener.exitVarOrIri(self)




    def varOrIri(self):

        localctx = SparqlParser.VarOrIriContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_varOrIri)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.var()
                pass
            elif token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.iri()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR1(self):
            return self.getToken(SparqlParser.VAR1, 0)

        def VAR2(self):
            return self.getToken(SparqlParser.VAR2, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)




    def var(self):

        localctx = SparqlParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            _la = self._input.LA(1)
            if not(_la==SparqlParser.VAR1 or _la==SparqlParser.VAR2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def rdfLiteral(self):
            return self.getTypedRuleContext(SparqlParser.RdfLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SparqlParser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SparqlParser.BooleanLiteralContext,0)


        def blankNode(self):
            return self.getTypedRuleContext(SparqlParser.BlankNodeContext,0)


        def NIL(self):
            return self.getToken(SparqlParser.NIL, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_graphTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphTerm" ):
                listener.enterGraphTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphTerm" ):
                listener.exitGraphTerm(self)




    def graphTerm(self):

        localctx = SparqlParser.GraphTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_graphTerm)
        try:
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.iri()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.rdfLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1022
                self.numericLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1023
                self.booleanLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1024
                if not allowsBlankNodes:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "allowsBlankNodes")
                self.state = 1025
                self.blankNode()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1026
                self.match(SparqlParser.NIL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalOrExpression(self):
            return self.getTypedRuleContext(SparqlParser.ConditionalOrExpressionContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SparqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.conditionalOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ConditionalAndExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ConditionalAndExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_conditionalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOrExpression" ):
                listener.enterConditionalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOrExpression" ):
                listener.exitConditionalOrExpression(self)




    def conditionalOrExpression(self):

        localctx = SparqlParser.ConditionalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_conditionalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.conditionalAndExpression()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__114:
                self.state = 1032
                self.match(SparqlParser.T__114)
                self.state = 1033
                self.conditionalAndExpression()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueLogical(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ValueLogicalContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ValueLogicalContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_conditionalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAndExpression" ):
                listener.enterConditionalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAndExpression" ):
                listener.exitConditionalAndExpression(self)




    def conditionalAndExpression(self):

        localctx = SparqlParser.ConditionalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_conditionalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.valueLogical()
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__115:
                self.state = 1040
                self.match(SparqlParser.T__115)
                self.state = 1041
                self.valueLogical()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueLogicalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(SparqlParser.RelationalExpressionContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_valueLogical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueLogical" ):
                listener.enterValueLogical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueLogical" ):
                listener.exitValueLogical(self)




    def valueLogical(self):

        localctx = SparqlParser.ValueLogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_valueLogical)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.NumericExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.NumericExpressionContext,i)


        def expressionList(self):
            return self.getTypedRuleContext(SparqlParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = SparqlParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.numericExpression()
            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__116]:
                self.state = 1050
                self.match(SparqlParser.T__116)
                self.state = 1051
                self.numericExpression()
                pass
            elif token in [SparqlParser.T__117]:
                self.state = 1052
                self.match(SparqlParser.T__117)
                self.state = 1053
                self.numericExpression()
                pass
            elif token in [SparqlParser.T__118]:
                self.state = 1054
                self.match(SparqlParser.T__118)
                self.state = 1055
                self.numericExpression()
                pass
            elif token in [SparqlParser.T__119]:
                self.state = 1056
                self.match(SparqlParser.T__119)
                self.state = 1057
                self.numericExpression()
                pass
            elif token in [SparqlParser.T__120]:
                self.state = 1058
                self.match(SparqlParser.T__120)
                self.state = 1059
                self.numericExpression()
                pass
            elif token in [SparqlParser.T__121]:
                self.state = 1060
                self.match(SparqlParser.T__121)
                self.state = 1061
                self.numericExpression()
                pass
            elif token in [SparqlParser.T__122, SparqlParser.T__123]:
                self.state = 1062
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__122 or _la==SparqlParser.T__123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1063
                self.expressionList()
                pass
            elif token in [SparqlParser.T__124, SparqlParser.T__125]:
                self.state = 1064
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__124 or _la==SparqlParser.T__125):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1065
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__122 or _la==SparqlParser.T__123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1066
                self.expressionList()
                pass
            elif token in [SparqlParser.T__11, SparqlParser.T__12, SparqlParser.T__13, SparqlParser.T__47, SparqlParser.T__103, SparqlParser.T__114, SparqlParser.T__115]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(SparqlParser.AdditiveExpressionContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_numericExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericExpression" ):
                listener.enterNumericExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericExpression" ):
                listener.exitNumericExpression(self)




    def numericExpression(self):

        localctx = SparqlParser.NumericExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_numericExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.additiveExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.MultiplicativeExpressionContext,i)


        def numericLiteralPositive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.NumericLiteralPositiveContext)
            else:
                return self.getTypedRuleContext(SparqlParser.NumericLiteralPositiveContext,i)


        def numericLiteralNegative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.NumericLiteralNegativeContext)
            else:
                return self.getTypedRuleContext(SparqlParser.NumericLiteralNegativeContext,i)


        def unaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.UnaryExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.UnaryExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = SparqlParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.multiplicativeExpression()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__110 or _la==SparqlParser.T__126 or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (SparqlParser.INTEGER_POSITIVE - 265)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 265)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 265)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 265)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 265)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 265)))) != 0):
                self.state = 1089
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__110]:
                    self.state = 1072
                    self.match(SparqlParser.T__110)
                    self.state = 1073
                    self.multiplicativeExpression()
                    pass
                elif token in [SparqlParser.T__126]:
                    self.state = 1074
                    self.match(SparqlParser.T__126)
                    self.state = 1075
                    self.multiplicativeExpression()
                    pass
                elif token in [SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE, SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE]:
                    self.state = 1078
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE]:
                        self.state = 1076
                        self.numericLiteralPositive()
                        pass
                    elif token in [SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE]:
                        self.state = 1077
                        self.numericLiteralNegative()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1086
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SparqlParser.T__14 or _la==SparqlParser.T__107:
                        self.state = 1084
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SparqlParser.T__14]:
                            self.state = 1080
                            self.match(SparqlParser.T__14)
                            self.state = 1081
                            self.unaryExpression()
                            pass
                        elif token in [SparqlParser.T__107]:
                            self.state = 1082
                            self.match(SparqlParser.T__107)
                            self.state = 1083
                            self.unaryExpression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1088
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.UnaryExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.UnaryExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = SparqlParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.unaryExpression()
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SparqlParser.T__14 or _la==SparqlParser.T__107:
                self.state = 1099
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__14]:
                    self.state = 1095
                    self.match(SparqlParser.T__14)
                    self.state = 1096
                    self.unaryExpression()
                    pass
                elif token in [SparqlParser.T__107]:
                    self.state = 1097
                    self.match(SparqlParser.T__107)
                    self.state = 1098
                    self.unaryExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(SparqlParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = SparqlParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_unaryExpression)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.match(SparqlParser.T__111)
                self.state = 1105
                self.primaryExpression()
                pass
            elif token in [SparqlParser.T__110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.match(SparqlParser.T__110)
                self.state = 1107
                self.primaryExpression()
                pass
            elif token in [SparqlParser.T__126]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.match(SparqlParser.T__126)
                self.state = 1109
                self.primaryExpression()
                pass
            elif token in [SparqlParser.T__10, SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246, SparqlParser.T__250, SparqlParser.T__251, SparqlParser.T__252, SparqlParser.T__253, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN, SparqlParser.VAR1, SparqlParser.VAR2, SparqlParser.INTEGER, SparqlParser.DECIMAL, SparqlParser.DOUBLE, SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE, SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE, SparqlParser.STRING_LITERAL1, SparqlParser.STRING_LITERAL2, SparqlParser.STRING_LITERAL_LONG1, SparqlParser.STRING_LITERAL_LONG2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1110
                self.primaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def brackettedExpression(self):
            return self.getTypedRuleContext(SparqlParser.BrackettedExpressionContext,0)


        def builtInCall(self):
            return self.getTypedRuleContext(SparqlParser.BuiltInCallContext,0)


        def iriOrFunction(self):
            return self.getTypedRuleContext(SparqlParser.IriOrFunctionContext,0)


        def rdfLiteral(self):
            return self.getTypedRuleContext(SparqlParser.RdfLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SparqlParser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SparqlParser.BooleanLiteralContext,0)


        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SparqlParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_primaryExpression)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.brackettedExpression()
                pass
            elif token in [SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.builtInCall()
                pass
            elif token in [SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1115
                self.iriOrFunction()
                pass
            elif token in [SparqlParser.STRING_LITERAL1, SparqlParser.STRING_LITERAL2, SparqlParser.STRING_LITERAL_LONG1, SparqlParser.STRING_LITERAL_LONG2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1116
                self.rdfLiteral()
                pass
            elif token in [SparqlParser.INTEGER, SparqlParser.DECIMAL, SparqlParser.DOUBLE, SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE, SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1117
                self.numericLiteral()
                pass
            elif token in [SparqlParser.T__250, SparqlParser.T__251, SparqlParser.T__252, SparqlParser.T__253]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1118
                self.booleanLiteral()
                pass
            elif token in [SparqlParser.VAR1, SparqlParser.VAR2]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1119
                self.var()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrackettedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SparqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_brackettedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBrackettedExpression" ):
                listener.enterBrackettedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBrackettedExpression" ):
                listener.exitBrackettedExpression(self)




    def brackettedExpression(self):

        localctx = SparqlParser.BrackettedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_brackettedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(SparqlParser.T__10)
            self.state = 1123
            self.expression()
            self.state = 1124
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate(self):
            return self.getTypedRuleContext(SparqlParser.AggregateContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def var(self):
            return self.getTypedRuleContext(SparqlParser.VarContext,0)


        def NIL(self):
            return self.getToken(SparqlParser.NIL, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SparqlParser.ExpressionListContext,0)


        def substringExpression(self):
            return self.getTypedRuleContext(SparqlParser.SubstringExpressionContext,0)


        def strReplaceExpression(self):
            return self.getTypedRuleContext(SparqlParser.StrReplaceExpressionContext,0)


        def regexExpression(self):
            return self.getTypedRuleContext(SparqlParser.RegexExpressionContext,0)


        def existsFunc(self):
            return self.getTypedRuleContext(SparqlParser.ExistsFuncContext,0)


        def notExistsFunc(self):
            return self.getTypedRuleContext(SparqlParser.NotExistsFuncContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_builtInCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInCall" ):
                listener.enterBuiltInCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInCall" ):
                listener.exitBuiltInCall(self)




    def builtInCall(self):

        localctx = SparqlParser.BuiltInCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_builtInCall)
        self._la = 0 # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.aggregate()
                pass
            elif token in [SparqlParser.T__127, SparqlParser.T__128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__127 or _la==SparqlParser.T__128):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1128
                self.match(SparqlParser.T__10)
                self.state = 1129
                self.expression()
                self.state = 1130
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__129, SparqlParser.T__130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1132
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__129 or _la==SparqlParser.T__130):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1133
                self.match(SparqlParser.T__10)
                self.state = 1134
                self.expression()
                self.state = 1135
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__131, SparqlParser.T__132]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__131 or _la==SparqlParser.T__132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1138
                self.match(SparqlParser.T__10)
                self.state = 1139
                self.expression()
                self.state = 1140
                self.match(SparqlParser.T__103)
                self.state = 1141
                self.expression()
                self.state = 1142
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__133, SparqlParser.T__134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1144
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__133 or _la==SparqlParser.T__134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1145
                self.match(SparqlParser.T__10)
                self.state = 1146
                self.expression()
                self.state = 1147
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__135, SparqlParser.T__136]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1149
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__135 or _la==SparqlParser.T__136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1150
                self.match(SparqlParser.T__10)
                self.state = 1151
                self.var()
                self.state = 1152
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__137, SparqlParser.T__138]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1154
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__137 or _la==SparqlParser.T__138):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1155
                self.match(SparqlParser.T__10)
                self.state = 1156
                self.expression()
                self.state = 1157
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__139, SparqlParser.T__140]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1159
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__139 or _la==SparqlParser.T__140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1160
                self.match(SparqlParser.T__10)
                self.state = 1161
                self.expression()
                self.state = 1162
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__141, SparqlParser.T__142]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1164
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__141 or _la==SparqlParser.T__142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1170
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__10]:
                    self.state = 1165
                    self.match(SparqlParser.T__10)
                    self.state = 1166
                    self.expression()
                    self.state = 1167
                    self.match(SparqlParser.T__13)
                    pass
                elif token in [SparqlParser.NIL]:
                    self.state = 1169
                    self.match(SparqlParser.NIL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SparqlParser.T__143, SparqlParser.T__144]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1172
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__143 or _la==SparqlParser.T__144):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1173
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__145, SparqlParser.T__146]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1174
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__145 or _la==SparqlParser.T__146):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1175
                self.match(SparqlParser.T__10)
                self.state = 1176
                self.expression()
                self.state = 1177
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__147, SparqlParser.T__148]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1179
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__147 or _la==SparqlParser.T__148):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1180
                self.match(SparqlParser.T__10)
                self.state = 1181
                self.expression()
                self.state = 1182
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__149, SparqlParser.T__150]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1184
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__149 or _la==SparqlParser.T__150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1185
                self.match(SparqlParser.T__10)
                self.state = 1186
                self.expression()
                self.state = 1187
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__151, SparqlParser.T__152]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1189
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__151 or _la==SparqlParser.T__152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1190
                self.match(SparqlParser.T__10)
                self.state = 1191
                self.expression()
                self.state = 1192
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__153, SparqlParser.T__154]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1194
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__153 or _la==SparqlParser.T__154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1195
                self.expressionList()
                pass
            elif token in [SparqlParser.T__227, SparqlParser.T__228]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1196
                self.substringExpression()
                pass
            elif token in [SparqlParser.T__155, SparqlParser.T__156]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1197
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__155 or _la==SparqlParser.T__156):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1198
                self.match(SparqlParser.T__10)
                self.state = 1199
                self.expression()
                self.state = 1200
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__229, SparqlParser.T__230]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1202
                self.strReplaceExpression()
                pass
            elif token in [SparqlParser.T__157, SparqlParser.T__158]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1203
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__157 or _la==SparqlParser.T__158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1204
                self.match(SparqlParser.T__10)
                self.state = 1205
                self.expression()
                self.state = 1206
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__159, SparqlParser.T__160]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1208
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__159 or _la==SparqlParser.T__160):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1209
                self.match(SparqlParser.T__10)
                self.state = 1210
                self.expression()
                self.state = 1211
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__161, SparqlParser.T__162]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1213
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__161 or _la==SparqlParser.T__162):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1214
                self.match(SparqlParser.T__10)
                self.state = 1215
                self.expression()
                self.state = 1216
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__163, SparqlParser.T__164]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1218
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__163 or _la==SparqlParser.T__164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1219
                self.match(SparqlParser.T__10)
                self.state = 1220
                self.expression()
                self.state = 1221
                self.match(SparqlParser.T__103)
                self.state = 1222
                self.expression()
                self.state = 1223
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__165, SparqlParser.T__166]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1225
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__165 or _la==SparqlParser.T__166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1226
                self.match(SparqlParser.T__10)
                self.state = 1227
                self.expression()
                self.state = 1228
                self.match(SparqlParser.T__103)
                self.state = 1229
                self.expression()
                self.state = 1230
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__167, SparqlParser.T__168]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1232
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__167 or _la==SparqlParser.T__168):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1233
                self.match(SparqlParser.T__10)
                self.state = 1234
                self.expression()
                self.state = 1235
                self.match(SparqlParser.T__103)
                self.state = 1236
                self.expression()
                self.state = 1237
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__169, SparqlParser.T__170]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1239
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__169 or _la==SparqlParser.T__170):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1240
                self.match(SparqlParser.T__10)
                self.state = 1241
                self.expression()
                self.state = 1242
                self.match(SparqlParser.T__103)
                self.state = 1243
                self.expression()
                self.state = 1244
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__171, SparqlParser.T__172]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1246
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__171 or _la==SparqlParser.T__172):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1247
                self.match(SparqlParser.T__10)
                self.state = 1248
                self.expression()
                self.state = 1249
                self.match(SparqlParser.T__103)
                self.state = 1250
                self.expression()
                self.state = 1251
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__173, SparqlParser.T__174]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1253
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__173 or _la==SparqlParser.T__174):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1254
                self.match(SparqlParser.T__10)
                self.state = 1255
                self.expression()
                self.state = 1256
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__175, SparqlParser.T__176]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1258
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__175 or _la==SparqlParser.T__176):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1259
                self.match(SparqlParser.T__10)
                self.state = 1260
                self.expression()
                self.state = 1261
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__177, SparqlParser.T__178]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1263
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__177 or _la==SparqlParser.T__178):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1264
                self.match(SparqlParser.T__10)
                self.state = 1265
                self.expression()
                self.state = 1266
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__179, SparqlParser.T__180]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1268
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__179 or _la==SparqlParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1269
                self.match(SparqlParser.T__10)
                self.state = 1270
                self.expression()
                self.state = 1271
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__181, SparqlParser.T__182]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1273
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__181 or _la==SparqlParser.T__182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1274
                self.match(SparqlParser.T__10)
                self.state = 1275
                self.expression()
                self.state = 1276
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__183, SparqlParser.T__184]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1278
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__183 or _la==SparqlParser.T__184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1279
                self.match(SparqlParser.T__10)
                self.state = 1280
                self.expression()
                self.state = 1281
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__185, SparqlParser.T__186]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1283
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__185 or _la==SparqlParser.T__186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1284
                self.match(SparqlParser.T__10)
                self.state = 1285
                self.expression()
                self.state = 1286
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__187, SparqlParser.T__188]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1288
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__187 or _la==SparqlParser.T__188):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1289
                self.match(SparqlParser.T__10)
                self.state = 1290
                self.expression()
                self.state = 1291
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__189, SparqlParser.T__190]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1293
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__189 or _la==SparqlParser.T__190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1294
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__191, SparqlParser.T__192]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1295
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__191 or _la==SparqlParser.T__192):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1296
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__193, SparqlParser.T__194]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1297
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__193 or _la==SparqlParser.T__194):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1298
                self.match(SparqlParser.NIL)
                pass
            elif token in [SparqlParser.T__195, SparqlParser.T__196]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1299
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__195 or _la==SparqlParser.T__196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1300
                self.match(SparqlParser.T__10)
                self.state = 1301
                self.expression()
                self.state = 1302
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__197, SparqlParser.T__198]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1304
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__197 or _la==SparqlParser.T__198):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1305
                self.match(SparqlParser.T__10)
                self.state = 1306
                self.expression()
                self.state = 1307
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__199, SparqlParser.T__200]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1309
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__199 or _la==SparqlParser.T__200):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1310
                self.match(SparqlParser.T__10)
                self.state = 1311
                self.expression()
                self.state = 1312
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__201, SparqlParser.T__202]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1314
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__201 or _la==SparqlParser.T__202):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1315
                self.match(SparqlParser.T__10)
                self.state = 1316
                self.expression()
                self.state = 1317
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__203, SparqlParser.T__204]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1319
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__203 or _la==SparqlParser.T__204):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1320
                self.match(SparqlParser.T__10)
                self.state = 1321
                self.expression()
                self.state = 1322
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__205, SparqlParser.T__206]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1324
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__205 or _la==SparqlParser.T__206):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1325
                self.expressionList()
                pass
            elif token in [SparqlParser.T__207, SparqlParser.T__208]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1326
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__207 or _la==SparqlParser.T__208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1327
                self.match(SparqlParser.T__10)
                self.state = 1328
                self.expression()
                self.state = 1329
                self.match(SparqlParser.T__103)
                self.state = 1330
                self.expression()
                self.state = 1331
                self.match(SparqlParser.T__103)
                self.state = 1332
                self.expression()
                self.state = 1333
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__209, SparqlParser.T__210]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1335
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__209 or _la==SparqlParser.T__210):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1336
                self.match(SparqlParser.T__10)
                self.state = 1337
                self.expression()
                self.state = 1338
                self.match(SparqlParser.T__103)
                self.state = 1339
                self.expression()
                self.state = 1340
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__211, SparqlParser.T__212]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1342
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__211 or _la==SparqlParser.T__212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1343
                self.match(SparqlParser.T__10)
                self.state = 1344
                self.expression()
                self.state = 1345
                self.match(SparqlParser.T__103)
                self.state = 1346
                self.expression()
                self.state = 1347
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__213, SparqlParser.T__214]:
                self.enterOuterAlt(localctx, 47)
                self.state = 1349
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__213 or _la==SparqlParser.T__214):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1350
                self.match(SparqlParser.T__10)
                self.state = 1351
                self.expression()
                self.state = 1352
                self.match(SparqlParser.T__103)
                self.state = 1353
                self.expression()
                self.state = 1354
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__215, SparqlParser.T__216]:
                self.enterOuterAlt(localctx, 48)
                self.state = 1356
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__215 or _la==SparqlParser.T__216):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1357
                self.match(SparqlParser.T__10)
                self.state = 1358
                self.expression()
                self.state = 1359
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__217, SparqlParser.T__218]:
                self.enterOuterAlt(localctx, 49)
                self.state = 1361
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__217 or _la==SparqlParser.T__218):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1362
                self.match(SparqlParser.T__10)
                self.state = 1363
                self.expression()
                self.state = 1364
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__219, SparqlParser.T__220]:
                self.enterOuterAlt(localctx, 50)
                self.state = 1366
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__219 or _la==SparqlParser.T__220):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1367
                self.match(SparqlParser.T__10)
                self.state = 1368
                self.expression()
                self.state = 1369
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__221, SparqlParser.T__222]:
                self.enterOuterAlt(localctx, 51)
                self.state = 1371
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__221 or _la==SparqlParser.T__222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1372
                self.match(SparqlParser.T__10)
                self.state = 1373
                self.expression()
                self.state = 1374
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__223, SparqlParser.T__224]:
                self.enterOuterAlt(localctx, 52)
                self.state = 1376
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__223 or _la==SparqlParser.T__224):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1377
                self.match(SparqlParser.T__10)
                self.state = 1378
                self.expression()
                self.state = 1379
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__225, SparqlParser.T__226]:
                self.enterOuterAlt(localctx, 53)
                self.state = 1381
                self.regexExpression()
                pass
            elif token in [SparqlParser.T__231, SparqlParser.T__232]:
                self.enterOuterAlt(localctx, 54)
                self.state = 1382
                self.existsFunc()
                pass
            elif token in [SparqlParser.T__124, SparqlParser.T__125]:
                self.enterOuterAlt(localctx, 55)
                self.state = 1383
                self.notExistsFunc()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_regexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexExpression" ):
                listener.enterRegexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexExpression" ):
                listener.exitRegexExpression(self)




    def regexExpression(self):

        localctx = SparqlParser.RegexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_regexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__225 or _la==SparqlParser.T__226):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1387
            self.match(SparqlParser.T__10)
            self.state = 1388
            self.expression()
            self.state = 1389
            self.match(SparqlParser.T__103)
            self.state = 1390
            self.expression()
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__103:
                self.state = 1391
                self.match(SparqlParser.T__103)
                self.state = 1392
                self.expression()


            self.state = 1395
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubstringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_substringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstringExpression" ):
                listener.enterSubstringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstringExpression" ):
                listener.exitSubstringExpression(self)




    def substringExpression(self):

        localctx = SparqlParser.SubstringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_substringExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__227 or _la==SparqlParser.T__228):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1398
            self.match(SparqlParser.T__10)
            self.state = 1399
            self.expression()
            self.state = 1400
            self.match(SparqlParser.T__103)
            self.state = 1401
            self.expression()
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__103:
                self.state = 1402
                self.match(SparqlParser.T__103)
                self.state = 1403
                self.expression()


            self.state = 1406
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrReplaceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SparqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SparqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SparqlParser.RULE_strReplaceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrReplaceExpression" ):
                listener.enterStrReplaceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrReplaceExpression" ):
                listener.exitStrReplaceExpression(self)




    def strReplaceExpression(self):

        localctx = SparqlParser.StrReplaceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_strReplaceExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__229 or _la==SparqlParser.T__230):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1409
            self.match(SparqlParser.T__10)
            self.state = 1410
            self.expression()
            self.state = 1411
            self.match(SparqlParser.T__103)
            self.state = 1412
            self.expression()
            self.state = 1413
            self.match(SparqlParser.T__103)
            self.state = 1414
            self.expression()
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__103:
                self.state = 1415
                self.match(SparqlParser.T__103)
                self.state = 1416
                self.expression()


            self.state = 1419
            self.match(SparqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistsFuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_existsFunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsFunc" ):
                listener.enterExistsFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsFunc" ):
                listener.exitExistsFunc(self)




    def existsFunc(self):

        localctx = SparqlParser.ExistsFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_existsFunc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__231 or _la==SparqlParser.T__232):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1422
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotExistsFuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(SparqlParser.GroupGraphPatternContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_notExistsFunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExistsFunc" ):
                listener.enterNotExistsFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExistsFunc" ):
                listener.exitNotExistsFunc(self)




    def notExistsFunc(self):

        localctx = SparqlParser.NotExistsFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_notExistsFunc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__124 or _la==SparqlParser.T__125):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1425
            _la = self._input.LA(1)
            if not(_la==SparqlParser.T__231 or _la==SparqlParser.T__232):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1426
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SparqlParser.ExpressionContext,0)


        def string(self):
            return self.getTypedRuleContext(SparqlParser.StringContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate" ):
                listener.enterAggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate" ):
                listener.exitAggregate(self)




    def aggregate(self):

        localctx = SparqlParser.AggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_aggregate)
        self._la = 0 # Token type
        try:
            self.state = 1492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.T__233, SparqlParser.T__234]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__233 or _la==SparqlParser.T__234):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1429
                self.match(SparqlParser.T__10)
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1430
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1435
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SparqlParser.T__14]:
                    self.state = 1433
                    self.match(SparqlParser.T__14)
                    pass
                elif token in [SparqlParser.T__10, SparqlParser.T__110, SparqlParser.T__111, SparqlParser.T__124, SparqlParser.T__125, SparqlParser.T__126, SparqlParser.T__127, SparqlParser.T__128, SparqlParser.T__129, SparqlParser.T__130, SparqlParser.T__131, SparqlParser.T__132, SparqlParser.T__133, SparqlParser.T__134, SparqlParser.T__135, SparqlParser.T__136, SparqlParser.T__137, SparqlParser.T__138, SparqlParser.T__139, SparqlParser.T__140, SparqlParser.T__141, SparqlParser.T__142, SparqlParser.T__143, SparqlParser.T__144, SparqlParser.T__145, SparqlParser.T__146, SparqlParser.T__147, SparqlParser.T__148, SparqlParser.T__149, SparqlParser.T__150, SparqlParser.T__151, SparqlParser.T__152, SparqlParser.T__153, SparqlParser.T__154, SparqlParser.T__155, SparqlParser.T__156, SparqlParser.T__157, SparqlParser.T__158, SparqlParser.T__159, SparqlParser.T__160, SparqlParser.T__161, SparqlParser.T__162, SparqlParser.T__163, SparqlParser.T__164, SparqlParser.T__165, SparqlParser.T__166, SparqlParser.T__167, SparqlParser.T__168, SparqlParser.T__169, SparqlParser.T__170, SparqlParser.T__171, SparqlParser.T__172, SparqlParser.T__173, SparqlParser.T__174, SparqlParser.T__175, SparqlParser.T__176, SparqlParser.T__177, SparqlParser.T__178, SparqlParser.T__179, SparqlParser.T__180, SparqlParser.T__181, SparqlParser.T__182, SparqlParser.T__183, SparqlParser.T__184, SparqlParser.T__185, SparqlParser.T__186, SparqlParser.T__187, SparqlParser.T__188, SparqlParser.T__189, SparqlParser.T__190, SparqlParser.T__191, SparqlParser.T__192, SparqlParser.T__193, SparqlParser.T__194, SparqlParser.T__195, SparqlParser.T__196, SparqlParser.T__197, SparqlParser.T__198, SparqlParser.T__199, SparqlParser.T__200, SparqlParser.T__201, SparqlParser.T__202, SparqlParser.T__203, SparqlParser.T__204, SparqlParser.T__205, SparqlParser.T__206, SparqlParser.T__207, SparqlParser.T__208, SparqlParser.T__209, SparqlParser.T__210, SparqlParser.T__211, SparqlParser.T__212, SparqlParser.T__213, SparqlParser.T__214, SparqlParser.T__215, SparqlParser.T__216, SparqlParser.T__217, SparqlParser.T__218, SparqlParser.T__219, SparqlParser.T__220, SparqlParser.T__221, SparqlParser.T__222, SparqlParser.T__223, SparqlParser.T__224, SparqlParser.T__225, SparqlParser.T__226, SparqlParser.T__227, SparqlParser.T__228, SparqlParser.T__229, SparqlParser.T__230, SparqlParser.T__231, SparqlParser.T__232, SparqlParser.T__233, SparqlParser.T__234, SparqlParser.T__235, SparqlParser.T__236, SparqlParser.T__237, SparqlParser.T__238, SparqlParser.T__239, SparqlParser.T__240, SparqlParser.T__241, SparqlParser.T__242, SparqlParser.T__243, SparqlParser.T__244, SparqlParser.T__245, SparqlParser.T__246, SparqlParser.T__250, SparqlParser.T__251, SparqlParser.T__252, SparqlParser.T__253, SparqlParser.IRIREF, SparqlParser.PNAME_NS, SparqlParser.PNAME_LN, SparqlParser.VAR1, SparqlParser.VAR2, SparqlParser.INTEGER, SparqlParser.DECIMAL, SparqlParser.DOUBLE, SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE, SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE, SparqlParser.STRING_LITERAL1, SparqlParser.STRING_LITERAL2, SparqlParser.STRING_LITERAL_LONG1, SparqlParser.STRING_LITERAL_LONG2]:
                    self.state = 1434
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1437
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__235, SparqlParser.T__236]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1438
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__235 or _la==SparqlParser.T__236):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1439
                self.match(SparqlParser.T__10)
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1440
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1443
                self.expression()
                self.state = 1444
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__237, SparqlParser.T__238]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__237 or _la==SparqlParser.T__238):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1447
                self.match(SparqlParser.T__10)
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1448
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1451
                self.expression()
                self.state = 1452
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__239, SparqlParser.T__240]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1454
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__239 or _la==SparqlParser.T__240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1455
                self.match(SparqlParser.T__10)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1456
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1459
                self.expression()
                self.state = 1460
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__241, SparqlParser.T__242]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1462
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__241 or _la==SparqlParser.T__242):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1463
                self.match(SparqlParser.T__10)
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1464
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1467
                self.expression()
                self.state = 1468
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__243, SparqlParser.T__244]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1470
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__243 or _la==SparqlParser.T__244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1471
                self.match(SparqlParser.T__10)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1472
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1475
                self.expression()
                self.state = 1476
                self.match(SparqlParser.T__13)
                pass
            elif token in [SparqlParser.T__245, SparqlParser.T__246]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1478
                _la = self._input.LA(1)
                if not(_la==SparqlParser.T__245 or _la==SparqlParser.T__246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1479
                self.match(SparqlParser.T__10)
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__6 or _la==SparqlParser.T__7:
                    self.state = 1480
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__6 or _la==SparqlParser.T__7):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1483
                self.expression()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SparqlParser.T__47:
                    self.state = 1484
                    self.match(SparqlParser.T__47)
                    self.state = 1485
                    _la = self._input.LA(1)
                    if not(_la==SparqlParser.T__247 or _la==SparqlParser.T__248):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1486
                    self.match(SparqlParser.T__116)
                    self.state = 1487
                    self.string()


                self.state = 1490
                self.match(SparqlParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IriOrFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def argList(self):
            return self.getTypedRuleContext(SparqlParser.ArgListContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_iriOrFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIriOrFunction" ):
                listener.enterIriOrFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIriOrFunction" ):
                listener.exitIriOrFunction(self)




    def iriOrFunction(self):

        localctx = SparqlParser.IriOrFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_iriOrFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.iri()
            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SparqlParser.T__10 or _la==SparqlParser.NIL:
                self.state = 1495
                self.argList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RdfLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SparqlParser.StringContext,0)


        def LANGTAG(self):
            return self.getToken(SparqlParser.LANGTAG, 0)

        def iri(self):
            return self.getTypedRuleContext(SparqlParser.IriContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_rdfLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdfLiteral" ):
                listener.enterRdfLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdfLiteral" ):
                listener.exitRdfLiteral(self)




    def rdfLiteral(self):

        localctx = SparqlParser.RdfLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_rdfLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.string()
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1499
                self.match(SparqlParser.LANGTAG)

            elif la_ == 2:
                self.state = 1500
                self.match(SparqlParser.T__249)
                self.state = 1501
                self.iri()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteralUnsigned(self):
            return self.getTypedRuleContext(SparqlParser.NumericLiteralUnsignedContext,0)


        def numericLiteralPositive(self):
            return self.getTypedRuleContext(SparqlParser.NumericLiteralPositiveContext,0)


        def numericLiteralNegative(self):
            return self.getTypedRuleContext(SparqlParser.NumericLiteralNegativeContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)




    def numericLiteral(self):

        localctx = SparqlParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_numericLiteral)
        try:
            self.state = 1507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.INTEGER, SparqlParser.DECIMAL, SparqlParser.DOUBLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1504
                self.numericLiteralUnsigned()
                pass
            elif token in [SparqlParser.INTEGER_POSITIVE, SparqlParser.DECIMAL_POSITIVE, SparqlParser.DOUBLE_POSITIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.numericLiteralPositive()
                pass
            elif token in [SparqlParser.INTEGER_NEGATIVE, SparqlParser.DECIMAL_NEGATIVE, SparqlParser.DOUBLE_NEGATIVE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1506
                self.numericLiteralNegative()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralUnsignedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(SparqlParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(SparqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(SparqlParser.DOUBLE, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_numericLiteralUnsigned

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteralUnsigned" ):
                listener.enterNumericLiteralUnsigned(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteralUnsigned" ):
                listener.exitNumericLiteralUnsigned(self)




    def numericLiteralUnsigned(self):

        localctx = SparqlParser.NumericLiteralUnsignedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_numericLiteralUnsigned)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            _la = self._input.LA(1)
            if not(((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (SparqlParser.INTEGER - 262)) | (1 << (SparqlParser.DECIMAL - 262)) | (1 << (SparqlParser.DOUBLE - 262)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralPositiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_POSITIVE(self):
            return self.getToken(SparqlParser.INTEGER_POSITIVE, 0)

        def DECIMAL_POSITIVE(self):
            return self.getToken(SparqlParser.DECIMAL_POSITIVE, 0)

        def DOUBLE_POSITIVE(self):
            return self.getToken(SparqlParser.DOUBLE_POSITIVE, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_numericLiteralPositive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteralPositive" ):
                listener.enterNumericLiteralPositive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteralPositive" ):
                listener.exitNumericLiteralPositive(self)




    def numericLiteralPositive(self):

        localctx = SparqlParser.NumericLiteralPositiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_numericLiteralPositive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            _la = self._input.LA(1)
            if not(((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (SparqlParser.INTEGER_POSITIVE - 265)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 265)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 265)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralNegativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NEGATIVE(self):
            return self.getToken(SparqlParser.INTEGER_NEGATIVE, 0)

        def DECIMAL_NEGATIVE(self):
            return self.getToken(SparqlParser.DECIMAL_NEGATIVE, 0)

        def DOUBLE_NEGATIVE(self):
            return self.getToken(SparqlParser.DOUBLE_NEGATIVE, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_numericLiteralNegative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteralNegative" ):
                listener.enterNumericLiteralNegative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteralNegative" ):
                listener.exitNumericLiteralNegative(self)




    def numericLiteralNegative(self):

        localctx = SparqlParser.NumericLiteralNegativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_numericLiteralNegative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            _la = self._input.LA(1)
            if not(((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (SparqlParser.INTEGER_NEGATIVE - 268)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 268)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 268)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SparqlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = SparqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            _la = self._input.LA(1)
            if not(((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & ((1 << (SparqlParser.T__250 - 251)) | (1 << (SparqlParser.T__251 - 251)) | (1 << (SparqlParser.T__252 - 251)) | (1 << (SparqlParser.T__253 - 251)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL1(self):
            return self.getToken(SparqlParser.STRING_LITERAL1, 0)

        def STRING_LITERAL2(self):
            return self.getToken(SparqlParser.STRING_LITERAL2, 0)

        def STRING_LITERAL_LONG1(self):
            return self.getToken(SparqlParser.STRING_LITERAL_LONG1, 0)

        def STRING_LITERAL_LONG2(self):
            return self.getToken(SparqlParser.STRING_LITERAL_LONG2, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = SparqlParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            _la = self._input.LA(1)
            if not(((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & ((1 << (SparqlParser.STRING_LITERAL1 - 272)) | (1 << (SparqlParser.STRING_LITERAL2 - 272)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 272)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 272)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IRIREF(self):
            return self.getToken(SparqlParser.IRIREF, 0)

        def prefixedName(self):
            return self.getTypedRuleContext(SparqlParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return SparqlParser.RULE_iri

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIri" ):
                listener.enterIri(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIri" ):
                listener.exitIri(self)




    def iri(self):

        localctx = SparqlParser.IriContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_iri)
        try:
            self.state = 1521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SparqlParser.IRIREF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.match(SparqlParser.IRIREF)
                pass
            elif token in [SparqlParser.PNAME_NS, SparqlParser.PNAME_LN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.prefixedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PNAME_LN(self):
            return self.getToken(SparqlParser.PNAME_LN, 0)

        def PNAME_NS(self):
            return self.getToken(SparqlParser.PNAME_NS, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_prefixedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixedName" ):
                listener.enterPrefixedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixedName" ):
                listener.exitPrefixedName(self)




    def prefixedName(self):

        localctx = SparqlParser.PrefixedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_prefixedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            _la = self._input.LA(1)
            if not(_la==SparqlParser.PNAME_NS or _la==SparqlParser.PNAME_LN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlankNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLANK_NODE_LABEL(self):
            return self.getToken(SparqlParser.BLANK_NODE_LABEL, 0)

        def ANON(self):
            return self.getToken(SparqlParser.ANON, 0)

        def getRuleIndex(self):
            return SparqlParser.RULE_blankNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlankNode" ):
                listener.enterBlankNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlankNode" ):
                listener.exitBlankNode(self)




    def blankNode(self):

        localctx = SparqlParser.BlankNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_blankNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            _la = self._input.LA(1)
            if not(_la==SparqlParser.BLANK_NODE_LABEL or _la==SparqlParser.ANON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[106] = self.graphTerm_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def graphTerm_sempred(self, localctx:GraphTermContext, predIndex:int):
            if predIndex == 0:
                return allowsBlankNodes
         




