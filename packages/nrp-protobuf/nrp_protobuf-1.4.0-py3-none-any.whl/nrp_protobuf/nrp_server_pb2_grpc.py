# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import nrp_server_pb2 as nrp__server__pb2


class NrpCoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initialize = channel.unary_unary(
                '/NrpCore.NrpCore/initialize',
                request_serializer=nrp__server__pb2.EmptyMessage.SerializeToString,
                response_deserializer=nrp__server__pb2.InitializeResponse.FromString,
                )
        self.runLoop = channel.unary_unary(
                '/NrpCore.NrpCore/runLoop',
                request_serializer=nrp__server__pb2.RunLoopMessage.SerializeToString,
                response_deserializer=nrp__server__pb2.RunLoopResponse.FromString,
                )
        self.runUntilTimeout = channel.unary_unary(
                '/NrpCore.NrpCore/runUntilTimeout',
                request_serializer=nrp__server__pb2.EmptyMessage.SerializeToString,
                response_deserializer=nrp__server__pb2.RunLoopResponse.FromString,
                )
        self.stopLoop = channel.unary_unary(
                '/NrpCore.NrpCore/stopLoop',
                request_serializer=nrp__server__pb2.EmptyMessage.SerializeToString,
                response_deserializer=nrp__server__pb2.Response.FromString,
                )
        self.reset = channel.unary_unary(
                '/NrpCore.NrpCore/reset',
                request_serializer=nrp__server__pb2.ResetMessage.SerializeToString,
                response_deserializer=nrp__server__pb2.ResetResponse.FromString,
                )
        self.shutdown = channel.unary_unary(
                '/NrpCore.NrpCore/shutdown',
                request_serializer=nrp__server__pb2.EmptyMessage.SerializeToString,
                response_deserializer=nrp__server__pb2.Response.FromString,
                )


class NrpCoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runLoop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runUntilTimeout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopLoop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NrpCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.initialize,
                    request_deserializer=nrp__server__pb2.EmptyMessage.FromString,
                    response_serializer=nrp__server__pb2.InitializeResponse.SerializeToString,
            ),
            'runLoop': grpc.unary_unary_rpc_method_handler(
                    servicer.runLoop,
                    request_deserializer=nrp__server__pb2.RunLoopMessage.FromString,
                    response_serializer=nrp__server__pb2.RunLoopResponse.SerializeToString,
            ),
            'runUntilTimeout': grpc.unary_unary_rpc_method_handler(
                    servicer.runUntilTimeout,
                    request_deserializer=nrp__server__pb2.EmptyMessage.FromString,
                    response_serializer=nrp__server__pb2.RunLoopResponse.SerializeToString,
            ),
            'stopLoop': grpc.unary_unary_rpc_method_handler(
                    servicer.stopLoop,
                    request_deserializer=nrp__server__pb2.EmptyMessage.FromString,
                    response_serializer=nrp__server__pb2.Response.SerializeToString,
            ),
            'reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reset,
                    request_deserializer=nrp__server__pb2.ResetMessage.FromString,
                    response_serializer=nrp__server__pb2.ResetResponse.SerializeToString,
            ),
            'shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.shutdown,
                    request_deserializer=nrp__server__pb2.EmptyMessage.FromString,
                    response_serializer=nrp__server__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NrpCore.NrpCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NrpCore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NrpCore.NrpCore/initialize',
            nrp__server__pb2.EmptyMessage.SerializeToString,
            nrp__server__pb2.InitializeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def runLoop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NrpCore.NrpCore/runLoop',
            nrp__server__pb2.RunLoopMessage.SerializeToString,
            nrp__server__pb2.RunLoopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def runUntilTimeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NrpCore.NrpCore/runUntilTimeout',
            nrp__server__pb2.EmptyMessage.SerializeToString,
            nrp__server__pb2.RunLoopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopLoop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NrpCore.NrpCore/stopLoop',
            nrp__server__pb2.EmptyMessage.SerializeToString,
            nrp__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NrpCore.NrpCore/reset',
            nrp__server__pb2.ResetMessage.SerializeToString,
            nrp__server__pb2.ResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NrpCore.NrpCore/shutdown',
            nrp__server__pb2.EmptyMessage.SerializeToString,
            nrp__server__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
