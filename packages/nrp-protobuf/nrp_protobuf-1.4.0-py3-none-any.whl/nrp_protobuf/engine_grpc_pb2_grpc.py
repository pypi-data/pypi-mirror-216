# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import engine_grpc_pb2 as engine__grpc__pb2


class EngineGrpcServiceStub(object):
    """
    Remote Procedure Calls available to the gRPC engine
    These are commands that the engine client can send to the engine server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initialize = channel.unary_unary(
                '/EngineGrpc.EngineGrpcService/initialize',
                request_serializer=engine__grpc__pb2.InitializeRequest.SerializeToString,
                response_deserializer=engine__grpc__pb2.InitializeReply.FromString,
                )
        self.shutdown = channel.unary_unary(
                '/EngineGrpc.EngineGrpcService/shutdown',
                request_serializer=engine__grpc__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=engine__grpc__pb2.ShutdownReply.FromString,
                )
        self.runLoopStep = channel.unary_unary(
                '/EngineGrpc.EngineGrpcService/runLoopStep',
                request_serializer=engine__grpc__pb2.RunLoopStepRequest.SerializeToString,
                response_deserializer=engine__grpc__pb2.RunLoopStepReply.FromString,
                )
        self.setDataPacks = channel.unary_unary(
                '/EngineGrpc.EngineGrpcService/setDataPacks',
                request_serializer=engine__grpc__pb2.SetDataPacksRequest.SerializeToString,
                response_deserializer=engine__grpc__pb2.SetDataPacksReply.FromString,
                )
        self.getDataPacks = channel.unary_unary(
                '/EngineGrpc.EngineGrpcService/getDataPacks',
                request_serializer=engine__grpc__pb2.GetDataPacksRequest.SerializeToString,
                response_deserializer=engine__grpc__pb2.GetDataPacksReply.FromString,
                )
        self.reset = channel.unary_unary(
                '/EngineGrpc.EngineGrpcService/reset',
                request_serializer=engine__grpc__pb2.ResetRequest.SerializeToString,
                response_deserializer=engine__grpc__pb2.ResetReply.FromString,
                )


class EngineGrpcServiceServicer(object):
    """
    Remote Procedure Calls available to the gRPC engine
    These are commands that the engine client can send to the engine server
    """

    def initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runLoopStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDataPacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDataPacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EngineGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.initialize,
                    request_deserializer=engine__grpc__pb2.InitializeRequest.FromString,
                    response_serializer=engine__grpc__pb2.InitializeReply.SerializeToString,
            ),
            'shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.shutdown,
                    request_deserializer=engine__grpc__pb2.ShutdownRequest.FromString,
                    response_serializer=engine__grpc__pb2.ShutdownReply.SerializeToString,
            ),
            'runLoopStep': grpc.unary_unary_rpc_method_handler(
                    servicer.runLoopStep,
                    request_deserializer=engine__grpc__pb2.RunLoopStepRequest.FromString,
                    response_serializer=engine__grpc__pb2.RunLoopStepReply.SerializeToString,
            ),
            'setDataPacks': grpc.unary_unary_rpc_method_handler(
                    servicer.setDataPacks,
                    request_deserializer=engine__grpc__pb2.SetDataPacksRequest.FromString,
                    response_serializer=engine__grpc__pb2.SetDataPacksReply.SerializeToString,
            ),
            'getDataPacks': grpc.unary_unary_rpc_method_handler(
                    servicer.getDataPacks,
                    request_deserializer=engine__grpc__pb2.GetDataPacksRequest.FromString,
                    response_serializer=engine__grpc__pb2.GetDataPacksReply.SerializeToString,
            ),
            'reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reset,
                    request_deserializer=engine__grpc__pb2.ResetRequest.FromString,
                    response_serializer=engine__grpc__pb2.ResetReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EngineGrpc.EngineGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EngineGrpcService(object):
    """
    Remote Procedure Calls available to the gRPC engine
    These are commands that the engine client can send to the engine server
    """

    @staticmethod
    def initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineGrpc.EngineGrpcService/initialize',
            engine__grpc__pb2.InitializeRequest.SerializeToString,
            engine__grpc__pb2.InitializeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineGrpc.EngineGrpcService/shutdown',
            engine__grpc__pb2.ShutdownRequest.SerializeToString,
            engine__grpc__pb2.ShutdownReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def runLoopStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineGrpc.EngineGrpcService/runLoopStep',
            engine__grpc__pb2.RunLoopStepRequest.SerializeToString,
            engine__grpc__pb2.RunLoopStepReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setDataPacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineGrpc.EngineGrpcService/setDataPacks',
            engine__grpc__pb2.SetDataPacksRequest.SerializeToString,
            engine__grpc__pb2.SetDataPacksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDataPacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineGrpc.EngineGrpcService/getDataPacks',
            engine__grpc__pb2.GetDataPacksRequest.SerializeToString,
            engine__grpc__pb2.GetDataPacksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineGrpc.EngineGrpcService/reset',
            engine__grpc__pb2.ResetRequest.SerializeToString,
            engine__grpc__pb2.ResetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
