# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['ApiClient']

# %% ../nbs/00_core.ipynb 4
import pandas as pd
import requests
import json
import os
from tqdm import tqdm
import uuid

# %% ../nbs/00_core.ipynb 5
class ApiClient():
    def __init__(self, omeka_url, api_key, username, password):
        self.omeka_url = omeka_url
        self.api_key = api_key
        self.username = username
        self.password = password

        self.element_id_map = {
            'title': 50,
            'display_iiif': 54,
            'json_data': 56,
            "iiif_type": 58,
            'on_canvas': 62,
            'uuid': 65
        }

        self.params = {
            "key": self.api_key
        }

    def update_element_id(self, element_id_map):
        _elment_id_map = self.element_id_map.copy()

        for key, value in element_id_map.items():
            _elment_id_map[key] = value

        self.element_id_map = _elment_id_map

    

    @staticmethod
    def main(omeka_url, api_key, username, password, excel_path, element_id_map = {}, allow_duplicates = True):
        client = ApiClient(omeka_url, api_key, username, password)

        flg = client.check_login()

        if not flg:
            # client.login()
            raise Exception("login failed")

        client.update_element_id(element_id_map)
        client.main_excel(excel_path, allow_duplicates = allow_duplicates)

    def main_excel(self, excel_path, allow_duplicates = False):
        sheets = pd.read_excel(excel_path, sheet_name=None)

        df_collection = sheets["collection"]
        df_item = sheets["item"]
        df_annotation = sheets["annotation"]

        print("create collection")
        results_collection = self.create_collection(df_collection)

        # print(results_collection)

        # results_collection = {'https://d1fasenpql7fi9.cloudfront.net/v1/manifest/3437686.json': 18}

        print("create item")
        results_item = self.create_item(df_item, results_collection)

        # results_item = {'https://d1fasenpql7fi9.cloudfront.net/v1/manifest/3437686.json_https://www.dl.ndl.go.jp/api/iiif/3437686/canvas/1': {'item_id': 1531, 'canvas_uri': 'https://www.dl.ndl.go.jp/api/iiif/3437686/canvas/1'}, 'https://d1fasenpql7fi9.cloudfront.net/v1/manifest/3437686.json_https://www.dl.ndl.go.jp/api/iiif/3437686/canvas/2': {'item_id': 1629, 'canvas_uri': 'https://www.dl.ndl.go.jp/api/iiif/3437686/canvas/2'}, 'https://d1fasenpql7fi9.cloudfront.net/v1/manifest/3437686.json_https://www.dl.ndl.go.jp/api/iiif/3437686/canvas/3': {'item_id': 1630, 'canvas_uri': 'https://www.dl.ndl.go.jp/api/iiif/3437686/canvas/3'}}

        print("create annotation")
        self.create_annotation(df_annotation, results_item, allow_duplicates = allow_duplicates)

    def _create_item_json(self, element_texts_options):
        element_texts = []

        for element_text_option in element_texts_options:
            element_texts.append({
                "html": False,
                "text": element_text_option["text"],
                "element": {
                    "id": element_text_option["element"]
                }
            })

        item_json = {
            "element_texts": element_texts,
        }

        return item_json

    def create_collection(self, df):
        results = {}

        for index, row in tqdm(df.iterrows(), total=df.shape[0]):
            # self.create_collection_item(row)

            url = row["manifest_uri"] # "http://example.org"

            element_texts_options = [
                {
                    "text": url,
                    "element": self.element_id_map["title"]
                },
                {
                    "text": "Manifest",
                    "element": self.element_id_map["iiif_type"]
                }
            ]

            item_json = self._create_item_json(element_texts_options)

            endpoint_collection = f"{self.omeka_url}/api/collections"

            r = requests.post(endpoint_collection, json=item_json, params=self.params)
            collection_id = r.json()["id"]

            # return collection_id

            results[url] = collection_id

        return results
    
    def check_item_exists(self, item_uuid):
        endpoint = f"{self.omeka_url}/api/items"

        element_id_uuid = self.element_id_map["uuid"]

        query = {
            "advanced[0][element_id]": element_id_uuid,
            "advanced[0][type]": "is exactly",
            "advanced[0][terms]": item_uuid
        }

        '''
        for key, value in self.params.items():
            params[key] = value
        '''

        df_ex = requests.get(endpoint, json=query, params=self.params).json()

        item_id = None

        '''

        if len(df_ex) == 0:
            r = requests.post(endpoint, json=item_json)
            item_id = r.json()["id"]
        else:
            item_id = df_ex[0]["id"]
            endpoint_update = f"{self.omeka_url}/api/items/{item_id}"
            requests.put(endpoint_update, json=item_json, params=self.params)

        '''

        if len(df_ex) > 0:
            item_id = df_ex[0]["id"]

        return item_id

    def create_item(self, df, results_collection, update=False):
        results = {}

        for index, row in tqdm(df.iterrows(), total=len(df)):
            item_uuid = str(uuid.uuid4()) # row["uuid"]
            title = row["title"]
            canvas_uri = row["canvas_uri"]
            width = row["width"]
            height = row["height"]

            image_url = row["image_url"]

            canvas_json = {
                "@id": canvas_uri,
                "@type": "sc:Canvas",
                "label": "recto",
                "width": width,
                "height": height,
                "thumbnail": image_url,
                "images": [
                    {
                        "resource": {
                            "format": "image/jpeg",
                            "height": height,
                            "width": width,
                            "@id": image_url,
                            "@type": "dcTypes:Image"
                        },
                        "on": canvas_uri,
                        "motivation": "sc:painting",
                        "@id": image_url,
                        "@type": "oa:Annotation"
                    }
                ]
            }

            

            element_texts_options = [
                {
                    "text": title,
                    "element": self.element_id_map["title"]
                },
                {
                    "text": item_uuid,
                    "element": self.element_id_map["uuid"]
                },
                {
                    "text": "Yes",
                    "element": self.element_id_map["display_iiif"]
                },
                {
                    "text": json.dumps(canvas_json),
                    "element": self.element_id_map["json_data"]
                }
            ]

            item_json = item_json = self._create_item_json(element_texts_options)

            manifest_uri = row["manifest_uri"]

            collection_id = None

            if manifest_uri in results_collection:
                collection_id = results_collection[manifest_uri]

            
                item_json["collection"] = {
                    "id": collection_id
                }

            item_id = None
            if update:

                item_id = self.check_item_exists(item_uuid)

            if item_id is None:
                endpoint = f"{self.omeka_url}/api/items"
                r = requests.post(endpoint, json=item_json, params=self.params)
                item_id = r.json()["id"]
            else:
                # item_id = df_ex[0]["id"]
                endpoint_update = f"{self.omeka_url}/api/items/{item_id}"
                requests.put(endpoint_update, json=item_json, params=self.params)

            results[canvas_uri] = {
                "item_id": item_id,
                "item_uuid": item_uuid
            }

        return results
    
    def check_login(self):
        payload = {
            'username': self.username,
            'password': self.password
        }

        omeka_url = self.omeka_url

        # authenticity_tokenの取得
        s = requests.Session()
        s.get(omeka_url)

        # ログイン
        r = s.post('{}/admin/users/login'.format(omeka_url), data=payload)

        self.s = s

        # ログインできたか確認
        if r.status_code == 200:
            # print('Login successful')
            return True
        
        return False


    def create_annotation(self, df, results_item, allow_duplicates=True):
        for index, row in tqdm(df.iterrows(), total=len(df)):
            public = False
            featured = False
            xywh = "{},{},{},{}".format(row["x"], row["y"], row["w"], row["h"])

            canvas_uri = row["canvas_uri"]

            item_uuid = results_item[canvas_uri]["item_uuid"]

            if not allow_duplicates:

                query = {
                    "advanced[0][element_id]": self.element_id_map["on_canvas"],
                    "advanced[0][type]": "is exactly",
                    "advanced[0][terms]": item_uuid,
                    "advanced[1][joiner]": "and",
                    "advanced[1][element_id]": self.element_id_map["json_data"],
                    "advanced[1][type]": "contains",
                    "advanced[1][terms]": xywh
                }

                endpoint = f"{self.omeka_url}/api/items"

                # query_url = f"{endpoint}&{query_string}"

                # print(query_url)

                df = requests.get(endpoint, json=query, params=self.params).json()

                if len(df) > 0:
                    continue

            # item_id = results_item[item_uuid]["item_id"]
            item_id = results_item[canvas_uri]["item_id"]

            # canvas_uri = results_item[item_uuid]["canvas_uri"]

            url = "{}/admin/iiif-items/annotator/items/{}".format(self.omeka_url, item_id)

            resources = []

        
            if "tag" in row and not pd.isnull(row["tag"]):
                resources.append({
                    "@type": "oa:Tag",
                    "chars": row["tag"]
                })


            if "chars" in row and not pd.isnull(row["chars"]):
                resources.append({
                    "@type": "dctypes:Text",
                    "chars": row["chars"]
                })

            item = {
                "@context": "http://iiif.io/api/presentation/2/context.json",
                "@type": "oa:Annotation",
                "motivation": [
                    "oa:tagging",
                    "oa:commenting"
                ],
                "resource": resources,
                "_iiifitems_access": {
                    "public": public,
                    "featured": featured
                },
                "on": f"{canvas_uri}#xywh={xywh}"
            }

            
            data = json.dumps(item)
            self.s.post(url, data=data)

            # res = 

            # print(res.json())
    
    @staticmethod
    def convert_iiif3_to_excel(manifest_uri, output_path, start_index = 0, end_index = -1):
        manifest3 = requests.get(manifest_uri).json()

        ApiClient.convert_main(manifest3, output_path, start_index, end_index)

    @staticmethod
    def convert_main(manifest3, output_path, start_index = 0, end_index = -1):
        canvases = manifest3["items"]

        manifest_uri = manifest3["id"]

        if end_index == -1:
            canvases = canvases[start_index:]
        else:
            canvases = canvases[start_index:end_index]

        label = manifest3["label"]["none"][0]

        rows_collection = []
        rows_collection.append(["manifest_uri"])
        rows_collection.append([manifest_uri])

        rows = []
        rows.append(["title", "canvas_uri", "width", "height", "image_url", "manifest_uri"])

        rows_annotation = []
        rows_annotation.append(["chars", "x", "y", "w", "h", "canvas_uri", "tag"])

        for i in range(len(canvases)):
            # for canvas in canvases:
            index = start_index + i + 1

            canvas = canvases[i]

            canvas_uri = canvas["id"]
            image_url = canvas["items"][0]["items"][0]["body"]["id"]

            title = f"{label} [{index}]"

            width = canvas["width"]
            height = canvas["height"]

            # uuid = f"{url}_{canvas_uri}"

            rows.append([title, canvas_uri, width, height, image_url, manifest_uri])

            # annotation

            annotations = canvas["annotations"][0]["items"]

            for annotation in annotations:
                chars = annotation["body"]["value"]
                target = annotation["target"]
                xywh = target.split("#xywh=")[1]
                x, y, w, h = xywh.split(",")
                rows_annotation.append([chars, x, y, w, h, canvas_uri, ""])

            # break

        # rows

        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        with pd.ExcelWriter(output_path) as writer:
            df0 = pd.DataFrame(rows_collection)
            df0.to_excel(writer, sheet_name='collection', index=False, header=False)

            df1 = pd.DataFrame(rows)
            df1.to_excel(writer, sheet_name='item', index=False, header=False)

            df2 = pd.DataFrame(rows_annotation)
            df2.to_excel(writer, sheet_name='annotation', index=False, header=False)

    @staticmethod
    def convert_local_iiif3_to_excel(manifest_json_path, output_path, start_index = 0, end_index = -1):
        # manifest3 = requests.get(manifest_uri).json()
        with open(manifest_json_path) as f:
            manifest3 = json.load(f)

        ApiClient.convert_main(manifest3, output_path, start_index, end_index)

        
